
package android.os;

class AsyncTask {
    @Source(FlowPermission.ANY) Result doInBackground(@Source(FlowPermission.ANY) Params... params);
}

class Environment {

    static @Source(FlowPermission.FILESYSTEM) File 
    getExternalStoragePublicDirectory(@Sink(FlowPermission.FILESYSTEM) String type);

}

class IBinder {
    //Added by Carl Hartung
    abstract boolean transact(int code, Parcel data, Parcel reply, int flags);
    //Perform a generic operation with the object.
    
    abstract IInterface queryLocalInterface(String descriptor);
    //Attempt to retrieve a local implementation of an interface for this Binder object.
    
    abstract String getInterfaceDescriptor();
    //Get the canonical name of the interface supported by this binder.
     
    //UNUSED and UNANNOTATED 
    // abstract void dump(FileDescriptor fd, String[] args);
    // abstract void dumpAsync(FileDescriptor fd, String[] args);
    // abstract boolean isBinderAlive();
    // abstract void linkToDeath(IBinder.DeathRecipient recipient, int flags);
    // abstract boolean pingBinder();
    // abstract boolean unlinkToDeath(IBinder.DeathRecipient recipient, int flags);
    }
    
    
    class Bundle {
        //Added by Carl Hartung
        //This class will need a qualifier  parameter
        
    void writeToParcel(Parcel parcel, int flags);
    //Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection .
    
    String getString(String key, String defaultValue);
    //Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key .
    
    String getString(String key);
    //Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key .
    
    <T extends Parcelable> T getParcelable(String key);
    //Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key .
    
    int getInt(String key, int defaultValue);
    //Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key .
    
    int getInt(String key);
    //Returns the value associated with the given key, or 0 if no mapping of the desired type exists for the given key .
    
    void putInt(String key, int value);
    //Inserts an int value into the mapping of this Bundle, replacing any existing value for the given key .
    
    Object get(String key);
    //Returns the entry with the given key as an object .
    
    void putParcelable(String key, Parcelable value);
    //Inserts a Parcelable value into the mapping of this Bundle, replacing any existing value for the given key .
    
    void putBoolean(String key, boolean value);
    //Inserts a Boolean value into the mapping of this Bundle, replacing any existing value for the given key .
    
    long getLong(String key);
    //Returns the value associated with the given key, or 0L if no mapping of the desired type exists for the given key .
    
    long getLong(String key, long defaultValue);
    //Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key .
    
    void setClassLoader(ClassLoader loader);
    //Changes the ClassLoader this Bundle uses when instantiating objects .
    
    void putString(String key, String value);
    //Inserts a String value into the mapping of this Bundle, replacing any existing value for the given key .
    
    boolean getBoolean(String key);
    //Returns the value associated with the given key, or false if no mapping of the desired type exists for the given key .
    
    boolean getBoolean(String key, boolean defaultValue);
    //Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key .
    
    double getDouble(String key);
    //Returns the value associated with the given key, or 0.0 if no mapping of the desired type exists for the given key .
    
    double getDouble(String key, double defaultValue);
    //Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key .
    
    boolean containsKey(String key);
    //Returns true if the given key is contained in the mapping of this Bundle .
    
    void putDouble(String key, double value);
    //Inserts a double value into the mapping of this Bundle, replacing any existing value for the given key .
    
    void putLong(String key, long value);
    //Inserts a long value into the mapping of this Bundle, replacing any existing value for the given key .
    
    void putBundle(String key, Bundle value);
    //Inserts a Bundle value into the mapping of this Bundle, replacing any existing value for the given key .
    
    void readFromParcel(Parcel parcel);
    //Reads the Parcel contents into this Bundle, typically in order for it to be passed through an IBinder connection .
    
    void putAll(Bundle map);
    //Inserts all mappings from the given Bundle into this Bundle .
    
    <T extends Parcelable> SparseArray<T> getSparseParcelableArray(String key);
    //Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key .
    
    Parcelable[] getParcelableArray(String key);
    //Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key .
    
    Bundle getBundle(String key);
    //Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key .
    
    void putSparseParcelableArray(String key, SparseArray<? extends Parcelable> value);
    //Inserts a SparceArray of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key .
    
    void putShort(String key, short value);
    //Inserts a short value into the mapping of this Bundle, replacing any existing value for the given key .
    
    void putParcelableArray(String key, Parcelable[] value);
    //Inserts an array of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key .
    
    void putFloat(String key, float value);
    //Inserts a float value into the mapping of this Bundle, replacing any existing value for the given key .
    
    void putCharSequence(String key, CharSequence value);
    //Inserts a CharSequence value into the mapping of this Bundle, replacing any existing value for the given key .
    
    Set<String> keySet();
    //Returns a Set containing the Strings used as keys in this Bundle .
    
    boolean isEmpty();
    //Returns true if the mapping of this Bundle is empty, false otherwise .
    
    String[] getStringArray(String key);
    //Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key .
    
    Object clone();
    //Clones the current Bundle .
}