package android.support.v4.app;
class FragmentActivity {
//CSH: in spreadsheet, not found in API:
// doReallyStop
// dumpViewHierarchy
// invalidateSupportFragment
// onReallyStop
// viewToString


void dump(String prefix, @Sink({INTERNET, FILESYSTEM, EXTERNAL_STORAGE}) FileDescriptor fd, @PolyFlowReceiver PrintWriter writer, String[] args);
//Print the Activity's state into the given stream.

Object getLastCustomNonConfigurationInstance();
//Return the value previously returned from onRetainCustomNonConfigurationInstance();.

FragmentManager getSupportFragmentManager();
//Return the FragmentManager for interacting with fragments associated with this activity.

LoaderManager getSupportLoaderManager();
//Return the LoaderManager for this fragment, creating it if needed.

void onAttachFragment(Fragment fragment);
//Called when a fragment is attached to the activity.

void onBackPressed();
//Take care of popping the fragment back stack or finishing the activity as appropriate.

void onConfigurationChanged(Configuration newConfig);
//Dispatch configuration change to all fragments.

boolean onCreatePanelMenu(int featureId, Menu menu);
//Dispatch to Fragment.onCreateOptionsMenu();.

View onCreateView(String name, Context context, AttributeSet attrs);
//Add support for inflating the <fragment> tag.

boolean onKeyDown(@Source(USER_INPUT) int keyCode, @Source(USER_INPUT) KeyEvent event);
//Take care of calling onBackPressed(); for pre-Eclair platforms.

void onLowMemory();
//Dispatch onLowMemory(); to all fragments.

boolean onMenuItemSelected(int featureId, MenuItem item);
//Dispatch context and options menu to fragments.

void onPanelClosed(int featureId, Menu menu);
//Call onOptionsMenuClosed(); on fragments.

boolean onPreparePanel(int featureId, View view, Menu menu);
//Dispatch onPrepareOptionsMenu(); to fragments.

Object onRetainCustomNonConfigurationInstance();
//Use this instead of onRetainNonConfigurationInstance();.

final Object onRetainNonConfigurationInstance();
//This method was deprecated in API level . Use the new Fragment API setRetainInstance(boolean); instead; this is also available on older platforms through the Android compatibility package.

void startActivityForResult(Intent intent, int requestCode);
//Modifies the standard behavior to allow results to be delivered to fragments.

void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode);
//Called by Fragment.startActivityForResult(); to implement its behavior.

void supportInvalidateOptionsMenu();
//Invalidate the activity's options menu.


//Protected Methods
void onActivityResult(int requestCode, int resultCode, Intent data);
//Dispatch incoming result to the correct fragment.

void onCreate(Bundle savedInstanceState);
//Perform initialization of all fragments and loaders.

void onDestroy();
//Destroy all fragments and loaders.

void onNewIntent(Intent intent);
//Handle onNewIntent(); to inform the fragment manager that the state is not saved.

void onPause();
//Dispatch onPause(); to fragments.

void onPostResume();
//Dispatch onResume(); to fragments.

void onResume();
//Dispatch onResume(); to fragments.

void onResumeFragments();
//This is the fragment-orientated version of onResume(); that you can override to perform operations in the Activity at the same point where its fragments are resumed.

void onSaveInstanceState(Bundle outState);
//Save all appropriate fragment state.

void onStart();
//Dispatch onStart(); to all fragments.

void onStop();
//Dispatch onStop(); to all fragments.
}

class FragmentTabHost {
    
    
//CSH: in spreadsheet, not found in API:
//doTabChanged
//ensureContent
//initFragmentTabHost

void addTab(@Sink(DISPLAY) TabHost.TabSpec tabSpec, Class<?> clss, Bundle args);

//void onTabChanged(String tabId);

//void setOnTabChangedListener(TabHost.OnTabChangeListener l);
//Register a callback to be invoked when the selected state of any of the items in this list changes

//void setup();
//This method was deprecated in API level . Don't call the original TabHost setup, you must instead call setup(Context, FragmentManager); or setup(Context, FragmentManager, int);.

//void setup(Context context, FragmentManager manager);

//void setup(Context context, FragmentManager manager, int containerId);

//Protected Methods
//void onAttachedToWindow();
//This is called when the view is attached to a window.

//void onDetachedFromWindow();
//This is called when the view is detached from a window.

//void onRestoreInstanceState(Parcelable state);
//Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState();.

//Parcelable onSaveInstanceState();
//Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.

}

class Fragment{
        void setHasOptionsMenu(boolean hasMenu);
        void startActivity(Intent intent);
        void onCreate(Bundle savedInstanceState);
        Fragment();
        boolean onOptionsItemSelected(MenuItem item);
        void onActivityCreated( Bundle savedInstanceState);
        LoaderManager getLoaderManager();
        void setArguments(@Source({INTENT,LITERAL}) Bundle args);
        Bundle getArguments();
        boolean isResumed();
        FragmentActivity getActivity();
}
class NavUtils{
            static void navigateUpFromSameTask(Activity sourceActivity);
}

package android.support.v4.content;
class LocalBroadcastManager{
            static LocalBroadcastManager getInstance(Context context);
            void registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
            boolean sendBroadcast(Intent intent);
}

package android.support.v4.util;

class LongSparseArray {
//CSH: found in spreadsheet, not in API
//binarySearch
//gc

//void append(long key, E value);
//Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.

//void clear();
//Removes all key-value mappings from this LongSparseArray.

LongSparseArray<E> clone();
//Creates and returns a copy of this Object.

void delete(long key);
//Removes the mapping from the specified key, if there was any.

E get(long key, E valueIfKeyNotFound);
//Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made.

E get(long key);
//Gets the Object mapped from the specified key, or null if no such mapping has been made.

static int idealByteArraySize(int need);

static int idealLongArraySize(int need);

//int indexOfKey(long key);
//Returns the index for which keyAt(int); would return the specified key, or a negative number if the specified key is not mapped.

//int indexOfValue(E value);
//Returns an index for which valueAt(int); would return the specified key, or a negative number if no keys map to the specified value.

//long keyAt(int index);
//Given an index in the range 0...size();-1, returns the key from the indexth key-value mapping that this LongSparseArray stores.

void put(long key, E value);
//Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.

//void remove(long key);
//Alias for delete(long);.

//void removeAt(int index);
//Removes the mapping at the specified index.

//void setValueAt(int index, E value);
//Given an index in the range 0...size();-1, sets a new value for the indexth key-value mapping that this LongSparseArray stores.

//int size();
//Returns the number of key-value mappings that this LongSparseArray currently stores.

//E valueAt(int index);
//Given an index in the range 0...size();-1, returns the value from the indexth key-value mapping that this LongSparseArray stores.

}

class SparseArrayCompat {
// CSH: specified in spreadsheet but not found in class or parents
// binarySearch
// gc
// idealByteArraySize
// idealIntArraySize

void append(int key, E value);
//Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.

void clear();
//Removes all key-value mappings from this SparseArray.

void delete(int key);
//Removes the mapping from the specified key, if there was any.

E get(int key);
//Gets the Object mapped from the specified key, or null if no such mapping has been made.

E get(int key, E valueIfKeyNotFound);
//Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made.

int indexOfKey(int key);
//Returns the index for which keyAt(int); would return the specified key, or a negative number if the specified key is not mapped.

int indexOfValue(E value);
//Returns an index for which valueAt(int); would return the specified key, or a negative number if no keys map to the specified value.

int keyAt(int index);
//Given an index in the range 0...size();-1, returns the key from the indexth key-value mapping that this SparseArray stores.

void put(int key, E value);
//Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.

void remove(int key);
//Alias for delete(int);.

void removeAt(int index);
//Removes the mapping at the specified index.

void removeAtRange(int index, int size);
//Remove a range of mappings as a batch.

void setValueAt(int index, E value);
//Given an index in the range 0...size();-1, sets a new value for the indexth key-value mapping that this SparseArray stores.

int size();
//Returns the number of key-value mappings that this SparseArray currently stores.

E valueAt(int index);
//Given an index in the range 0...size();-1, returns the value from the indexth key-value mapping that this SparseArray stores.
}

package android.support.v4.view;

class AccessibilityDelegateCompat {
//CSH: Methods in spreadsheet but not in class or parent:
//getBridge

//CSH: It's unclear whether these push anything to the screen, AccessibilityEvent probably holds that answer.
   
boolean dispatchPopulateAccessibilityEvent(View host, AccessibilityEvent event);
//Dispatches an AccessibilityEvent to the host View first and then to its children for adding their text content to the event.

AccessibilityNodeProviderCompat getAccessibilityNodeProvider(View host);
//Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.

void onInitializeAccessibilityEvent(View host, AccessibilityEvent event);
//Initializes an AccessibilityEvent with information about the the host View which is the event source.

void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCompat info);
//Initializes an AccessibilityNodeInfoCompat with information about the host view.

void onPopulateAccessibilityEvent(View host, AccessibilityEvent event);
//Gives a chance to the host View to populate the accessibility event with its text content.

boolean onRequestSendAccessibilityEvent(ViewGroup host, View child, AccessibilityEvent event);
//Called when a child of the host View has requested sending an AccessibilityEvent and gives an opportunity to the parent (the host); to augment the event.

boolean performAccessibilityAction(View host, int action, Bundle args);
//Performs the specified accessibility action on the view.

void sendAccessibilityEvent(View host, int eventType);
//Sends an accessibility event of the given type.

void sendAccessibilityEventUnchecked(View host, AccessibilityEvent event);
//Sends an accessibility event.

}

class MotionEventCompat {
static int findPointerIndex(MotionEvent event, int pointerId);
//Call findPointerIndex(int);.

static int getActionIndex(MotionEvent event);
//Call getAction();, returning only the pointer index portion

//static int getActionMasked(MotionEvent event);
//Call getAction();, returning only the ACTION_MASK portion.

//static int getPointerCount(MotionEvent event);
//The number of pointers of data contained in this event.

static int getPointerId(MotionEvent event, int pointerIndex);
//Call getPointerId(int);.

static float getX(MotionEvent event, int pointerIndex);
//Call getX(int);.

static float getY(MotionEvent event, int pointerIndex);
//Call getY(int);.

}

class PagerAdapter {
void destroyItem(ViewGroup container, int position, Object object);
//Remove a page for the given position.

void destroyItem(View container, int position, Object object);
//This method was deprecated in API level . Use destroyItem(ViewGroup, int, Object);

void finishUpdate(View container);
//This method was deprecated in API level . Use finishUpdate(ViewGroup);

void finishUpdate(ViewGroup container);
//Called when the a change in the shown pages has been completed.

abstract int getCount();
//Return the number of views available.

int getItemPosition(Object object);
//Called when the host view is attempting to determine if an item's position has changed.

CharSequence getPageTitle(int position);
//This method may be called by the ViewPager to obtain a title string to describe the specified page.

float getPageWidth(int position);
//Returns the proportional width of a given page as a percentage of the ViewPager's measured width from (0.f-1.f]

Object instantiateItem(ViewGroup container, int position);
//Create the page for the given position.

Object instantiateItem(View container, int position);
//This method was deprecated in API level . Use instantiateItem(ViewGroup, int);

abstract boolean isViewFromObject(View view, Object object);
//Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int);.

void notifyDataSetChanged();
//This method should be called by the application if the data backing this adapter has changed and associated views should update.

void registerDataSetObserver(DataSetObserver observer);
//Register an observer to receive callbacks related to the adapter's data changing.

void restoreState(Parcelable state, ClassLoader loader);
//Restore any instance state associated with this adapter and its pages that was previously saved by saveState();.

Parcelable saveState();
//Save any instance state associated with this adapter and its pages that should be restored if the current UI state needs to be reconstructed.

void setPrimaryItem(View container, int position, Object object);
//This method was deprecated in API level . Use setPrimaryItem(ViewGroup, int, Object);

void setPrimaryItem(ViewGroup container, int position, Object object);
//Called to inform the adapter of which item is currently considered to be the "primary", that is the one show to the user as the current page.

void startUpdate(View container);
//This method was deprecated in API level . Use startUpdate(ViewGroup);

void startUpdate(ViewGroup container);
//Called when a change in the shown pages is going to start being made.

void unregisterDataSetObserver(DataSetObserver observer);
//Unregister an observer from callbacks related to the adapter's data changing.
}

class PagerTabStrip {

//boolean getDrawFullUnderline();
//Return whether or not this tab strip will draw a full-width underline.

//int getTabIndicatorColor();

//boolean onTouchEvent(MotionEvent ev);
//Implement this method to handle touch screen motion events.

//void setBackgroundColor(int color);
//Sets the background color for this view.

//void setBackgroundDrawable(Drawable d);
//This method was deprecated in API level . use setBackground(Drawable); instead

//void setBackgroundResource(int resId);
//Set the background to a given resource.

//void setDrawFullUnderline(boolean drawFull);
//Set whether this tab strip should draw a full-width underline in the current tab indicator color.

void setPadding(int left, int top, int right, int bottom);
//Sets the padding.

void setTabIndicatorColor(int color);
//Set the color of the tab indicator bar.

//void setTabIndicatorColorResource(int resId);
//Set the color of the tab indicator bar from a color resource.

void setTextSpacing(int textSpacing);
//Set the required spacing between title segments.

//Protected Methods
//void onDraw(Canvas canvas);
//Implement this to do your drawing.

}

class PagerTitleStrip {
//CSH: Methods in spreadsheet not found in class or parents:
// access$100
// setSingleLineAllCaps
// updateAdapter
// updateText
// updateTextPositions


int getTextSpacing();

void requestLayout();
//Call this when something has changed which has invalidated the layout of this view.

void setGravity(int gravity);
//Set the Gravity used to position text within the title strip.

void setNonPrimaryAlpha(float alpha);
//Set the alpha value used for non-primary page titles.

void setTextColor(int color);
//Set the color value used as the base color for all displayed page titles.

void setTextSize(int unit, float size);
//Set the default text size to a given unit and value.

void setTextSpacing(int spacingPixels);
//Set the required spacing between title segments.

//Protected Methods
void onAttachedToWindow();
//This is called when the view is attached to a window.

void onDetachedFromWindow();
//This is called when the view is detached from a window.

void onLayout(boolean changed, int l, int t, int r, int b);
//Called from layout when this view should assign a size and position to each of its children.

void onMeasure(int widthMeasureSpec, int heightMeasureSpec);
//Measure the view and its content to determine the measured width and the measured height.

}

class ViewPager {
// CSH: Methods in spreadsheet not found in ViewPager or parent classes
// populate
// setCurrentItemInternal
// access$300
// access$200
// setScrollState
// infoForChild
// setScrollingCacheEnabled
// infoForPosition
// completeScroll
// scrollToItem
// getChildRectInPagerCoordinates
// addNewItem
// performDrag
// pageScrolled
// determineTargetPage
// smoothScrollTo
// setOnAdapterChangeListener
// setInternalPageChangeListener
// recomputeScrollPosition
// pageRight
// pageLeft
// initViewPager
// infoForCurrentScrollPosition
// infoForAnyChild
// distanceInfluenceForSnapDuration
// dataSetChanged
// calculatePageOffsets
// setChildrenDrawingOrderEnabledCompat
// removeNonDecorViews
// onSecondaryPointerUp
// endDrag
// enableLayers
// access$400
// access$000
//isGutterDrag
 
void addFocusables(ArrayList<View> views, int direction, int focusableMode);
//We only want the current page that is being shown to be focusable.

void addTouchables(ArrayList<View> views);
//We only want the current page that is being shown to be touchable.

void addView(@Sink(DISPLAY) View child, int index, ViewGroup.LayoutParams params);
//Adds a child view with the specified layout parameters.

boolean arrowScroll(int direction);

boolean beginFakeDrag();
//Start a fake drag of the pager.

void computeScroll();
//Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.

boolean dispatchKeyEvent(@Source(USER_INPUT) KeyEvent event);
//Dispatch a key event to the next view on the focus path.

boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event);
//Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.

void draw(Canvas canvas);
//Manually render this view (and all of its children); to the given Canvas.

void endFakeDrag();
//End a fake drag of the pager.

boolean executeKeyEvent(@Source(USER_INPUT) KeyEvent event);
//You can call this function yourself to have the scroll view perform scrolling from a key event, just as if the event had been dispatched to it by the view hierarchy.

void fakeDragBy(float xOffset);
//Fake drag by an offset in pixels.

ViewGroup.LayoutParams generateLayoutParams(AttributeSet attrs);
//Returns a new set of layout parameters based on the supplied attributes set.

PagerAdapter getAdapter();
//Retrieve the current adapter supplying pages.

int getCurrentItem();

int getOffscreenPageLimit();
//Returns the number of pages that will be retained to either side of the current page in the view hierarchy in an idle state.

int getPageMargin();
//Return the margin between pages.

boolean isFakeDragging();
//Returns true if a fake drag is in progress.

boolean onInterceptTouchEvent(MotionEvent ev);
//Implement this method to intercept all touch screen motion events.

void onRestoreInstanceState(Parcelable state);
//Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState();.

Parcelable onSaveInstanceState();
//Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.

boolean onTouchEvent(MotionEvent ev);
//Implement this method to handle touch screen motion events.

void removeView(View view);
//Note: do not invoke this method from draw(android.graphics.Canvas);, onDraw(android.graphics.Canvas);, dispatchDraw(android.graphics.Canvas); or any related method.

void setAdapter(PagerAdapter adapter);
//Set a PagerAdapter that will supply views for this pager as needed.

void setCurrentItem(int item, boolean smoothScroll);
//Set the currently selected page.

void setCurrentItem(int item);
//Set the currently selected page.

void setOffscreenPageLimit(int limit);
//Set the number of pages that should be retained to either side of the current page in the view hierarchy in an idle state.

void setOnPageChangeListener(ViewPager.OnPageChangeListener listener);
//Set a listener that will be invoked whenever the page changes or is incrementally scrolled.

void setPageMargin(int marginPixels);
//Set the margin between pages.

void setPageMarginDrawable(int resId);
//Set a drawable that will be used to fill the margin between pages.

void setPageMarginDrawable(Drawable d);
//Set a drawable that will be used to fill the margin between pages.

void setPageTransformer(boolean reverseDrawingOrder, ViewPager.PageTransformer transformer);
//Set a ViewPager.PageTransformer that will be called for each attached page whenever the scroll position is changed.

//Protected Methods
boolean canScroll(View v, boolean checkV, int dx, int x, int y);
//Tests scrollability within child views of v given a delta of dx.

boolean checkLayoutParams(ViewGroup.LayoutParams p);

void drawableStateChanged();
//This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.

ViewGroup.LayoutParams generateDefaultLayoutParams();
//Returns a set of default layout parameters.

ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p);
//Returns a safe set of layout parameters based on the supplied layout params.

int getChildDrawingOrder(int childCount, int i);
//Returns the index of the child to draw for this iteration.

void onAttachedToWindow();
//This is called when the view is attached to a window.

void onDetachedFromWindow();
//This is called when the view is detached from a window.

void onDraw(Canvas canvas);
//Implement this to do your drawing.

void onLayout(boolean changed, int l, int t, int r, int b);
//Called from layout when this view should assign a size and position to each of its children.

void onMeasure(int widthMeasureSpec, int heightMeasureSpec);
//Measure the view and its content to determine the measured width and the measured height.

void onPageScrolled(int position, float offset, int offsetPixels);
//This method will be invoked when the current page is scrolled, either as part of a programmatically initiated smooth scroll or a user initiated touch scroll.

boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect);
//We only want the current page that is being shown to be focusable.

void onSizeChanged(int w, int h, int oldw, int oldh);
//This is called during layout when the size of this view has changed.

boolean verifyDrawable(Drawable who);
//If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.
}

package android.support.v4.view.accessibility;

class AccessibilityNodeInfoCompat {
// CSH: Present in spreadsheet but not in class or parents:
// wrapNonNullInstance
    
void addAction(int action);
//Adds an action that can be performed on the node.

//void addChild(View child);
//Adds a child.

//void addChild(View root, int virtualDescendantId);
//Adds a virtual child which is a descendant of the given root.

//boolean equals(Object obj);
//Compares this instance with the specified object and indicates if they are equal.

//List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText(String text);
//Finds AccessibilityNodeInfos by text.

//AccessibilityNodeInfoCompat findFocus(int focus);
//Find the view that has the specified focus type.

//AccessibilityNodeInfoCompat focusSearch(int direction);
//Searches for the nearest view in the specified direction that can take input focus.

//int getActions();
//Gets the actions that can be performed on the node.

//void getBoundsInParent(Rect outBounds);
//Gets the node bounds in parent coordinates.

//void getBoundsInScreen(Rect outBounds);
//Gets the node bounds in screen coordinates.

//AccessibilityNodeInfoCompat getChild(int index);
//Get the child at given index.

//int getChildCount();
//Gets the number of children.

//CharSequence getClassName();
//Gets the class this node comes from.

//CharSequence getContentDescription();
//Gets the content description of this node.

Object getInfo();

//int getMovementGranularities();
//Gets the movement granularities for traversing the text of this node.

//CharSequence getPackageName();
//Gets the package this node comes from.

//AccessibilityNodeInfoCompat getParent();
//Gets the parent.

//CharSequence getText();
//Gets the text of this node.

//int getWindowId();
//Gets the id of the window from which the info comes from.

//int hashCode();
//Returns an integer hash code for this object.

//boolean isAccessibilityFocused();
//Gets whether this node is accessibility focused.

//boolean isCheckable();
//Gets whether this node is checkable.

//boolean isChecked();
//Gets whether this node is checked.

//boolean isClickable();
//Gets whether this node is clickable.

//boolean isEnabled();
//Gets whether this node is enabled.

//boolean isFocusable();
//Gets whether this node is focusable.

//boolean isFocused();
//Gets whether this node is focused.

//boolean isLongClickable();
//Gets whether this node is long clickable.

//boolean isPassword();
//Gets whether this node is a password.

//boolean isScrollable();
//Gets if the node is scrollable.

//boolean isSelected();
//Gets whether this node is selected.

//boolean isVisibleToUser();
//Sets whether this node is visible to the user.

//static AccessibilityNodeInfoCompat obtain(View root, int virtualDescendantId);
//Returns a cached instance if such is available otherwise a new one and sets the source.

//static AccessibilityNodeInfoCompat obtain(AccessibilityNodeInfoCompat info);
//Returns a cached instance if such is available or a new one is create.

//static AccessibilityNodeInfoCompat obtain();
//Returns a cached instance if such is available otherwise a new one.

//static AccessibilityNodeInfoCompat obtain(View source);
//Returns a cached instance if such is available otherwise a new one and sets the source.

//boolean performAction(int action);
//Performs an action on the node.

//boolean performAction(int action, Bundle arguments);
//Performs an action on the node.

//void recycle();
//Return an instance back to be reused.

//void setAccessibilityFocused(boolean focused);
//Sets whether this node is accessibility focused.

//void setBoundsInParent(Rect bounds);
//Sets the node bounds in parent coordinates.

//void setBoundsInScreen(Rect bounds);
//Sets the node bounds in screen coordinates.

//void setCheckable(boolean checkable);
//Sets whether this node is checkable.

//void setChecked(boolean checked);
//Sets whether this node is checked.

void setClassName(CharSequence className);
//Sets the class this node comes from.

//void setClickable(boolean clickable);
//Sets whether this node is clickable.

//void setContentDescription(CharSequence contentDescription);
//Sets the content description of this node.

//void setEnabled(boolean enabled);
//Sets whether this node is enabled.

//void setFocusable(boolean focusable);
//Sets whether this node is focusable.

//void setFocused(boolean focused);
//Sets whether this node is focused.

//void setLongClickable(boolean longClickable);
//Sets whether this node is long clickable.

//void setMovementGranularities(int granularities);
//Sets the movement granularities for traversing the text of this node.

//void setPackageName(CharSequence packageName);
//Sets the package this node comes from.

//void setParent(View parent);
//Sets the parent.

//void setParent(View root, int virtualDescendantId);
//Sets the parent to be a virtual descendant of the given root.

//void setPassword(boolean password);
//Sets whether this node is a password.

//void setScrollable(boolean scrollable);
//Sets if the node is scrollable.

//void setSelected(boolean selected);
//Sets whether this node is selected.

//void setSource(View root, int virtualDescendantId);
//Sets the source to be a virtual descendant of the given root.

//void setSource(View source);
//Sets the source.

//void setText(CharSequence text);
//Sets the text of this node.

//void setVisibleToUser(boolean visibleToUser);
//Sets whether this node is visible to the user.


    
}

package android.support.v4.widget;
class EdgeEffectCompat {

boolean draw(Canvas canvas);
//Draw into the provided canvas.

void finish();
//Immediately finish the current animation.

boolean isFinished();
//Reports if this EdgeEffectCompat's animation is finished.

//boolean onAbsorb(int velocity);
//Call when the effect absorbs an impact at the given velocity.

boolean onPull(float deltaDistance);
//A view should call this when content is pulled away from an edge by the user.

//boolean onRelease();
//Call when the object is released after being pulled.

void setSize(int width, int height);
//Set the size of this edge effect in pixels.

}


