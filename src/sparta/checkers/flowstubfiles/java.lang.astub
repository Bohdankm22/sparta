
package java.lang;

@PolyFlowReceiver
class Integer extends Number implements Comparable<Integer> {
//Added by smillst
    final @Source(FlowPermission.LITERAL) int MIN_VALUE;
    final @Source(FlowPermission.LITERAL) int MAX_VALUE;
    final @Source(FlowPermission.LITERAL) int SIZE;
    @PolyFlow
    static String toString(int arg0, int arg1);
    @PolyFlow
    static String toHexString(int arg0);
    @PolyFlow
    static String toOctalString(int arg0);
    @PolyFlow
    static String toBinaryString(int arg0);
    @PolyFlow
    static String toString(int arg0);
    @PolyFlow
    static int parseInt(String arg0, int arg1) throws NumberFormatException;
    @PolyFlow
    static int parseInt(String arg0) throws NumberFormatException;
    @PolyFlow
    static Integer valueOf(String arg0, int arg1) throws NumberFormatException;
    @PolyFlow
    static Integer valueOf(String arg0) throws NumberFormatException;
    @PolyFlow
    static Integer valueOf(int arg0);
    @PolyFlow
    Integer(int arg0);
    @PolyFlow
    Integer(String arg0) throws NumberFormatException;
    byte byteValue();
    short shortValue();
    int intValue();
    long longValue();
    float floatValue();
    double doubleValue();
    String toString();
    int hashCode();
    boolean equals(Object arg0);
    @PolyFlow
    static Integer getInteger(String arg0);
    @PolyFlow
    static Integer getInteger(String arg0, int arg1);
    @PolyFlow
    static Integer getInteger(String arg0, Integer arg1);
    @PolyFlow
    static Integer decode(String arg0) throws NumberFormatException;
    int compareTo(Integer arg0);
    @PolyFlow
    static int compare(int arg0, int arg1);
    @PolyFlow
    static int highestOneBit(int arg0);
    @PolyFlow
    static int lowestOneBit(int arg0);
    @PolyFlow
    static int numberOfLeadingZeros(int arg0);
    @PolyFlow
    static int numberOfTrailingZeros(int arg0);
    @PolyFlow
    static int bitCount(int arg0);
    @PolyFlow
    static int rotateLeft(int arg0, int arg1);
    @PolyFlow
    static int rotateRight(int arg0, int arg1);
    @PolyFlow
    static int reverse(int arg0);
    @PolyFlow
    static int signum(int arg0);
    @PolyFlow
    static int reverseBytes(int arg0);
}


class Long {
//Added by Philip
    static @PolyFlow long parseLong(String string);
}


class Object {
//Added by smillst
    Object();
    Class<?> getClass();
    @PolyFlowReceiver
    int hashCode();
    @PolyFlowReceiver
    boolean equals(Object arg0);
    @PolyFlowReceiver
    protected Object clone() throws CloneNotSupportedException;
    @PolyFlowReceiver
    String toString();
    void notify();
    void notifyAll();
    void wait(long arg0) throws InterruptedException;
    void wait(long arg0, int arg1) throws InterruptedException;
    void wait() throws InterruptedException;
    protected void finalize() throws Throwable;
}

@PolyFlowReceiver
class StringBuilder extends AbstractStringBuilder implements Serializable, CharSequence {
//Added by smillst
    @PolyFlow
    StringBuilder();
    @PolyFlow
    StringBuilder(int arg0);
    @PolyFlow
    StringBuilder(String arg0);
    @PolyFlow
    StringBuilder(CharSequence arg0);
    
    StringBuilder append(Object arg0);
    StringBuilder append(String arg0);
    StringBuilder append(StringBuffer arg0);
    StringBuilder append(CharSequence arg0);
    StringBuilder append(CharSequence arg0, int arg1, int arg2);
    StringBuilder append(char[] arg0);
    StringBuilder append(char[] arg0, int arg1, int arg2);
    StringBuilder append(boolean arg0);
    StringBuilder append(char arg0);
    StringBuilder append(int arg0);
    StringBuilder append(long arg0);
    StringBuilder append(float arg0);
    StringBuilder append(double arg0);
    StringBuilder appendCodePoint(int arg0);
    StringBuilder delete(int arg0, int arg1);
    StringBuilder deleteCharAt(int arg0);
    StringBuilder replace(int arg0, int arg1, String arg2);
    StringBuilder insert(int arg0, char[] arg1, int arg2, int arg3);
    StringBuilder insert(int arg0, Object arg1);
    StringBuilder insert(int arg0, String arg1);
    StringBuilder insert(int arg0, char[] arg1);
    StringBuilder insert(int arg0, CharSequence arg1);
    StringBuilder insert(int arg0, CharSequence arg1, int arg2, int arg3);
    StringBuilder insert(int arg0, boolean arg1);
    StringBuilder insert(int arg0, char arg1);
    StringBuilder insert(int arg0, int arg1);
    StringBuilder insert(int arg0, long arg1);
    StringBuilder insert(int arg0, float arg1);
    StringBuilder insert(int arg0, double arg1);
    int indexOf(String arg0);
    int indexOf(String arg0, int arg1);
    int lastIndexOf(String arg0);
    int lastIndexOf(String arg0, int arg1);
    StringBuilder reverse();
    String toString();
}


/*[equals, length, valueOf, trim, substring, charAt, indexOf, contains, replace, startsWith, format, split, 
   toUpperCase, <init>, hashCode, toCharArray, getChars, replaceAll, getBytes, endsWith, equalsIgnoreCase, 
   lastIndexOf, toLowerCase, compareTo, toString, intern, isEmpty, contentEquals, replaceFirst, concat, compareToIgnoreCase, 
   matches, copyValueOf]*/
   
   class String implements Serializable, Comparable<String>, CharSequence {
   //Added by SOM
   //TODO: Should indexs into the char[] be PolyFlow or just LITERAL?
    final Comparator<String> CASE_INSENSITIVE_ORDER;
    @PolyFlow
    String();
    @PolyFlow
    String(String arg0);
    @PolyFlow
    String(char[] arg0);
    @PolyFlow
    String(char[] arg0, int arg1, int arg2);
    @PolyFlow
    String(int[] arg0, int arg1, int arg2);
    @PolyFlow
    String(byte[] arg0, int arg1, int arg2, int arg3);
    @PolyFlow
    String(byte[] arg0, int arg1);
    @PolyFlow
    String(byte[] arg0, int arg1, int arg2, String arg3) throws UnsupportedEncodingException;
    @PolyFlow
    String(byte[] arg0, int arg1, int arg2, Charset arg3);
    @PolyFlow
    String(byte[] arg0, String arg1) throws UnsupportedEncodingException;
    @PolyFlow
    String(byte[] arg0, Charset arg1);
    @PolyFlow
    String(byte[] arg0, int arg1, int arg2);
    @PolyFlow
    String(byte[] arg0);
    @PolyFlow
    String(StringBuffer arg0);
    @PolyFlow
    String(StringBuilder arg0);
    
    int length();
    boolean isEmpty();
    @PolyFlowReceiver
    char charAt(int arg0);
    @PolyFlowReceiver
    int codePointAt(int arg0);
    @PolyFlowReceiver
    int codePointBefore(int arg0);
    @PolyFlowReceiver
    int codePointCount(int arg0, int arg1);
    @PolyFlowReceiver
    int offsetByCodePoints(int arg0, int arg1);
    @PolyFlowReceiver
    void getChars(int arg0, int arg1, char[] arg2, int arg3);
    @PolyFlowReceiver
    void getBytes(int arg0, int arg1, byte[] arg2, int arg3);
    @PolyFlowReceiver
    byte[] getBytes(String arg0) throws UnsupportedEncodingException;
    @PolyFlowReceiver
    byte[] getBytes(Charset arg0);
    @PolyFlowReceiver
    byte[] getBytes();
    @PolyFlowReceiver
    boolean equals(Object arg0);
    @PolyFlowReceiver
    boolean contentEquals(StringBuffer arg0);
    @PolyFlowReceiver
    boolean contentEquals(CharSequence arg0);
    @PolyFlowReceiver
    boolean equalsIgnoreCase(String arg0);
    @PolyFlowReceiver
    int compareTo(String arg0);
    @PolyFlowReceiver
    int compareToIgnoreCase(String arg0);
    @PolyFlowReceiver
    boolean regionMatches(int arg0, String arg1, int arg2, int arg3);
    @PolyFlowReceiver
    boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4);
    @PolyFlowReceiver
    boolean startsWith(String arg0, int arg1);
    @PolyFlowReceiver
    boolean startsWith(String arg0);
    @PolyFlowReceiver
    boolean endsWith(String arg0);
    @PolyFlowReceiver
    int hashCode();
    @PolyFlowReceiver
    int indexOf(int arg0);
    @PolyFlowReceiver
    int indexOf(int arg0, int arg1);
    @PolyFlowReceiver
    int lastIndexOf(int arg0);
    @PolyFlowReceiver
    int lastIndexOf(int arg0, int arg1);
    @PolyFlowReceiver
    int indexOf(String arg0);
    @PolyFlowReceiver
    int indexOf(String arg0, int arg1);
    @PolyFlowReceiver
    int lastIndexOf(String arg0);
    @PolyFlowReceiver
    int lastIndexOf(String arg0, int arg1);
    @PolyFlowReceiver
    String substring(int arg0);
    @PolyFlowReceiver
    String substring(int arg0, int arg1);
    @PolyFlowReceiver
    CharSequence subSequence(int arg0, int arg1);
    @PolyFlowReceiver
    String concat(String arg0);
    @PolyFlowReceiver
    String replace(char arg0, char arg1);
    @PolyFlowReceiver
    boolean matches(String arg0);
    @PolyFlowReceiver
    boolean contains(CharSequence arg0);
    @PolyFlowReceiver
    String replaceFirst(String arg0, String arg1);
    @PolyFlowReceiver
    String replaceAll(String arg0, String arg1);
    @PolyFlowReceiver
    String replace(CharSequence arg0, CharSequence arg1);
    @PolyFlowReceiver
    String[] split(String arg0, int arg1);
    @PolyFlowReceiver
    String[] split(String arg0);
    String toLowerCase(Locale arg0);
    String toLowerCase();
    String toUpperCase(Locale arg0);
    String toUpperCase();
    String trim();
    @PolyFlowReceiver
    String toString();
    @PolyFlowReceiver
    char[] toCharArray();
    @PolyFlow
    static String format(String arg0, Object[] arg1);
    @PolyFlow
    static String format(Locale arg0, String arg1, Object[] arg2);
    @PolyFlow
    static String valueOf(Object arg0);
    @PolyFlow
    static String valueOf(char[] arg0);
    @PolyFlow
    static String valueOf(char[] arg0, int arg1, int arg2);
    @PolyFlow
    static String copyValueOf(char[] arg0, int arg1, int arg2);
    @PolyFlow
    static String copyValueOf(char[] arg0);
    @PolyFlow
    static String valueOf(boolean arg0);
    @PolyFlow
    static String valueOf(char arg0);
    @PolyFlow
    static String valueOf(int arg0);
    @PolyFlow
    static String valueOf(long arg0);
    @PolyFlow
    static String valueOf(float arg0);
    @PolyFlow
    static String valueOf(double arg0);
    @PolyFlowReceiver
    String intern();
}

   


class Math {
//Added by smillst
    @PolyFlow
    static double abs(double a);
    @PolyFlow
    static float abs(float a);
    @PolyFlow
    static int abs(int a);
    @PolyFlow
    static long abs(long a);
    @PolyFlow
    static double acos(double a);
    @PolyFlow
    static double asin(double a);
    @PolyFlow
    static double atan(double a);
    @PolyFlow
    static double atan2(double y, double x);
    @PolyFlow
    static double cbrt(double a);
    @PolyFlow
    static double ceil(double a);
    @PolyFlow
    static double copySign(double magnitude, double sign);
    @PolyFlow
    static float copySign(float magnitude, float sign);
    @PolyFlow
    static double cos(double a);
    @PolyFlow
    static double cosh(double x);
    @PolyFlow
    static double exp(double a);
    @PolyFlow
    static double expm1(double x);
    @PolyFlow
    static double floor(double a);
    @PolyFlow
    static int getExponent(double d);
    @PolyFlow
    static int getExponent(float f);
    @PolyFlow
    static double hypot(double x, double y);
    @PolyFlow
    static double IEEEremainder(double f1, double f2);
    @PolyFlow
    static double log(double a);
    @PolyFlow
    static double log10(double a);
    @PolyFlow
    static double log1p(double x);
    @PolyFlow
    static double max(double a, double b);
    @PolyFlow
    static float max(float a, float b);
    @PolyFlow
    static int max(int a, int b);
    @PolyFlow
    static long max(long a, long b);
    @PolyFlow
    static double min(double a, double b);
    @PolyFlow
    static float min(float a, float b);
    @PolyFlow
    static int min(int a, int b);
    @PolyFlow
    static long min(long a, long b);
    @PolyFlow
    static double nextAfter(double start, double direction);
    @PolyFlow
    static float nextAfter(float start, double direction);
    @PolyFlow
    static double nextUp(double d);
    @PolyFlow
    static float nextUp(float f);
    @PolyFlow
    static double pow(double a, double b);
    @PolyFlow
    static double random();
    @PolyFlow
    static double rint(double a);
    @PolyFlow
    static long round(double a);
    @PolyFlow
    static int round(float a);
    @PolyFlow
    static double scalb(double d, int scaleFactor);
    @PolyFlow
    static float scalb(float f, int scaleFactor);
    @PolyFlow
    static double signum(double d);
    @PolyFlow
    static float signum(float f);
    @PolyFlow
    static double sin(double a);
    @PolyFlow
    static double sinh(double x);
    @PolyFlow
    static double sqrt(double a);
    @PolyFlow
    static double tan(double a);
    @PolyFlow
    static double tanh(double x);
    @PolyFlow
    static double toDegrees(double angrad);
    @PolyFlow
    static double toRadians(double angdeg);
    @PolyFlow
    static double ulp(double d);
    @PolyFlow
    static float ulp(float f);

}
