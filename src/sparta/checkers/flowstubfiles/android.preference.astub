package android.preference;

class DialogPreference{
void setDialogTitle(CharSequence dialogTitle);
//Sets the title of the dialog. This will be shown on subsequent dialogs.

protected void onDialogClosed(boolean positiveResult);
//Called when the dialog is dismissed and should be used to save data to the SharedPreferences

protected void showDialog(Bundle state);
//Shows the dialog associated with this Preference.
}

class EditTextPreference {

EditTextPreference(Context context);
//New EditTextPreference

EditTextPreference(Context context, AttributeSet attrs);
//New EditTextPreference

EditTextPreference(Context context, AttributeSet attrs, int defStyle);
//New EditTextPreference

EditText getEditText();
//Returns the EditText widget that will be shown in the dialog.

@Source(SHARED_PREFERENCES) String getText();
//Gets the text from the SharedPreferences.

void setText(@Sink(SHARED_PREFERENCES) String text);
//Saves the text to the SharedPreferences.

boolean shouldDisableDependents();
//Checks whether this preference's dependents should currently be disabled.

//Protected Methods
void onAddEditTextToDialogView(View dialogView, EditText editText);
//Adds the EditText widget of this preference to the dialog's view.

void onBindDialogView(View view);
//Binds views in the content View of the dialog to data.

void onDialogClosed(boolean positiveResult);
//Called when the dialog is dismissed and should be used to save data to the SharedPreferences.

@Source(SHARED_PREFERENCES) Object onGetDefaultValue(TypedArray a, int index);
//Called when a Preference is being inflated and the default value attribute needs to be read.

void onRestoreInstanceState(Parcelable state);
//Hook allowing a Preference to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState();.

Parcelable onSaveInstanceState();
//Hook allowing a Preference to generate a representation of its internal state that can later be used to create a new instance with that same state.

void onSetInitialValue(@Sink(SHARED_PREFERENCES) boolean restoreValue, @Sink(SHARED_PREFERENCES) Object defaultValue);
//Implement this to set the initial value of the Preference.



}

class ListPreference{
        void setSummary(@Sink(SHARED_PREFERENCES) CharSequence summary);
        @Source(SHARED_PREFERENCES) String getValue();
        void setEntryValues(@Sink(SHARED_PREFERENCES) CharSequence[] entryValues);
        void setValue(@Sink(SHARED_PREFERENCES) String value);
        void setEntries(@Sink(SHARED_PREFERENCES) CharSequence[] entries);
}

class Preference {
    
    
@Source(SHARED_PREFERENCES) int compareTo(@Sink(SHARED_PREFERENCES) Preference another);
//Compares Preference objects based on order (if set);, otherwise alphabetically on the titles.

Context getContext();
//Returns the Context of this Preference.

@Source(SHARED_PREFERENCES) String getDependency();
//Returns the key of the dependency on this Preference.

@Source(SHARED_PREFERENCES) SharedPreferences.Editor getEditor();
//Returns an SharedPreferences.Editor where this Preference can save its value(s);.

Bundle getExtras();
//Return the extras Bundle object associated with this preference, creating a new Bundle if there currently isn't one.

String getFragment();
//Return the fragment class name associated with this Preference.

Drawable getIcon();
//Returns the icon of this Preference.

Intent getIntent();
//Return the Intent associated with this Preference.

@Source(SHARED_PREFERENCES) String getKey();
//Gets the key for this Preference, which is also the key used for storing values into SharedPreferences.

int getLayoutResource();
//Gets the layout resource that will be shown as the View for this Preference.

Preference.OnPreferenceChangeListener getOnPreferenceChangeListener();
//Returns the callback to be invoked when this Preference is changed by the user (but before the internal state has been updated);.

Preference.OnPreferenceClickListener getOnPreferenceClickListener();
//Returns the callback to be invoked when this Preference is clicked.

@Source(SHARED_PREFERENCES) int getOrder();
//Gets the order of this Preference with respect to other Preference objects on the same level.

@Source(SHARED_PREFERENCES) PreferenceManager getPreferenceManager();
//Gets the PreferenceManager that manages this Preference object's tree.

@Source(SHARED_PREFERENCES) SharedPreferences getSharedPreferences();
//Returns the SharedPreferences where this Preference can read its value(s);.

boolean getShouldDisableView();
//Checks whether this Preference should disable its view when it's action is disabled.

@Source(SHARED_PREFERENCES) CharSequence getSummary();
//Returns the summary of this Preference.

@Source(SHARED_PREFERENCES) CharSequence getTitle();
//Returns the title of this Preference.

int getTitleRes();
//Returns the title resource ID of this Preference.

View getView(View convertView, ViewGroup parent);
//Gets the View that will be shown in the PreferenceActivity.

int getWidgetLayoutResource();
//Gets the layout resource for the controllable widget portion of this Preference.

@Source(SHARED_PREFERENCES) boolean hasKey();
//Checks whether this Preference has a valid key.

boolean isEnabled();
//Checks whether this Preference should be enabled in the list.

@Source(SHARED_PREFERENCES) boolean isPersistent();
//Checks whether this Preference is persistent.

boolean isSelectable();
//Checks whether this Preference should be selectable in the list.

void notifyDependencyChange(boolean disableDependents);
//Notifies any listening dependents of a change that affects the dependency.

void onDependencyChanged(Preference dependency, boolean disableDependent);
//Called when the dependency changes.

Bundle peekExtras();
//Return the extras Bundle object associated with this preference, returning null if there is not currently one.

void restoreHierarchyState(Bundle container);
//Restore this Preference hierarchy's previously saved state from the given container.

void saveHierarchyState(Bundle container);
//Store this Preference hierarchy's frozen state into the given container.

void setDefaultValue(Object defaultValue);
//Sets the default value for this Preference, which will be set either if persistence is off or persistence is on and the preference is not found in the persistent storage.

void setDependency(@Sink(SHARED_PREFERENCES) String dependencyKey);
//Sets the key of a Preference that this Preference will depend on.

void setEnabled(boolean enabled);
//Sets whether this Preference is enabled.

void setFragment(String fragment);
//Sets the class name of a fragment to be shown when this Preference is clicked.

void setIcon(@Sink(DISPLAY) Drawable icon);
//Sets the icon for this Preference with a Drawable.

void setIcon(int iconResId);
//Sets the icon for this Preference with a resource ID.

void setIntent(Intent intent);
//Sets an Intent to be used for startActivity(Intent); when this Preference is clicked.

void setKey(@Sink(SHARED_PREFERENCES) String key);
//Sets the key for this Preference, which is used as a key to the SharedPreferences.

void setLayoutResource(int layoutResId);
//Sets the layout resource that is inflated as the View to be shown for this Preference.

void setOnPreferenceChangeListener(Preference.OnPreferenceChangeListener onPreferenceChangeListener);
//Sets the callback to be invoked when this Preference is changed by the user (but before the internal state has been updated);.

void setOnPreferenceClickListener(Preference.OnPreferenceClickListener onPreferenceClickListener);
//Sets the callback to be invoked when this Preference is clicked.

void setOrder(int order);
//Sets the order of this Preference with respect to other Preference objects on the same level.

void setPersistent(boolean persistent);
//Sets whether this Preference is persistent.

void setSelectable(boolean selectable);
//Sets whether this Preference is selectable.

void setShouldDisableView(boolean shouldDisableView);
//Sets whether this Preference should disable its view when it gets disabled.

void setSummary(int summaryResId);
//Sets the summary for this Preference with a resource ID.

void setSummary(@Sink(SHARED_PREFERENCES) CharSequence summary);
//Sets the summary for this Preference with a CharSequence.

void setTitle(int titleResId);
//Sets the title for this Preference with a resource ID.

void setTitle(@Sink(SHARED_PREFERENCES) CharSequence title);
//Sets the title for this Preference with a CharSequence.

void setWidgetLayoutResource(int widgetLayoutResId);
//Sets The layout for the controllable widget portion of this Preference.

boolean shouldCommit();
//Returns whether the Preference should commit its saved value(s); in getEditor();.

boolean shouldDisableDependents();
//Checks whether this preference's dependents should currently be disabled.

String toString();
//Returns a string containing a concise, human-readable description of this object.

//Protected Methods
boolean callChangeListener(Object newValue);
//Call this method after the user changes the preference, but before the internal state is set.

Preference findPreferenceInHierarchy(String key);
//Finds a Preference in this hierarchy (the whole thing, even above/below your PreferenceScreen screen break); with the given key.

boolean getPersistedBoolean(boolean defaultReturnValue);
//Attempts to get a persisted boolean from the SharedPreferences.

float getPersistedFloat(float defaultReturnValue);
//Attempts to get a persisted float from the SharedPreferences.

int getPersistedInt(int defaultReturnValue);
//Attempts to get a persisted int from the SharedPreferences.

long getPersistedLong(long defaultReturnValue);
//Attempts to get a persisted long from the SharedPreferences.

String getPersistedString(String defaultReturnValue);
//Attempts to get a persisted String from the SharedPreferences.

void notifyChanged();
//Should be called when the data of this Preference has changed.

void notifyHierarchyChanged();
//Should be called when a Preference has been added/removed from this group, or the ordering should be re-evaluated.

void onAttachedToActivity();
//Called when the Preference hierarchy has been attached to the PreferenceActivity.

void onAttachedToHierarchy(PreferenceManager preferenceManager);
//Called when this Preference has been attached to a Preference hierarchy.

void onBindView(View view);
//Binds the created View to the data for this Preference.

void onClick();
//Processes a click on the preference.

View onCreateView(ViewGroup parent);
//Creates the View to be shown for this Preference in the PreferenceActivity.

Object onGetDefaultValue(TypedArray a, int index);
//Called when a Preference is being inflated and the default value attribute needs to be read.

void onPrepareForRemoval();
//Called when this Preference is being removed from the hierarchy.

void onRestoreInstanceState(Parcelable state);
//Hook allowing a Preference to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState();.

Parcelable onSaveInstanceState();
//Hook allowing a Preference to generate a representation of its internal state that can later be used to create a new instance with that same state.

void onSetInitialValue(@Sink(SHARED_PREFERENCES) boolean restorePersistedValue, @Sink(SHARED_PREFERENCES) Object defaultValue);
//Implement this to set the initial value of the Preference.

boolean persistBoolean(@Sink(SHARED_PREFERENCES) boolean value);
//Attempts to persist a boolean to the SharedPreferences.

boolean persistFloat(@Sink(SHARED_PREFERENCES) float value);
//Attempts to persist a float to the SharedPreferences.

boolean persistInt(@Sink(SHARED_PREFERENCES) int value);
//Attempts to persist an int to the SharedPreferences.

boolean persistLong(@Sink(SHARED_PREFERENCES) long value);
//Attempts to persist a long to the SharedPreferences.

boolean persistString(@Sink(SHARED_PREFERENCES) String value);
//Attempts to persist a String to the SharedPreferences.

boolean shouldPersist();
//Checks whether, at the given time this method is called, this Preference should store/restore its value(s); into the SharedPreferences.



}
class Preference$OnPreferenceChangeListener{
        boolean onPreferenceChange(Preference arg0, Object arg1);
}

class Preference$OnPreferenceClickListener{
            boolean onPreferenceClick(Preference arg0);
}

class PreferenceActivity {
    
PreferenceActivity();
//New PreferenceActivity

void addPreferencesFromIntent(Intent intent);
//This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.

void addPreferencesFromResource(int preferencesResId);
//This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.

Preference findPreference(CharSequence key);
//This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.

void finishPreferencePanel(Fragment caller, int resultCode, Intent resultData);
//Called by a preference panel fragment to finish itself.

PreferenceManager getPreferenceManager();
//This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.

PreferenceScreen getPreferenceScreen();
//This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.

boolean hasHeaders();
//Returns true if this activity is currently showing the header list.

void invalidateHeaders();
//Call when you need to change the headers being displayed.

boolean isMultiPane();
//Returns true if this activity is showing multiple panes -- the headers and a preference fragment.

void loadHeadersFromResource(int resid, List<PreferenceActivity.Header> target);
//Parse the given XML file as a header description, adding each parsed Header into the target list.

void onBuildHeaders(List<PreferenceActivity.Header> target);
//Called when the activity needs its list of headers build.

Intent onBuildStartFragmentIntent(String fragmentName, Bundle args, int titleRes, int shortTitleRes);
//Called by startWithFragment(String, Bundle, Fragment, int, int, int); when in single-pane mode, to build an Intent to launch a new activity showing the selected fragment.

void onContentChanged();
//Updates the screen state (current list and other views); when the content changes.

PreferenceActivity.Header onGetInitialHeader();
//Called to determine the initial header to be shown.

PreferenceActivity.Header onGetNewHeader();
//Called after the header list has been updated (onBuildHeaders(List); has been called and returned due to invalidateHeaders();); to specify the header that should now be selected.

void onHeaderClick(PreferenceActivity.Header header, int position);
//Called when the user selects an item in the header list.

boolean onIsHidingHeaders();
//Called to determine whether the header list should be hidden.

boolean onIsMultiPane();
//Called to determine if the activity should run in multi-pane mode.

boolean onPreferenceStartFragment(PreferenceFragment caller, Preference pref);
//Called when the user has clicked on a Preference that has a fragment class name associated with it.

boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference);
//This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.

void setListFooter(@Sink(DISPLAY) View view);
//Set a footer that should be shown at the bottom of the header list.

void setParentTitle(@Sink(DISPLAY) CharSequence title, @Sink(DISPLAY) CharSequence shortTitle, View.OnClickListener listener);
//Should be called after onCreate to ensure that the breadcrumbs, if any, were created.

void setPreferenceScreen(@Sink(DISPLAY) PreferenceScreen preferenceScreen);
//This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.

void showBreadCrumbs(@Sink(DISPLAY) CharSequence title, @Sink(DISPLAY) CharSequence shortTitle);
//Change the base title of the bread crumbs for the current preferences.

void startPreferenceFragment(@Sink(DISPLAY) Fragment fragment, boolean push);
//Start a new fragment.

void startPreferencePanel(String fragmentClass, Bundle args, int titleRes, @Sink(DISPLAY) CharSequence titleText, @Sink(DISPLAY) Fragment resultTo, int resultRequestCode);
//Start a new fragment containing a preference panel.

void startWithFragment(String fragmentName, Bundle args, @Sink(DISPLAY) Fragment resultTo, int resultRequestCode);
//Like startWithFragment(String, Bundle, Fragment, int, int, int); but uses a 0 titleRes.

void startWithFragment(String fragmentName, Bundle args, @Sink(DISPLAY) Fragment resultTo, int resultRequestCode, int titleRes, int shortTitleRes);
//Start a new instance of this activity, showing only the given preference fragment.

void switchToHeader(@Sink(DISPLAY) PreferenceActivity.Header header);
//When in two-pane mode, switch to the fragment pane to show the given preference fragment.

void switchToHeader(String fragmentName, Bundle args);
//When in two-pane mode, switch the fragment pane to show the given preference fragment.

//Protected Methods
void onActivityResult(int requestCode, int resultCode, Intent data);
//Called when an activity you launched exits, giving you the requestCode you started it with, the resultCode it returned, and any additional data from it.

void onCreate(Bundle savedInstanceState);
//Called when the activity is starting.

void onDestroy();
//Perform any final cleanup before an activity is destroyed.

void onListItemClick(ListView l, View v, int position, long id);
//This method will be called when an item in the list is selected.

void onNewIntent(Intent intent);
//This is called for activities that set launchMode to "singleTop" in their package, or if a client used the FLAG_ACTIVITY_SINGLE_TOP flag when calling startActivity(Intent);.

void onRestoreInstanceState(Bundle state);
//Ensures the list view has been created before Activity restores all of the view states.

void onSaveInstanceState(Bundle outState);
//Called to retrieve per-instance state from an activity before being killed so that the state can be restored in onCreate(Bundle); or onRestoreInstanceState(Bundle); (the Bundle populated by this method will be passed to both);.

void onStop();
//Called when you are no longer visible to the user.



}

class PreferenceFragment {
    
void addPreferencesFromIntent(Intent intent);
//Adds preferences from activities that match the given Intent.

void addPreferencesFromResource(int preferencesResId);
//Inflates the given XML resource and adds the preference hierarchy to the current preference hierarchy.

@Source(SHARED_PREFERENCES) Preference findPreference(CharSequence key);
//Finds a Preference based on its key.

@Source(SHARED_PREFERENCES) PreferenceManager getPreferenceManager();
//Returns the PreferenceManager used by this fragment.

@Source(SHARED_PREFERENCES) PreferenceScreen getPreferenceScreen();
//Gets the root of the preference hierarchy that this fragment is showing.

void onActivityCreated(Bundle savedInstanceState);
//Called when the fragment's activity has been created and this fragment's view hierarchy instantiated.

void onActivityResult(int requestCode, int resultCode, Intent data);
//Receive the result from a previous call to startActivityForResult(Intent, int);.

void onCreate(Bundle savedInstanceState);
//Called to do initial creation of a fragment.

View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
//Called to have the fragment instantiate its user interface view.

void onDestroy();
//Called when the fragment is no longer in use.

void onDestroyView();
//Called when the view previously created by onCreateView(LayoutInflater, ViewGroup, Bundle); has been detached from the fragment.

boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference);

void onSaveInstanceState(Bundle outState);
//Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted.

void onStart();
//Called when the Fragment is visible to the user.

void onStop();
//Called when the Fragment is no longer started.

void setPreferenceScreen(@Sink(DISPLAY) PreferenceScreen preferenceScreen);
//Sets the root of the preference hierarchy that this fragment is showing.

}

class PreferenceGroup{
        boolean removePreference(Preference preference);
}

class PreferenceManager{
static @Source(SHARED_PREFERENCES) SharedPreferences getDefaultSharedPreferences(Context context);
//Gets a SharedPreferences instance that points to the default file that is used by the preference framework in the given context.

static void setDefaultValues(Context context, int resId, boolean readAgain);
//Similar to setDefaultValues(Context, int, boolean) but allows the client to provide the filename and mode of the shared preferences file.
}

class TwoStatePreference{
@Source(SHARED_PREFERENCES) boolean isChecked();
        void setSummaryOn(@Sink(SHARED_PREFERENCES) int summaryResId);
        void setSummaryOff(@Sink(SHARED_PREFERENCES) int summaryResId);
        void setChecked(@Sink(SHARED_PREFERENCES) boolean checked);
}
