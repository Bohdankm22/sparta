package android.provider;

class Browser {
static void clearHistory(ContentResolver cr);
static void clearSearches(ContentResolver cr);
}

class Contacts$People {
static Bitmap loadContactPhoto(Context context, Uri person, int placeholderImageResource, Options options);
}

class ContactsContract$QuickContact {
static void showQuickContact(Context context, Rect target, Uri lookupUri, int mode, String[] excludeMimes);
static void showQuickContact(Context context, View target, Uri lookupUri, int mode, String[] excludeMimes);
}

class MediaStore$Images$Media {
static String insertImage(ContentResolver cr, @Sink(CONTENT_PROVIDER) Bitmap source, @Sink(CONTENT_PROVIDER) String title, @Sink(CONTENT_PROVIDER) String description);
static String insertImage(ContentResolver cr, @Sink(CONTENT_PROVIDER) String imagePath, @Sink(CONTENT_PROVIDER) String name, @Sink(CONTENT_PROVIDER) String description) throws FileNotFoundException;
}

class MediaStore$Images$Thumbnails {
static @Source(CONTENT_PROVIDER) Bitmap getThumbnail(ContentResolver cr, long origId, int kind, Options options);
static @Source(CONTENT_PROVIDER) Bitmap getThumbnail(ContentResolver cr, long origId, long groupId, int kind, Options options);
static @Source(CONTENT_PROVIDER) Cursor queryMiniThumbnail(ContentResolver cr, long origId, int kind, String[] projection);
}

class Settings$System {
static boolean putInt(ContentResolver cr, String name, @Sink(WRITE_SETTINGS) int value);
}

class ContactsContract$CommonDataKinds$Phone {
    
final static CharSequence getTypeLabel(Resources res, int type, CharSequence label);
//Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM.

final static int getTypeLabelResource(int type);
//Return the string resource that best describes the given TYPE.



}
class ContactsContract$CommonDataKinds$Email {
    
final static CharSequence getTypeLabel(Resources res, int type, CharSequence label);
//Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM.

final static int getTypeLabelResource(int type);
//Return the string resource that best describes the given TYPE.



}

class ContactsContract$Contacts {
    
static Uri getLookupUri(ContentResolver resolver, Uri contactUri);
//Builds a CONTENT_LOOKUP_URI style Uri describing the requested Contacts entry.

static Uri getLookupUri(long contactId, String lookupKey);
//Build a CONTENT_LOOKUP_URI lookup Uri using the given _ID and LOOKUP_KEY.

static Uri lookupContact(ContentResolver resolver, Uri lookupUri);
//Computes a content URI (see CONTENT_URI); given a lookup URI.

static void markAsContacted(ContentResolver resolver, long contactId);
//This method was deprecated in API level 16. The class DataUsageStatUpdater of the Android support library should be used instead.

static InputStream openContactPhotoInputStream(ContentResolver cr, Uri contactUri, boolean preferHighres);
//Opens an InputStream for the contacts's photo and returns the photo as a byte stream.

static InputStream openContactPhotoInputStream(ContentResolver cr, Uri contactUri);
//Opens an InputStream for the contacts's thumbnail photo and returns the photo as a byte stream.



}


class MediaStore$Audio$Playlists$Members{
        static @Source(FlowPermission.MEDIA) Uri getContentUri(String volumeName, long playlistId);
}
