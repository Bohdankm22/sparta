package android.provider;


class Contactscontract$CommonDataKinds$Phone {
    
final static CharSequence getTypeLabel(Resources res, int type, CharSequence label);
//Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM.

final static int getTypeLabelResource(int type);
//Return the string resource that best describes the given TYPE.



}
class ContactsContract$CommonDataKinds$Email {
    
final static CharSequence getTypeLabel(Resources res, int type, CharSequence label);
//Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM.

final static int getTypeLabelResource(int type);
//Return the string resource that best describes the given TYPE.



}

class ContactsContract$Contacts {
    
static Uri getLookupUri(ContentResolver resolver, Uri contactUri);
//Builds a CONTENT_LOOKUP_URI style Uri describing the requested Contacts entry.

static Uri getLookupUri(long contactId, String lookupKey);
//Build a CONTENT_LOOKUP_URI lookup Uri using the given _ID and LOOKUP_KEY.

static Uri lookupContact(ContentResolver resolver, Uri lookupUri);
//Computes a content URI (see CONTENT_URI); given a lookup URI.

static void markAsContacted(ContentResolver resolver, long contactId);
//This method was deprecated in API level 16. The class DataUsageStatUpdater of the Android support library should be used instead.

static InputStream openContactPhotoInputStream(ContentResolver cr, Uri contactUri, boolean preferHighres);
//Opens an InputStream for the contacts's photo and returns the photo as a byte stream.

static InputStream openContactPhotoInputStream(ContentResolver cr, Uri contactUri);
//Opens an InputStream for the contacts's thumbnail photo and returns the photo as a byte stream.



}

class ContentProvider {

//CSH: content providers are tricky because they look like SQL queries, but can be implemented with anything, files, in-memory objects, databases, etc... not quite sure what to do here
    
ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation> operations);
//Override this to handle requests to perform a batch of operations, or the default implementation will iterate over the operations and call apply(ContentProvider, ContentProviderResult[], int); on each of them.

void attachInfo(Context context, ProviderInfo info);
//After being instantiated, this is called to tell the content provider about itself.

int bulkInsert(Uri uri, ContentValues[] values);
//Override this to handle requests to insert a set of new rows, or the default implementation will iterate over the values and call insert(Uri, ContentValues); on each of them.

Bundle call(String method, String arg, Bundle extras);
//Call a provider-defined method.

abstract int delete(Uri uri, String selection, String[] selectionArgs);
//Implement this to handle requests to delete one or more rows.

final Context getContext();
//Retrieves the Context this provider is running in.

final PathPermission[] getPathPermissions();
//Return the path-based permissions required for read and/or write access to this content provider.

final String getReadPermission();
//Return the name of the permission required for read-only access to this content provider.

String[] getStreamTypes(Uri uri, String mimeTypeFilter);
//Called by a client to determine the types of data streams that this content provider supports for the given URI.

abstract String getType(Uri uri);
//Implement this to handle requests for the MIME type of the data at the given URI.

final String getWritePermission();
//Return the name of the permission required for read/write access to this content provider.

abstract Uri insert(Uri uri, ContentValues values);
//Implement this to handle requests to insert a new row.

void onConfigurationChanged(Configuration newConfig);
//Called by the system when the device configuration changes while your component is running. This method is always called on the application main thread, and must not perform lengthy operations.

abstract boolean onCreate();
//Implement this to initialize your content provider on startup.

void onLowMemory();
//This is called when the overall system is running low on memory, and would like actively running process to try to tighten their belt. This method is always called on the application main thread, and must not perform lengthy operations.

void onTrimMemory(int level);
//Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.

AssetFileDescriptor openAssetFile(Uri uri, String mode);
//This is like openFile(Uri, String);, but can be implemented by providers that need to be able to return sub-sections of files, often assets inside of their .apk.

ParcelFileDescriptor openFile(Uri uri, String mode);
//Override this to handle requests to open a file blob.

<T> ParcelFileDescriptor openPipeHelper(Uri uri, String mimeType, Bundle opts, T args, PipeDataWriter<T> func);
//A helper function for implementing openTypedAssetFile(Uri, String, Bundle);, for creating a data pipe and background thread allowing you to stream generated data back to the client.

AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts);
//Called by a client to open a read-only stream containing data of a particular MIME type.

abstract Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder);
//Implement this to handle query requests from clients.

Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal);
//Implement this to handle query requests from clients with support for cancellation.

void shutdown();
//Implement this to shut down the ContentProvider instance.

abstract int update(Uri uri, ContentValues values, String selection, String[] selectionArgs);
//Implement this to handle requests to update one or more rows.

//Protected Methods
boolean isTemporary();
//Returns true if this instance is a temporary content provider.

final ParcelFileDescriptor openFileHelper(Uri uri, String mode);
//Convenience for subclasses that wish to implement openFile(Uri, String); by looking up a column named "_data" at the given URI.

final void setPathPermissions(PathPermission[] permissions);
//Change the path-based permission required to read and/or write data in the content provider.

final void setReadPermission(String permission);
//Change the permission required to read data from the content provider.

final void setWritePermission(String permission);
//Change the permission required to read and write data in the content provider.



}

class ContentProviderOperation {
    
ContentProviderResult apply(ContentProvider provider, ContentProviderResult[] backRefs, int numBackRefs);
//Applies this operation using the given provider.

int describeContents();
//Describe the kinds of special objects contained in this Parcelable's marshalled representation.

Uri getUri();

boolean isReadOperation();

boolean isWriteOperation();

boolean isYieldAllowed();

static ContentProviderOperation.Builder newAssertQuery(Uri uri);
//Create a ContentProviderOperation.Builder suitable for building a ContentProviderOperation to assert a set of values as provided through withValues(ContentValues);.

static ContentProviderOperation.Builder newDelete(Uri uri);
//Create a ContentProviderOperation.Builder suitable for building a delete ContentProviderOperation.

static ContentProviderOperation.Builder newInsert(Uri uri);
//Create a ContentProviderOperation.Builder suitable for building an insert ContentProviderOperation.

static ContentProviderOperation.Builder newUpdate(Uri uri);
//Create a ContentProviderOperation.Builder suitable for building an update ContentProviderOperation.

String[] resolveSelectionArgsBackReferences(ContentProviderResult[] backRefs, int numBackRefs);
//The Selection Arguments back references are represented as a Map of Integer->Integer where the key is an index into the selection argument array (see withSelection(String, String[]);); and the value is the index of the previous result that should be used for that selection argument array slot.

ContentValues resolveValueBackReferences(ContentProviderResult[] backRefs, int numBackRefs);
//The ContentValues back references are represented as a ContentValues object where the key refers to a column and the value is an index of the back reference whose valued should be associated with the column.

String toString();
//Returns a string containing a concise, human-readable description of this object.

void writeToParcel(Parcel dest, int flags);
//Flatten this object in to a Parcel.



    
    
}

class ContentProviderOperation$Builder {
    
    
ContentProviderOperation build();
//Create a ContentProviderOperation from this ContentProviderOperation.Builder.

ContentProviderOperation.Builder withExpectedCount(int count);
//If set then if the number of rows affected by this operation do not match this count OperationApplicationException will be throw.

ContentProviderOperation.Builder withSelection(String selection, String[] selectionArgs);
//The selection and arguments to use.

ContentProviderOperation.Builder withSelectionBackReference(int selectionArgIndex, int previousResult);
//Add a back references as a selection arg.

ContentProviderOperation.Builder withValue(String key, Object value);
//A value to insert or update.

ContentProviderOperation.Builder withValueBackReference(String key, int previousResult);
//Add a ContentValues back reference.

ContentProviderOperation.Builder withValueBackReferences(ContentValues backReferences);
//Add a ContentValues of back references.

ContentProviderOperation.Builder withValues(ContentValues values);
//The ContentValues to use.

ContentProviderOperation.Builder withYieldAllowed(boolean yieldAllowed);
//


}

class MediaStore {
static final @Source(FlowPermission.MEDIA) String CONTENT_AUTHORITY_SLASH;
}

class MediaStore$Audio$Playlists$Members{
        static @Source(FlowPermission.MEDIA) Uri getContentUri(String volumeName, long playlistId);
}