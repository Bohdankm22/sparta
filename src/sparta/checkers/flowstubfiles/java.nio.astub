package java.nio;

@PolyFlowReceiver
class ByteBuffer extends Buffer implements Comparable<ByteBuffer> {
    static ByteBuffer allocateDirect(int arg0);
    static ByteBuffer allocate(int arg0);
    static ByteBuffer wrap(byte[] arg0, int arg1, int arg2);
    static ByteBuffer wrap(byte[] arg0);
    ByteBuffer slice();
    ByteBuffer duplicate();
    ByteBuffer asReadOnlyBuffer();
    byte get();
    ByteBuffer put(byte arg0);
    byte get(int arg0);
    ByteBuffer put(int arg0, byte arg1);
    ByteBuffer get(byte[] arg0, int arg1, int arg2);
    ByteBuffer get(byte[] arg0);
    ByteBuffer put(ByteBuffer arg0);
    ByteBuffer put(byte[] arg0, int arg1, int arg2);
    ByteBuffer put(byte[] arg0);
    boolean hasArray();
    byte[] array();
    int arrayOffset();
    ByteBuffer compact();
    boolean isDirect();
    String toString();
    int hashCode();
    boolean equals(Object arg0);
    int compareTo(ByteBuffer arg0);
    ByteOrder order();
    ByteBuffer order(ByteOrder arg0);
    char getChar();
    ByteBuffer putChar(char arg0);
    char getChar(int arg0);
    ByteBuffer putChar(int arg0, char arg1);
    CharBuffer asCharBuffer();
    short getShort();
    ByteBuffer putShort(short arg0);
    short getShort(int arg0);
    ByteBuffer putShort(int arg0, short arg1);
    ShortBuffer asShortBuffer();
    int getInt();
    ByteBuffer putInt(int arg0);
    int getInt(int arg0);
    ByteBuffer putInt(int arg0, int arg1);
    IntBuffer asIntBuffer();
    long getLong();
    ByteBuffer putLong(long arg0);
    long getLong(int arg0);
    ByteBuffer putLong(int arg0, long arg1);
    LongBuffer asLongBuffer();
    float getFloat();
    ByteBuffer putFloat(float arg0);
    float getFloat(int arg0);
    ByteBuffer putFloat(int arg0, float arg1);
    FloatBuffer asFloatBuffer();
    double getDouble();
    ByteBuffer putDouble(double arg0);
    double getDouble(int arg0);
    ByteBuffer putDouble(int arg0, double arg1);
    DoubleBuffer asDoubleBuffer();
}
