package java.nio;

class Buffer{
   int remaining();
   @PolyFlowReceiver
   Buffer flip();
}

@PolyFlowReceiver
class ByteBuffer extends Buffer implements Comparable<ByteBuffer> {
    static ByteBuffer allocateDirect(int arg0);
    static ByteBuffer allocate(int arg0);
    static ByteBuffer wrap(byte[] arg0, int arg1, int arg2);
    static ByteBuffer wrap(byte[] arg0);
    ByteBuffer slice();
    ByteBuffer duplicate();
    ByteBuffer asReadOnlyBuffer();
    byte get();
    ByteBuffer put(byte arg0);
    byte get(int arg0);
    ByteBuffer put(int arg0, byte arg1);
    ByteBuffer get(byte[] arg0, int arg1, int arg2);
    ByteBuffer get(byte[] arg0);
    ByteBuffer put(ByteBuffer arg0);
    ByteBuffer put(byte[] arg0, int arg1, int arg2);
    ByteBuffer put(byte[] arg0);
    boolean hasArray();
    byte[] array();
    int arrayOffset();
    ByteBuffer compact();
    boolean isDirect();
    String toString();
    int hashCode();
    boolean equals(Object arg0);
    int compareTo(ByteBuffer arg0);
    ByteOrder order();
    ByteBuffer order(ByteOrder arg0);
    char getChar();
    ByteBuffer putChar(char arg0);
    char getChar(int arg0);
    ByteBuffer putChar(int arg0, char arg1);
    CharBuffer asCharBuffer();
    short getShort();
    ByteBuffer putShort(short arg0);
    short getShort(int arg0);
    ByteBuffer putShort(int arg0, short arg1);
    ShortBuffer asShortBuffer();
    int getInt();
    ByteBuffer putInt(int arg0);
    int getInt(int arg0);
    ByteBuffer putInt(int arg0, int arg1);
    IntBuffer asIntBuffer();
    long getLong();
    ByteBuffer putLong(long arg0);
    long getLong(int arg0);
    ByteBuffer putLong(int arg0, long arg1);
    LongBuffer asLongBuffer();
    float getFloat();
    ByteBuffer putFloat(float arg0);
    float getFloat(int arg0);
    ByteBuffer putFloat(int arg0, float arg1);
    FloatBuffer asFloatBuffer();
    double getDouble();
    ByteBuffer putDouble(double arg0);
    double getDouble(int arg0);
    ByteBuffer putDouble(int arg0, double arg1);
    DoubleBuffer asDoubleBuffer();
}

@PolyFlowReceiver
class CharBuffer extends Buffer implements Comparable<CharBuffer>, Appendable, CharSequence, Readable {
    static CharBuffer allocate(int arg0);
    static CharBuffer wrap(char[] arg0, int arg1, int arg2);
    static CharBuffer wrap(char[] arg0);
    int read(CharBuffer arg0) throws IOException;
    static CharBuffer wrap(CharSequence arg0, int arg1, int arg2);
    static CharBuffer wrap(CharSequence arg0);
    CharBuffer slice();
    CharBuffer duplicate();
    CharBuffer asReadOnlyBuffer();
    char get();
    CharBuffer put(char arg0);
    char get(int arg0);
    CharBuffer put(int arg0, char arg1);
    CharBuffer get(char[] arg0, int arg1, int arg2);
    CharBuffer get(char[] arg0);
    CharBuffer put(CharBuffer arg0);
    CharBuffer put(char[] arg0, int arg1, int arg2);
    CharBuffer put(char[] arg0);
    CharBuffer put(String arg0, int arg1, int arg2);
    CharBuffer put(String arg0);
    boolean hasArray();
    char[] array();
    int arrayOffset();
    CharBuffer compact();
    boolean isDirect();
    int hashCode();
    boolean equals(Object arg0);
    int compareTo(CharBuffer arg0);
    String toString();
    int length();
    char charAt(int arg0);
    CharBuffer subSequence(int arg0, int arg1);
    CharBuffer append(CharSequence arg0);
    CharBuffer append(CharSequence arg0, int arg1, int arg2);
    CharBuffer append(char arg0);
    ByteOrder order();
}

package java.nio.charset;

@PolyFlowReceiver
class Charset implements Comparable<Charset> {
    static boolean isSupported(String arg0);
    static Charset forName(String arg0);
    static SortedMap<String,Charset> availableCharsets();
    static Charset defaultCharset();
    protected Charset(String arg0, String[] arg1);
    String name();
    Set<String> aliases();
    String displayName();
    boolean isRegistered();
    String displayName(Locale arg0);
    boolean contains(Charset arg0);
    CharsetDecoder newDecoder();
    CharsetEncoder newEncoder();
    boolean canEncode();
    CharBuffer decode(ByteBuffer arg0);
    ByteBuffer encode(CharBuffer arg0);
    ByteBuffer encode(String arg0);
    int compareTo(Charset arg0);
    int hashCode();
    boolean equals(Object arg0);
    String toString();
}
