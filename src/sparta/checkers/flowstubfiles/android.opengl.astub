package android.opengl;

class GLU {
    
static String gluErrorString(int error);
//Return an error string from a GL or GLU error code.

static void gluLookAt(GL10 gl, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ);
//Define a viewing transformation in terms of an eye point, a center of view, and an up vector.

static void gluOrtho2D(GL10 gl, float left, float right, float bottom, float top);
//Set up a 2D orthographic projection matrix

static void gluPerspective(GL10 gl, float fovy, float aspect, float zNear, float zFar);
//Set up a perspective projection matrix

static int gluProject(float objX, float objY, float objZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] win, int winOffset);
//Map object coordinates into window coordinates.

static int gluUnProject(float winX, float winY, float winZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] obj, int objOffset);
//Map window coordinates to object coordinates.


}

class GLUtils{
        static void texImage2D(int target, int level, Bitmap bitmap, int border);
}
class Matrix{
        static void setIdentityM(float[] sm, int smOffset);
        static void multiplyMM(float[] arg0, int arg1, float[] arg2, int arg3, float[] arg4, int arg5);
        static void frustumM(float[] m, int offset, float left, float right, float bottom, float top, float near, float far);
        static void rotateM(float[] m, int mOffset, float a, float x, float y, float z);
        static void scaleM(float[] m, int mOffset, float x, float y, float z);
        static void translateM(float[] m, int mOffset, float x, float y, float z);
}

