package android.nfc;


class NfcAdapter {
    
void disableForegroundDispatch(@Sink(NFC) Activity activity);
//Disable foreground dispatch to the given activity.

void disableForegroundNdefPush(@Sink(NFC) Activity activity);
//This method was deprecated in API level 14. use setNdefPushMessage(NdefMessage, Activity, Activity...); instead

void enableForegroundDispatch(@Sink(NFC) Activity activity, @Sink(NFC) PendingIntent intent, @Sink(NFC) IntentFilter[] filters, @Sink(NFC) String[][] techLists);
//Enable foreground dispatch to the given Activity.

void enableForegroundNdefPush(@Sink(NFC) Activity activity, @Sink(NFC) NdefMessage message);
//This method was deprecated in API level 14. use setNdefPushMessage(NdefMessage, Activity, Activity...); instead

static NfcAdapter getDefaultAdapter(Context context);
//Helper to get the default NFC Adapter.

boolean isEnabled();
//Return true if this NFC Adapter has any features enabled.

boolean isNdefPushEnabled();
//Return true if the NDEF Push (Android Beam); feature is enabled.

void setBeamPushUris(@Sink(NFC) Uri[] uris, @Sink(NFC) Activity activity);
//Set one or more Uris to send using Android Beam (TM);.

void setBeamPushUrisCallback(NfcAdapter.CreateBeamUrisCallback callback, @Sink(NFC) Activity activity);
//Set a callback that will dynamically generate one or more Uris to send using Android Beam (TM);.

void setNdefPushMessage(@Sink(NFC) NdefMessage message, @Sink(NFC) Activity activity, @Sink(NFC) Activity... activities);
//Set a static NdefMessage to send using Android Beam (TM);.

void setNdefPushMessageCallback(NfcAdapter.CreateNdefMessageCallback callback, Activity activity, Activity... activities);
//Set a callback that dynamically generates NDEF messages to send using Android Beam (TM);.

void setOnNdefPushCompleteCallback(NfcAdapter.OnNdefPushCompleteCallback callback, @Sink(NFC) Activity activity, @Sink(NFC) Activity... activities);
//Set a callback on successful Android Beam (TM);.




}


class NdefMessage {
    
int describeContents();
//Describe the kinds of special objects contained in this Parcelable's marshalled representation.

boolean equals(Object obj);
//Returns true if the specified NDEF Message contains identical NDEF Records.

int getByteArrayLength();
//Return the length of this NDEF Message if it is written to a byte array with toByteArray();.

NdefRecord[] getRecords();
//Get the NDEF Records inside this NDEF Message.

int hashCode();
//Returns an integer hash code for this object.

byte[] toByteArray();
//Return this NDEF Message as raw bytes.

String toString();
//Returns a string containing a concise, human-readable description of this object.

void writeToParcel(Parcel dest, int flags);
//Flatten this object in to a Parcel.




}

    
class NdefRecord implements Parcelable {
    static final short TNF_EMPTY;
    static final short TNF_WELL_KNOWN;
    static final short TNF_MIME_MEDIA;
    static final short TNF_ABSOLUTE_URI;
    static final short TNF_EXTERNAL_TYPE;
    static final short TNF_UNKNOWN;
    static final short TNF_UNCHANGED;
    static final byte[] RTD_TEXT;
    static final byte[] RTD_URI;
    static final byte[] RTD_SMART_POSTER;
    static final byte[] RTD_ALTERNATIVE_CARRIER;
    static final byte[] RTD_HANDOVER_CARRIER;
    static final byte[] RTD_HANDOVER_REQUEST;
    static final byte[] RTD_HANDOVER_SELECT;
    static final Creator<NdefRecord> CREATOR;
    NdefRecord(@Sink(NFC) short arg0, @Sink(NFC) byte[] arg1, @Sink(NFC) byte[] arg2, @Sink(NFC) byte[] arg3);
    NdefRecord(@Sink(NFC) byte[] arg0) throws FormatException;
    static NdefRecord createApplicationRecord(@Sink(NFC) String arg0);
    static NdefRecord createUri(@Sink(NFC) Uri arg0);
    static NdefRecord createUri(@Sink(NFC) String arg0);
    static NdefRecord createMime(@Sink(NFC) String arg0, @Sink(NFC) byte[] arg1);
    static NdefRecord createExternal(@Sink(NFC) String arg0, @Sink(NFC) String arg1, @Sink(NFC) byte[] arg2);
    @Source(NFC) short getTnf();
    @Source(NFC) byte[] getType();
    @Source(NFC) byte[] getId();
    @Source(NFC) byte[] getPayload();
    @Source(NFC) byte[] toByteArray();
    @Source(NFC) String toMimeType();
    @Source(NFC) Uri toUri();
    int describeContents();
    int hashCode();
    boolean equals(Object arg0);
    @Source(NFC) String toString();
}    


class Tag implements Parcelable {
    static final Creator< @Source(NFC) Tag> CREATOR;
    @Source(NFC) byte[] getId();
    @Source(NFC) String[] getTechList();
    @Source(NFC) String toString();
    int describeContents();
@AddsSourceData
    void writeToParcel(@Source(NFC) Parcel arg0, int arg1);
}

package android.nfc.tech;


class BasicTagTechnology{
            void connect() throws IOException;
}


class MifareClassic{
            boolean authenticateSectorWithKeyA(int sectorIndex, byte[] key) throws IOException;
            static @Source(NFC) MifareClassic get(@Source({NFC}) Tag tag);
            @Source(NFC) byte @Source(NFC) [] readBlock(int blockIndex) throws IOException;
            int getSectorCount();
            int getBlockCountInSector(int sectorIndex);
}

class Ndef {
    
    
boolean canMakeReadOnly();
//Indicates whether a tag can be made read-only with makeReadOnly();.

void close(); 
//Disable I/O operations to the tag from this TagTechnology object, and release resources.

void connect();
//Enable I/O operations to the tag from this TagTechnology object.

static Ndef get(Tag tag);
//Get an instance of Ndef for the given tag.

NdefMessage getCachedNdefMessage();
//Get the NdefMessage that was read from the tag at discovery time.

int getMaxSize();
//Get the maximum NDEF message size in bytes.

@Source(NFC) NdefMessage getNdefMessage();
//Read the current NdefMessage on this tag.

Tag getTag();
//Get the Tag object backing this TagTechnology object.

String getType();
//Get the NDEF tag type.

boolean isConnected();
//Helper to indicate if I/O operations should be possible.

@Source(NFC) boolean isWritable();
//Determine if the tag is writable.

@Source(NFC) boolean makeReadOnly();
//Make a tag read-only.

void writeNdefMessage(@Sink(NFC) NdefMessage msg);
//Overwrite the NdefMessage on this tag.




}

