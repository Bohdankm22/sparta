package android.content;

class ContentProvider {
    final @Source(FlowPermission.ANY) Context getContext() @Source(FlowPermission.ANY);
}

class ContentUris {
    @PolyFlow static Uri withAppendedId(Uri contentUri, long id);
}

@PolyFlowReceiver
class ContentValues {
    void put(@PolySource @PolySink String key, @PolySource @PolySink Long value) @PolySource @PolySink;
}





class Context {
	@Source(FlowPermission.FILESYSTEM) @Sink(FlowPermission.ANY) File getDir(@Source(FlowPermission.ANY) @Sink(FlowPermission.FILESYSTEM) String name, @Source(FlowPermission.ANY) @Sink(FlowPermission.CONDITIONAL) int mode);


 //Added by Carl Hartung
abstract ContentResolver getContentResolver();
//Return a ContentResolver instance for your application's package.

abstract Resources getResources();
//Return a Resources instance for your application's package.

abstract Object getSystemService(String name);
//Return the handle to a system-level service by name.

final @Source(FlowPermission.LITERAL) String getString(int resId);
//Return a localized string from the application's package's default string table.

abstract @Source(FlowPermission.LITERAL) String getPackageName();
//Return the name of this application's package.

abstract SharedPreferences getSharedPreferences(String name, int mode);
//Retrieve and hold the contents of the preferences file 'name', returning a SharedPreferences through which you can retrieve and modify its values.

abstract void startActivity(Intent intent);
//Same as startActivity(Intent, Bundle); with no options specified.

abstract void startActivity(Intent intent, Bundle options);
//Launch a new activity.

abstract PackageManager getPackageManager();
//Return PackageManager instance to find global package information.

abstract ComponentName startService(Intent service);
//Request that a given application service be started.

abstract @Source(FlowPermission.FILESYSTEM) File getFilesDir();
//Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int); are stored.

abstract Context getApplicationContext();
//Return the context of the single, global Application object of the current process.

abstract void sendBroadcast(Intent intent);
//Broadcast the given intent to all interested BroadcastReceivers.

abstract void sendBroadcast(Intent intent, String receiverPermission);
//Broadcast the given intent to all interested BroadcastReceivers, allowing an optional required permission to be enforced.

final TypedArray obtainStyledAttributes(int[] attrs);
//Retrieve styled attribute information in this Context's theme.

final TypedArray obtainStyledAttributes(AttributeSet set, int[] attrs);
//Retrieve styled attribute information in this Context's theme.

final TypedArray obtainStyledAttributes(int resid, int[] attrs);
//Retrieve styled attribute information in this Context's theme.

final TypedArray obtainStyledAttributes(AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes);
//Retrieve styled attribute information in this Context's theme.

abstract void unbindService(ServiceConnection conn);
//Disconnect from an application service.

final @Source(FlowPermission.LITERAL) CharSequence getText(int resId);
//Return a localized, styled CharSequence from the application's package's default string table.

abstract @Source(FlowPermission.FILESYSTEM) File getCacheDir();
//Returns the absolute path to the application specific cache directory on the filesystem.

abstract AssetManager getAssets();
//Return an AssetManager instance for your application's package.

abstract Context createPackageContext(String packageName, int flags);
//Return a new Context object for the given application name.

abstract boolean stopService(Intent service);
//Request that a given application service be stopped.

abstract void startActivities(Intent[] intents);
//Same as startActivities(Intent[], Bundle); with no options specified.

abstract void startActivities(Intent[] intents, Bundle options);
//Launch multiple new activities.

abstract Looper getMainLooper();
//Return the Looper for the main thread of the current process.

abstract ClassLoader getClassLoader();
//Return a class loader you can use to retrieve classes in this package.

abstract boolean bindService(Intent service, ServiceConnection conn, int flags);
//Connect to an application service, creating it if needed.

abstract void revokeUriPermission(Uri uri, int modeFlags);
//Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int);.

abstract Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
//Register a BroadcastReceiver to be run in the main activity thread.

abstract Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler);
//Register to receive intent broadcasts, to run in the context of scheduler.

abstract @Sink(FlowPermission.FILESYSTEM) FileOutputStream openFileOutput(String name, int mode);
//Open a private file associated with this Context's application package for writing.
//CSH: a sink on a return value seems odd. This opens a file local to the app for writing to anywhere.

abstract void grantUriPermission(String toPackage, Uri uri, int modeFlags);
//Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider.

abstract @Source(FlowPermission.FILESYSTEM) File getFileStreamPath(String name);
//Returns the absolute path on the filesystem where a file created with openFileOutput(String, int); is stored.

}

class UriMatcher {
    void addURI(@PolySource @PolySink String authority, @PolySource @PolySink String path, @PolySource @PolySink int code) @PolySource @PolySink;
    @PolyFlow int match(Uri uri);
    @Source(FlowPermission.ANY) UriMatcher(@Source(FlowPermission.LITERAL) @Sink({}) int code);
}

package android.content.res;

class Resources {
//CSH: All of the objects returned by this class are pre-defined by the developer and compiled into the.apk
    
@Source(FlowPermission.LITERAL) CharSequence getText(int id, CharSequence def);
//Return the string value associated with a particular resource ID.

@Source(FlowPermission.LITERAL) CharSequence getText(int id);
//Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.

@Source(FlowPermission.LITERAL) String getString(int id);
//Return the string value associated with a particular resource ID. It will be stripped of any styled text information.

@Source(FlowPermission.LITERAL) String getString(int id, Object... formatArgs);
//Return the string value associated with a particular resource ID, substituting the format arguments as defined in Formatter and format(String, Object...);. It will be stripped of any styled text information.

DisplayMetrics getDisplayMetrics();
//Return the current display metrics that are in effect for this resource object.

@Source(FlowPermission.LITERAL) Drawable getDrawable(int id);
//Return a drawable object associated with a particular resource ID.

@Source(FlowPermission.LITERAL) int getIdentifier(String name, String defType, String defPackage);
//Return a resource identifier for the given resource name.

XmlResourceParser getXml(int id);
//Return an XmlResourceParser through which you can read a generic XML resource for the given resource ID.

Configuration getConfiguration();
//Return the current configuration that is in effect for this resource object.

InputStream openRawResource(int id, TypedValue value);
//Open a data stream for reading a raw resource.

static Resources getSystem();
//Return a global shared Resources object that provides access to only system resources (no application resources);, and is not configured for the current screen (can not use dimension units, does not change based on orientation, etc);.

TypedArray obtainAttributes(AttributeSet set, int[] attrs);
//Retrieve a set of basic attribute values from an AttributeSet, not performing styling of them using a theme and/or style resources.

void getValue(String name, @Source(FlowPermission.LITERAL) TypedValue outValue, boolean resolveRefs);
//Return the raw data associated with a particular resource ID.

void getValue(int id, @Source(FlowPermission.LITERAL) TypedValue outValue, boolean resolveRefs);
//Return the raw data associated with a particular resource ID.

@Source(FlowPermission.LITERAL) String getQuantityString(int id, int quantity);
//Return the string value associated with a particular resource ID for a particular numerical quantity.

@Source(FlowPermission.LITERAL) String getQuantityString(int id, int quantity, Object... formatArgs);
//Return the string value associated with a particular resource ID for a particular numerical quantity, substituting the format arguments as defined in Formatter and format(String, Object...);. It will be stripped of any styled text information.

int getColor(int id);
//Return a color integer associated with a particular resource ID.

@Source(FlowPermission.LITERAL) String[] getStringArray(int id);
//Return the string array associated with a particular resource ID.

@Source(FlowPermission.LITERAL) String getResourceTypeName(int resid);
//Return the type name for a given resource identifier.

@Source(FlowPermission.LITERAL) String getResourcePackageName(int resid);
//Return the package name for a given resource identifier.

@Source(FlowPermission.LITERAL) String getResourceName(int resid);
//Return the full name for a given resource identifier.

@Source(FlowPermission.LITERAL) String getResourceEntryName(int resid);
//Return the entry name for a given resource identifier.

@Source(FlowPermission.LITERAL) int getInteger(int id);
//Return an integer associated with a particular resource ID.

 
//UNUSED and UNANNOTATED
// final void finishPreloading();
// final void flushLayoutCache();
// XmlResourceParser getAnimation(int id);
// final AssetManager getAssets();
// boolean getBoolean(int id);
// ColorStateList getColorStateList(int id);
// float getDimension(int id);
// int getDimensionPixelOffset(int id);
// int getDimensionPixelSize(int id);
// Drawable getDrawableForDensity(int id, int density);
// float getFraction(int id, int base, int pbase);
// int[] getIntArray(int id);
// XmlResourceParser getLayout(int id);
// Movie getMovie(int id);
// CharSequence getQuantityText(int id, int quantity);
// CharSequence[] getTextArray(int id);
// void getValueForDensity(int id, int density, TypedValue outValue, boolean resolveRefs);
// final Resources.Theme newTheme();
// TypedArray obtainTypedArray(int id);
// InputStream openRawResource(int id);
// AssetFileDescriptor openRawResourceFd(int id);
// void parseBundleExtra(String tagName, AttributeSet attrs, Bundle outBundle);
// void parseBundleExtras(XmlResourceParser parser, Bundle outBundle);
// void updateConfiguration(Configuration config, DisplayMetrics metrics);
}


class SharedPreferences {
    
abstract boolean getBoolean(String key, boolean defValue);
//Retrieve a boolean value from the preferences.

abstract String getString(String key, String defValue);
//Retrieve a String value from the preferences.

abstract SharedPreferences.Editor edit();
//Create a new Editor for these preferences, through which you can make modifications to the data in the preferences and atomically commit those changes back to the SharedPreferences object.

abstract long getLong(String key, long defValue);
//Retrieve a long value from the preferences.

abstract int getInt(String key, int defValue);
//Retrieve an int value from the preferences.

abstract void registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener);
//Registers a callback to be invoked when a change happens to a preference.

abstract Map<String, ?> getAll();
//Retrieve all values from the preferences.


//UNUSED AND UNANNOTATED
// abstract boolean contains(String key);
// abstract float getFloat(String key, float defValue);
// abstract Set<String> getStringSet(String key, Set<String> defValues);
// abstract void unregisterOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener);
}

