
package org.apache.http;
class ConnectionReuseStrategy{
            boolean keepAlive(HttpResponse arg0, HttpContext arg1);
}
class Header{
            String getValue();
            HeaderElement[] getElements() throws ParseException;
            String getName();
}
class HeaderElement{
            String getName();
            String getValue();
}
class HeaderElementIterator{
            boolean hasNext();
            HeaderElement nextElement();
}
class HeaderIterator{
            boolean hasNext();
}

class HttpEntity{
            Header getContentEncoding();
            boolean isRepeatable();
            InputStream getContent() throws IOException,IllegalStateException;
            void writeTo(@PolySink OutputStream arg0) throws IOException;
            long getContentLength();
            void consumeContent() throws IOException;
}
class HttpEntityEnclosingRequest{
            HttpEntity getEntity();
}
class HttpHost{
            HttpHost(String hostname, int port);
            HttpHost(String hostname);
}
class HttpMessage{
            HttpParams getParams();
            HeaderIterator headerIterator(String arg0);
            Header getFirstHeader(String arg0);
            boolean containsHeader(String arg0);
            void addHeader(String arg0, String arg1);
            Header[] getHeaders(String arg0);
            Header[] getAllHeaders();
}
class HttpRequestInterceptor{
            void process(HttpRequest arg0, HttpContext arg1) throws HttpException,IOException;
}
class HttpResponse{
            void setEntity(HttpEntity arg0);
            StatusLine getStatusLine();
            @Source(FlowPermission.INTERNET) HttpEntity getEntity();
}
class HttpResponseInterceptor{
            void process(HttpResponse arg0, HttpContext arg1) throws HttpException,IOException;
}
class ProtocolVersion{
            boolean lessEquals(ProtocolVersion version);
}
class StatusLine{
            String getReasonPhrase();
            int getStatusCode();
            ProtocolVersion getProtocolVersion();
}
class TokenIterator{
            boolean hasNext();
            String nextToken();
}


package org.apache.http.conn;


class ClientConnectionManager{
            ClientConnectionRequest requestConnection(HttpRoute arg0, Object arg1);
            void shutdown();
}
class ConnectionKeepAliveStrategy{
            long getKeepAliveDuration(HttpResponse arg0, HttpContext arg1);
}

package org.apache.http.message;
class BasicHeaderElementIterator{
            BasicHeaderElementIterator(HeaderIterator headerIterator);
}

package org.apache.http.conn.params;
class ConnPerRoute{
            int getMaxForRoute(HttpRoute arg0);
}
class ConnManagerParams{
            static void setMaxConnectionsPerRoute(HttpParams params, ConnPerRoute connPerRoute);
            static void setMaxTotalConnections(HttpParams params, int maxTotalConnections);
}

package org.apache.http.conn.ssl;
class SSLSocketFactory{
            static SSLSocketFactory getSocketFactory();
            void setHostnameVerifier(X509HostnameVerifier hostnameVerifier);
}

package org.apache.http.conn.scheme;
class SchemeRegistry{
            SchemeRegistry();
            Scheme register(Scheme sch);
}
class Scheme{
            Scheme(String name, SocketFactory factory, int port);
}
class PlainSocketFactory{
            static PlainSocketFactory getSocketFactory();
}

package org.apache.http.entity;
class InputStreamEntity{
            @PolySource @PolySink InputStreamEntity(@PolySource @PolySink InputStream instream, long length);
}
class HttpEntityWrapper{
            long getContentLength();
            HttpEntityWrapper(HttpEntity wrapped);
            @PolyFlowReceiver
            InputStream getContent() throws IOException;
            @PolyFlowReceiver
            void writeTo(OutputStream outstream) throws IOException;
}
@PolyFlowReceiver
class AbstractHttpEntity{
            void setChunked(boolean b);
            void setContentEncoding(String ceString);
            void setContentType(Header contentType);
            void setContentType(Header contentType);
            void setContentType(String ctString);
            void setContentType(String ctString);
}




package org.apache.http.client.entity;
class UrlEncodedFormEntity{
        UrlEncodedFormEntity(List<@Sink(INTERNET)? extends @Sink(INTERNET) NameValuePair> parameters); 
}

package org.apache.http.client.methods;

class HttpGet{
            @Source(INTERNET) HttpGet(@Sink(INTERNET) String uri);
}

class HttpHead{
        HttpHead(@Sink(INTERNET) String uri);
}

class HttpPost {
@InferPermissionParameter(value=INTERNET, isA="sink")
    @Sink(INTERNET) HttpPost( String postUrl);
}


class HttpPut{
            HttpPut(@Sink(INTERNET) String uri);
}

class HttpUriRequest{
            void abort() throws UnsupportedOperationException;
            boolean isAborted();
}

class HttpEntityEnclosingRequestBase extends HttpRequestBase implements HttpEntityEnclosingRequest {
@PolyFlowReceiver
    void setEntity(HttpEntity arg0);
}

package org.apache.http.client;

class HttpClient {
<T> T execute(@Sink(INTERNET) HttpHost arg0, @Sink(INTERNET) HttpRequest arg1, ResponseHandler<? extends T> arg2, @Sink(INTERNET) HttpContext arg3) throws IOException,ClientProtocolException;
<T> T execute(@Sink(INTERNET) HttpHost arg0, @Sink(INTERNET) HttpRequest arg1, ResponseHandler<? extends T> arg2) throws IOException,ClientProtocolException;
<T> T execute(@Sink(INTERNET) HttpUriRequest arg0, ResponseHandler<? extends T> arg1, @Sink(INTERNET) HttpContext arg2) throws IOException,ClientProtocolException;
<T> T execute(@Sink(INTERNET) HttpUriRequest arg0, ResponseHandler<? extends T> arg1) throws IOException,ClientProtocolException;
HttpResponse execute(@Sink(INTERNET) HttpHost arg0, @Sink(INTERNET) HttpRequest arg1, @Sink(INTERNET)  HttpContext arg2) throws IOException,ClientProtocolException;
HttpResponse execute(@Sink(INTERNET) HttpHost arg0, @Sink(INTERNET) HttpRequest arg1) throws IOException,ClientProtocolException;
HttpResponse execute(@Sink(INTERNET) HttpUriRequest arg0, @Sink(INTERNET) HttpContext arg1) throws IOException,ClientProtocolException;
}

class CredentialsProvider {
void setCredentials(AuthScope arg0, Credentials arg1);
}

class CookieStore{
        @Source(FlowPermission.INTERNET) List<Cookie> getCookies();
}

class HttpClient {

    // Added by mcarthur
    @Source(FlowPermission.INTERNET)
    HttpResponse execute(@Sink(FlowPermission.INTERNET) HttpUriRequest request);
                @Source(FlowPermission.INTERNET) HttpParams getParams();

}

package org.apache.http.cookie;
class Cookie{
        @Source(FlowPermission.INTERNET) String getValue();
}

package org.apache.http.impl;
class DefaultConnectionReuseStrategy{
            boolean keepAlive(HttpResponse response, HttpContext context);
            protected TokenIterator createTokenIterator(HeaderIterator hit);
            DefaultConnectionReuseStrategy();
}

package org.apache.http.impl.conn.tsccm;
class ThreadSafeClientConnManager{
            ThreadSafeClientConnManager(HttpParams params, SchemeRegistry schreg);
            ClientConnectionRequest requestConnection(HttpRoute route, Object state);
            void closeExpiredConnections();
            int getConnectionsInPool();
            void closeIdleConnections(long idleTimeout, TimeUnit tunit);
}

package org.apache.http.impl.client;
class AbstractHttpClient{
            protected ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy();
            void addRequestInterceptor(HttpRequestInterceptor itcp);
            protected ConnectionReuseStrategy createConnectionReuseStrategy();
            void addResponseInterceptor(HttpResponseInterceptor itcp);
        ClientConnectionManager getConnectionManager();
        HttpResponse execute(HttpUriRequest request) throws IOException,ClientProtocolException;
        <T> T execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler) throws IOException,ClientProtocolException;
        CookieStore getCookieStore();
        <T> T execute(@Sink(INTERNET) HttpHost target, @Sink(INTERNET) HttpRequest request, ResponseHandler<? extends T> responseHandler, @Sink(INTERNET) HttpContext context) throws IOException,ClientProtocolException;
<T> T execute(@Sink(INTERNET) HttpHost target, @Sink(INTERNET) HttpRequest request, ResponseHandler<? extends T> responseHandler) throws IOException,ClientProtocolException;
<T> T execute(@Sink(INTERNET) HttpUriRequest request, ResponseHandler<? extends T> responseHandler, @Sink(INTERNET) HttpContext context) throws IOException,ClientProtocolException;
CredentialsProvider getCredentialsProvider();
HttpParams getParams();
@Source(INTERNET) HttpResponse execute(@Sink(INTERNET) HttpHost target, @Sink(INTERNET) HttpRequest request, @Sink(INTERNET) @Source(INTERNET) HttpContext context) throws IOException,ClientProtocolException;
@Source(INTERNET) HttpResponse execute(@Sink(INTERNET) HttpHost target, @Sink(INTERNET) HttpRequest request) throws IOException,ClientProtocolException;
@Source(INTERNET) HttpResponse execute(@Sink(INTERNET) HttpUriRequest request, @Sink(INTERNET) HttpContext context) throws IOException,ClientProtocolException;
}

class BasicResponseHandler{
        BasicResponseHandler();
}

class DefaultHttpClient extends AbstractHttpClient {
    DefaultHttpClient(ClientConnectionManager arg0, HttpParams arg1);
    DefaultHttpClient(HttpParams arg0);
    DefaultHttpClient();
    
    protected HttpParams createHttpParams();
    protected HttpRequestExecutor createRequestExecutor();
    protected ClientConnectionManager createClientConnectionManager();
    protected HttpContext createHttpContext();
    protected ConnectionReuseStrategy createConnectionReuseStrategy();
    protected ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy();
    protected AuthSchemeRegistry createAuthSchemeRegistry();
    protected CookieSpecRegistry createCookieSpecRegistry();
    protected BasicHttpProcessor createHttpProcessor();
    protected HttpRequestRetryHandler createHttpRequestRetryHandler();
    protected RedirectHandler createRedirectHandler();
    protected AuthenticationHandler createTargetAuthenticationHandler();
    protected AuthenticationHandler createProxyAuthenticationHandler();
    protected CookieStore createCookieStore();
    protected CredentialsProvider createCredentialsProvider();
    protected HttpRoutePlanner createHttpRoutePlanner();
    protected UserTokenHandler createUserTokenHandler();
}

package org.apache.http.message;

class AbstractHttpMessage{
        void addHeader(String name, String value);
        HttpParams getParams();
        void addHeader(Header header);
        void removeHeaders(String name);
        void setHeader(Header header);
        void setHeader(Header header);
        void setHeader(String name, String value);
        void setHeader(String name, String value);
}

class BasicNameValuePair{

      @PolySource @PolySink  BasicNameValuePair(@PolySource @PolySink String name, @PolySource @PolySink String value);
}


package org.apache.http.params;
class BasicHttpParams{
            BasicHttpParams();
}
class HttpConnectionParams{
            static void setSoTimeout(HttpParams params, int timeout);
            static void setSocketBufferSize(HttpParams params, int size);
            static void setConnectionTimeout(HttpParams params, int timeout);
}
class HttpParams{
            boolean removeParameter(String arg0);
            HttpParams setParameter(String arg0, Object arg1);
}
class HttpProtocolParams{
            static void setUserAgent(HttpParams params, String useragent);
        	static void setHttpElementCharset(HttpParams params, String charset);
       	 	static void setContentCharset(HttpParams params, String charset);
        	static void setVersion(HttpParams params, ProtocolVersion version);
        	static void setUseExpectContinue(HttpParams params, boolean b);
}

package org.apache.http.client.methods;

class HttpRequestBase {
URI getURI();
}
