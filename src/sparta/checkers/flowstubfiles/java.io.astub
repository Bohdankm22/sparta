
package java.io;

class FileOutputStream extends OutputStream {
//Added by SOM
    FileOutputStream(@Sink(FlowPermission.FILESYSTEM) String arg0) throws FileNotFoundException;
    FileOutputStream(@Sink(FlowPermission.FILESYSTEM) String arg0, boolean arg1) throws FileNotFoundException;
    FileOutputStream(@Sink(FlowPermission.FILESYSTEM) File arg0) throws FileNotFoundException;
    FileOutputStream(@Sink(FlowPermission.FILESYSTEM) File arg0, boolean arg1) throws FileNotFoundException;
    FileOutputStream(@Sink(FlowPermission.FILESYSTEM) FileDescriptor arg0);
    void write(@Sink(FlowPermission.FILESYSTEM) int arg0) @Sink(FlowPermission.FILESYSTEM);
    void write(@Sink(FlowPermission.FILESYSTEM) byte @Sink(FlowPermission.FILESYSTEM) [] arg0) @Sink(FlowPermission.FILESYSTEM);
    void write(@Sink(FlowPermission.FILESYSTEM) byte @Sink(FlowPermission.FILESYSTEM) [] arg0, int arg1, int arg2) @Sink(FlowPermission.FILESYSTEM);
    void close() @Sink(FlowPermission.FILESYSTEM);
    @Sink(FlowPermission.FILESYSTEM) FileDescriptor getFD() @Sink(FlowPermission.FILESYSTEM);
    @Sink(FlowPermission.FILESYSTEM) FileChannel getChannel() @Sink(FlowPermission.FILESYSTEM);
    protected void finalize() @Sink(FlowPermission.FILESYSTEM);
}


    

@PolyFlowReceiver	
class File implements Serializable, Comparable<File> {
//Added by smillst
   @Source(FlowPermission.LITERAL) final char separatorChar;
   @Source(FlowPermission.LITERAL)  final String separator;
   @Source(FlowPermission.LITERAL) final char pathSeparatorChar;
   @Source(FlowPermission.LITERAL) final String pathSeparator;
    
    @Source(FlowPermission.FILESYSTEM) File( @Sink(FlowPermission.FILESYSTEM) String path);
    File(String arg0, String arg1);
    @Source(FlowPermission.FILESYSTEM) File( @Sink(FlowPermission.FILESYSTEM) File dir, @Sink(FlowPermission.FILESYSTEM) String path);

    File(URI arg0);
    String getName();
    String getParent();
    File getParentFile();
    String getPath();
    boolean isAbsolute();
    String getAbsolutePath();
    File getAbsoluteFile();
    String getCanonicalPath() throws IOException;
    File getCanonicalFile() throws IOException;
    URL toURL() throws MalformedURLException;
    URI toURI();
    boolean canRead();
    boolean canWrite();
    boolean exists();
    boolean isDirectory();
    boolean isFile();
    boolean isHidden();
    long lastModified();
    long length();
    boolean createNewFile() throws IOException;
    boolean delete();
    void deleteOnExit();
   @PolySource @PolySink   String[] list();
   @PolySource @PolySink   String[] list(FilenameFilter arg0);
    @PolySource @PolySink  File[] listFiles();
     @PolySource @PolySink File[] listFiles(FilenameFilter arg0);
    @PolySource @PolySink  File[] listFiles(FileFilter arg0);
    boolean mkdir();
    boolean mkdirs();
    boolean renameTo(File arg0);
    boolean setLastModified(long arg0);
    boolean setReadOnly();
    boolean setWritable(boolean arg0, boolean arg1);
    boolean setWritable(boolean arg0);
    boolean setReadable(boolean arg0, boolean arg1);
    boolean setReadable(boolean arg0);
    boolean setExecutable(boolean arg0, boolean arg1);
    boolean setExecutable(boolean arg0);
    boolean canExecute();
    static @Source(FlowPermission.FILESYSTEM) File @Source(FlowPermission.FILESYSTEM) [] listRoots();
    long getTotalSpace();
    long getFreeSpace();
    long getUsableSpace();
    static @Source(FlowPermission.FILESYSTEM) File createTempFile(@Sink(FlowPermission.FILESYSTEM) String arg0, @Sink(FlowPermission.FILESYSTEM) String arg1, @Sink(FlowPermission.FILESYSTEM) File arg2) throws IOException;
    static @Source(FlowPermission.FILESYSTEM) File createTempFile(@Sink(FlowPermission.FILESYSTEM) String arg0, @Sink(FlowPermission.FILESYSTEM) String arg1) throws IOException;
    int compareTo(File arg0);
    boolean equals(Object arg0);
    int hashCode();
    String toString();
    Path toPath();
	
}

class ByteArrayOutputStream{
//Added by SOM
   @Source({}) @Sink(FlowPermission.ANY) ByteArrayOutputStream();
   @PolySource @PolySink byte @PolySource @PolySink [] toByteArray() @PolySource @PolySink;
   void close() @Source(FlowPermission.ANY) @Sink({});
}

@PolyFlowReceiver
class PrintWriter extends Writer {
//Added by smillst
    protected Writer out;
    PrintWriter(Writer arg0);
    PrintWriter(Writer arg0, boolean arg1);
    PrintWriter(OutputStream arg0);
    PrintWriter(OutputStream arg0, boolean arg1);
    PrintWriter(String arg0) throws FileNotFoundException;
    PrintWriter(String arg0, String arg1) throws FileNotFoundException,UnsupportedEncodingException;
    PrintWriter(File arg0) throws FileNotFoundException;
    PrintWriter(File arg0, String arg1) throws FileNotFoundException,UnsupportedEncodingException;
    void flush();
    void close();
    boolean checkError();
    protected void setError();
    protected void clearError();
    void write(int arg0);
    void write(char[] arg0, int arg1, int arg2);
    void write(char[] arg0);
    void write(String arg0, int arg1, int arg2);
    void write(String arg0);
    void print(boolean arg0);
    void print(char arg0);
    void print(int arg0);
    void print(long arg0);
    void print(float arg0);
    void print(double arg0);
    void print(char[] arg0);
    void print(String arg0);
    void print(Object arg0);
    void println();
    void println(boolean arg0);
    void println(char arg0);
    void println(int arg0);
    void println(long arg0);
    void println(float arg0);
    void println(double arg0);
    void println(char[] arg0);
    void println(String arg0);
    void println(Object arg0);
    PrintWriter printf(String arg0, Object[] arg1);
    PrintWriter printf(Locale arg0, String arg1, Object[] arg2);
    PrintWriter format(String arg0, Object[] arg1);
    PrintWriter format(Locale arg0, String arg1, Object[] arg2);
    PrintWriter append(CharSequence arg0);
    PrintWriter append(CharSequence arg0, int arg1, int arg2);
    PrintWriter append(char arg0);
}



