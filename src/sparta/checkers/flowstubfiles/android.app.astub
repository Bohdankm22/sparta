
package android.app;

class ActivityGroup{
            protected void onCreate(Bundle savedInstanceState);
}
class ActionBar{
            void setDisplayHomeAsUpEnabled(boolean arg0);
}

class Activity{
//Annotations by SOM
    Activity();

    @Sink(FlowPermission.DISPLAY) View findViewById ( @Sink(FlowPermission.CONDITIONAL) int id);
    @Source(FlowPermission.LITERAL) MenuInflater getMenuInflater (); 
    //The getter and setters on Bundle are marked with source/sink Bundle
    //So although this bundle can be from anywhere, the data pulled from it
    //will be from BUNDLE
	void onCreate(Bundle savedInstanceState);
	void setContentView(@Sink(FlowPermission.DISPLAY) int layout);
    void setContentView (@Sink(FlowPermission.DISPLAY) View view);
    void setProgressBarIndeterminateVisibility(@Source(FlowPermission.LITERAL) @Sink(FlowPermission.DISPLAY) boolean visible);
    boolean onOptionsItemSelected(MenuItem item);
    protected void onStop();
    void setRequestedOrientation(int requestedOrientation);
    
    void startActivityForResult(@Sink(FlowPermission.ANY) Intent intent, int requestCode);
    protected void onActivityResult(int requestCode, int resultCode, @Sink(FlowPermission.ANY) Intent data);
        boolean onMenuItemSelected(int featureId, MenuItem item);
        protected Dialog onCreateDialog(int id);
        boolean onCreateOptionsMenu(Menu menu);
        void showDialog(int id);
        SharedPreferences getPreferences(int mode);
        void finish();
          //The getter and setters on Intents are marked with source/sink INTENT
    //So although this intent can be from anywhere, the data pulled from it
    //will be from INTENT
        void startActivity(Intent intent);
        
         protected void onNewIntent(Intent intent);
            protected void onResume();
            Intent getIntent();
            protected void onPause();
            void runOnUiThread(Runnable action);
            
                        void setResult(int resultCode, Intent data);
            Object getSystemService(String name);
            boolean onOptionsItemSelected(MenuItem item);
            boolean isFinishing();
            FragmentManager getFragmentManager();
            void onBackPressed();
            protected void onSaveInstanceState(Bundle outState);
            Window getWindow();
              Activity getParent();
            @Source(DATABASE) Cursor managedQuery(@Sink(DATABASE) Uri uri, @Sink(DATABASE) String[] projection, @Sink(DATABASE) String selection, @Sink(DATABASE) String[] selectionArgs, @Sink(DATABASE) String sortOrder);
            void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo);
            LayoutInflater getLayoutInflater();
            boolean onContextItemSelected(MenuItem item);
            Application getApplication();
                        void setResult(int resultCode);
            void setTitle(CharSequence title);
            boolean dispatchKeyEvent(KeyEvent event);
            ActionBar getActionBar();
            void setTitle(int titleId);
            void onConfigurationChanged(Configuration newConfig);

    
}
class ActivityManager{
                List<RunningServiceInfo> getRunningServices(int maxNum) throws SecurityException;
}

class Application{
            Application();
}

class AlertDialog {

Button getButton(int whichButton);
//Gets one of the buttons used in the dialog.

//ListView getListView();
//Gets the list view used in the dialog.

//boolean onKeyDown(int keyCode, KeyEvent event);
////A key was pressed down.

//boolean onKeyUp(int keyCode, KeyEvent event);
//A key was released.

void setButton(@Sink(FlowPermission.DISPLAY) CharSequence text, Message msg);
//This method was deprecated in API level 3. Use setButton(int, CharSequence, Message); with BUTTON_POSITIVE.

void setButton(int whichButton, @Sink(FlowPermission.DISPLAY) CharSequence text, DialogInterface.OnClickListener listener);
//Set a listener to be invoked when the positive button of the dialog is pressed.

void setButton(@Sink(FlowPermission.DISPLAY) CharSequence text, DialogInterface.OnClickListener listener);
//This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener); with BUTTON_POSITIVE

void setButton(int whichButton, @Sink(FlowPermission.DISPLAY) CharSequence text, Message msg);
//Set a message to be sent when a button is pressed.

//void setButton2(CharSequence text, DialogInterface.OnClickListener listener);
//This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener); with BUTTON_NEGATIVE

//void setButton2(CharSequence text, Message msg);
//This method was deprecated in API level 3. Use setButton(int, CharSequence, Message); with BUTTON_NEGATIVE.

//void setButton3(CharSequence text, DialogInterface.OnClickListener listener);
//This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener); with BUTTON_POSITIVE

//void setButton3(CharSequence text, Message msg);
//This method was deprecated in API level 3. Use setButton(int, CharSequence, Message); with BUTTON_NEUTRAL.

//void setCustomTitle(View customTitleView);

//void setIcon(Drawable icon);

//void setIcon(int resId);
//Set resId to 0 if you don't want an icon.

//void setIconAttribute(int attrId);
//Set an icon as supplied by a theme attribute.

//void setInverseBackgroundForced(boolean forceInverseBackground);

void setMessage(CharSequence message);

void setTitle(@Sink(DISPLAY) CharSequence title);
//Set the title text for this dialog's window.

//void setView(View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom);
//Set the view to display in that dialog, specifying the spacing to appear around that view.

//void setView(View view);
//Set the view to display in that dialog.
           boolean dispatchKeyEvent(KeyEvent event);
            void setTitle(int titleId);
            ActionBar getActionBar();
            void onConfigurationChanged(Configuration newConfig);
            LayoutInflater getLayoutInflater();
            void setResult(int resultCode);


//PROTECTED
void onCreate(Bundle savedInstanceState);
//Similar to onCreate(Bundle);, you should initialize your dialog in this method, including calling setContentView(View);.
}

class AlarmManager{
        void set(int type, long triggerAtTime, @Source(FlowPermission.INTENT) PendingIntent operation);
}

class AlertDialog$Builder {
  //Added by Carl Hartung
  Builder(Context context);
AlertDialog.Builder setTitle(@Sink(FlowPermission.DISPLAY) CharSequence title);
//Set the title displayed in the Dialog.

AlertDialog.Builder setTitle(int titleId);
//Set the title using the given resource id.

AlertDialog.Builder setPositiveButton(int textId, DialogInterface.OnClickListener listener);
//Set a listener to be invoked when the positive button of the dialog is pressed.

AlertDialog.Builder setPositiveButton(@Sink(FlowPermission.DISPLAY) CharSequence text, DialogInterface.OnClickListener listener);
//Set a listener to be invoked when the positive button of the dialog is pressed.

AlertDialog create();
//Creates a AlertDialog with the arguments supplied to this builder.

AlertDialog.Builder setMessage(@Sink(FlowPermission.DISPLAY) CharSequence message);
//Set the message to display.

AlertDialog.Builder setMessage(int messageId);
//Set the message to display using the given resource id.

AlertDialog.Builder setNegativeButton(@Sink(FlowPermission.DISPLAY) CharSequence text, DialogInterface.OnClickListener listener);
//Set a listener to be invoked when the negative button of the dialog is pressed.

AlertDialog.Builder setNegativeButton(int textId, DialogInterface.OnClickListener listener);
//Set a listener to be invoked when the negative button of the dialog is pressed.

AlertDialog show();
//Creates a AlertDialog with the arguments supplied to this builder and show();'s the dialog.
//CSH: this actually shows the dialog on the screen, but if we've properly annotated the rest of the methods here, we shouldn't need to annotate this receiver?

AlertDialog.Builder setView(@Sink(FlowPermission.DISPLAY) View view);
//Set a custom view to be the contents of the Dialog.

AlertDialog.Builder setIcon(@Sink(FlowPermission.DISPLAY) Drawable icon);
//Set the Drawable to be used in the title.

AlertDialog.Builder setIcon(int iconId);
//Set the resource id of the Drawable to be used in the title.

AlertDialog.Builder setCancelable(boolean cancelable);
//Sets whether the dialog is cancelable or not.

AlertDialog.Builder setNeutralButton(int textId, DialogInterface.OnClickListener listener);
//Set a listener to be invoked when the neutral button of the dialog is pressed.

AlertDialog.Builder setNeutralButton(@Sink(FlowPermission.DISPLAY) CharSequence text, DialogInterface.OnClickListener listener);
//Set a listener to be invoked when the neutral button of the dialog is pressed.

AlertDialog.Builder setItems(int itemsId, DialogInterface.OnClickListener listener);
//Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener.

AlertDialog.Builder setItems(@Sink(FlowPermission.DISPLAY) CharSequence[] items, DialogInterface.OnClickListener listener);
//Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener.

AlertDialog.Builder setSingleChoiceItems(@Sink(FlowPermission.DISPLAY) CharSequence[] items, int checkedItem, DialogInterface.OnClickListener listener);
//Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener.

AlertDialog.Builder setSingleChoiceItems(ListAdapter adapter, int checkedItem, DialogInterface.OnClickListener listener);
//Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener.
//CSH: checkedItem is tricky.  The number isn't actually displayed, but it determines which item in the list is 'checked'.  could you leak information by repeatedly loading the dialog with different items checked?

AlertDialog.Builder setSingleChoiceItems(int itemsId, int checkedItem, DialogInterface.OnClickListener listener);
//Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener.

AlertDialog.Builder setSingleChoiceItems(Cursor cursor, int checkedItem, String labelColumn, DialogInterface.OnClickListener listener);
//Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener.

AlertDialog.Builder setOnCancelListener(DialogInterface.OnCancelListener onCancelListener);
//Sets the callback that will be called if the dialog is canceled.

AlertDialog.Builder setOnKeyListener(DialogInterface.OnKeyListener onKeyListener);
//Sets the callback that will be called if a key is dispatched to the dialog.



  
//UNUSED and UNANNOTATED  
// Context getContext();
// AlertDialog.Builder setAdapter(ListAdapter adapter, DialogInterface.OnClickListener listener);
// AlertDialog.Builder setCursor(Cursor cursor, DialogInterface.OnClickListener listener, String labelColumn);
// AlertDialog.Builder setCustomTitle(View customTitleView);
// AlertDialog.Builder setIconAttribute(int attrId);
// AlertDialog.Builder setInverseBackgroundForced(boolean useInverseBackground);
// AlertDialog.Builder setMultiChoiceItems(CharSequence[] items, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener);
// AlertDialog.Builder setMultiChoiceItems(Cursor cursor, String isCheckedColumn, String labelColumn, DialogInterface.OnMultiChoiceClickListener listener);
// AlertDialog.Builder setMultiChoiceItems(int itemsId, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener);
// AlertDialog.Builder setOnDismissListener(DialogInterface.OnDismissListener onDismissListener);
// AlertDialog.Builder setOnItemSelectedListener(AdapterView.OnItemSelectedListener listener);
}


class DatePickerDialog{
            DatePickerDialog(Context context, OnDateSetListener callBack, int year, int monthOfYear, int dayOfMonth);
}

class Dialog {
//void addContentView(View view, ViewGroup.LayoutParams params);
//Add an additional content view to the screen.

void cancel();
//Cancel the dialog.

//void closeOptionsMenu();

void dismiss();
//Dismiss this dialog, removing it from the screen.

//boolean dispatchGenericMotionEvent(MotionEvent ev);
//Called to process generic motion events.

//boolean dispatchKeyEvent(KeyEvent event);
//Called to process key events.

//boolean dispatchKeyShortcutEvent(KeyEvent event);
//Called to process a key shortcut event.

//boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event);
//Called to process population of AccessibilityEvents.

//boolean dispatchTouchEvent(MotionEvent ev);
//Called to process touch screen events.

//boolean dispatchTrackballEvent(MotionEvent ev);
//Called to process trackball events.

View findViewById(int id);
//Finds a view that was identified by the id attribute from the XML that was processed in onStart();.

//ActionBar getActionBar();
//Retrieve the ActionBar attached to this dialog, if present.

final Context getContext();
//Retrieve the Context this Dialog is running in.

//View getCurrentFocus();
//Call getCurrentFocus(); on the Window if this Activity to return the currently focused view.

//LayoutInflater getLayoutInflater();

//final Activity getOwnerActivity();
//Returns the Activity that owns this Dialog.

//final int getVolumeControlStream();

Window getWindow();
//Retrieve the current Window for the activity.

void hide();
//Hide the dialog, but do not dismiss it.

//void invalidateOptionsMenu();

boolean isShowing();

//void onActionModeFinished(ActionMode mode);
//Called when an action mode has been finished. Note that if you override this method you should always call through to the superclass implementation by calling super.onActionModeFinished(mode);.

//void onActionModeStarted(ActionMode mode);
//Called when an action mode has been started. Note that if you override this method you should always call through to the superclass implementation by calling super.onActionModeStarted(mode);.

//void onAttachedToWindow();
//Called when the window has been attached to the window manager.

//void onBackPressed();
//Called when the dialog has detected the user's press of the back key.

//void onContentChanged();
//This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView);.

//boolean onContextItemSelected(MenuItem item);

//void onContextMenuClosed(Menu menu);

//void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo);
//Called when the context menu for this view is being built.

//boolean onCreateOptionsMenu(Menu menu);
//It is usually safe to proxy this call to the owner activity's onCreateOptionsMenu(Menu); if the client desires the same menu for this Dialog.

//boolean onCreatePanelMenu(int featureId, Menu menu);
//Initialize the contents of the menu for panel 'featureId'.

//View onCreatePanelView(int featureId);
//Instantiate the view to display in the panel for 'featureId'.

//void onDetachedFromWindow();
//Called when the window has been attached to the window manager.

//boolean onGenericMotionEvent(MotionEvent event);
//Called when a generic motion event was not handled by any of the views inside of the dialog.

//boolean onKeyDown(int keyCode, KeyEvent event);
//A key was pressed down.

//boolean onKeyLongPress(int keyCode, KeyEvent event);
//Default implementation of KeyEvent.Callback.onKeyLongPress();: always returns false (doesn't handle the event);.

//boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event);
//Default implementation of KeyEvent.Callback.onKeyMultiple();: always returns false (doesn't handle the event);.

//boolean onKeyShortcut(int keyCode, KeyEvent event);
//Called when a key shortcut event is not handled by any of the views in the Dialog.

//boolean onKeyUp(int keyCode, KeyEvent event);
//A key was released.

//boolean onMenuItemSelected(int featureId, MenuItem item);
//Called when a panel's menu item has been selected by the user.

//boolean onMenuOpened(int featureId, Menu menu);
//Called when a panel's menu is opened by the user.

//boolean onOptionsItemSelected(MenuItem item);

//void onOptionsMenuClosed(Menu menu);

//void onPanelClosed(int featureId, Menu menu);
//Called when a panel is being closed.

//boolean onPrepareOptionsMenu(Menu menu);
//It is usually safe to proxy this call to the owner activity's onPrepareOptionsMenu(Menu); if the client desires the same menu for this Dialog.

//boolean onPreparePanel(int featureId, View view, Menu menu);
//Prepare a panel to be displayed.

void onRestoreInstanceState(Bundle savedInstanceState);
//Restore the state of the dialog from a previously saved bundle.

Bundle onSaveInstanceState();
//Saves the state of the dialog into a bundle.

//boolean onSearchRequested();
//This hook is called when the user signals the desire to start a search.

//boolean onTouchEvent(MotionEvent event);
//Called when a touch screen event was not handled by any of the views under it.

//boolean onTrackballEvent(MotionEvent event);
//Called when the trackball was moved and not handled by any of the views inside of the activity.

//void onWindowAttributesChanged(WindowManager.LayoutParams params);
//This is called whenever the current window attributes change.

//void onWindowFocusChanged(boolean hasFocus);
//This hook is called whenever the window focus changes.

//ActionMode onWindowStartingActionMode(ActionMode.Callback callback);
//Called when an action mode is being started for this window.

//void openContextMenu(View view);

//void openOptionsMenu();

//void registerForContextMenu(View view);

final boolean requestWindowFeature(int featureId);
//Enable extended window features.

//void setCancelMessage(Message msg);
//Set a message to be sent when the dialog is canceled.

void setCancelable(boolean flag);
//Sets whether this dialog is cancelable with the BACK key.

//void setCanceledOnTouchOutside(boolean cancel);
//Sets whether this dialog is canceled when touched outside the window's bounds.

void setContentView(@Sink(FlowPermission.DISPLAY) View view);
//Set the screen content to an explicit view.

//void setContentView(int layoutResID);
//Set the screen content from a layout resource.

//void setContentView(View view, ViewGroup.LayoutParams params);
//Set the screen content to an explicit view.

//void setDismissMessage(Message msg);
//Set a message to be sent when the dialog is dismissed.

//final void setFeatureDrawable(int featureId, Drawable drawable);
//Convenience for calling setFeatureDrawable(int, Drawable);.

//final void setFeatureDrawableAlpha(int featureId, int alpha);
//Convenience for calling setFeatureDrawableAlpha(int, int);.

//final void setFeatureDrawableResource(int featureId, int resId);
//Convenience for calling setFeatureDrawableResource(int, int);.

//final void setFeatureDrawableUri(int featureId, Uri uri);
//Convenience for calling setFeatureDrawableUri(int, Uri);.

void setOnCancelListener(DialogInterface.OnCancelListener listener);
//Set a listener to be invoked when the dialog is canceled.

void setOnDismissListener(DialogInterface.OnDismissListener listener);
//Set a listener to be invoked when the dialog is dismissed.

void setOnKeyListener(DialogInterface.OnKeyListener onKeyListener);
//Sets the callback that will be called if a key is dispatched to the dialog.

//void setOnShowListener(DialogInterface.OnShowListener listener);
//Sets a listener to be invoked when the dialog is shown.

final void setOwnerActivity(Activity activity);
//Sets the Activity that owns this dialog.

void setTitle(int titleId);
//Set the title text for this dialog's window.

void setTitle(@Sink(FlowPermission.DISPLAY) CharSequence title);
//Set the title text for this dialog's window.

//final void setVolumeControlStream(int streamType);
//By default, this will use the owner Activity's suggested stream type.

void show();
//Start the dialog and display it on screen.

//void takeKeyEvents(boolean get);
//Request that key events come to this dialog.

//void unregisterForContextMenu(View view);

//PROTECTED
//void onCreate(Bundle savedInstanceState);
//Similar to onCreate(Bundle);, you should initialize your dialog in this method, including calling setContentView(View);.

//void onStart();
//Called when the dialog is starting.

//void onStop();
//Called to tell you that you're stopping.
}

class DialogFragment{
            DialogFragment();
            @Sink(DISPLAY) void show(FragmentManager manager, String tag);
            Dialog onCreateDialog(Bundle savedInstanceState);
                 Dialog getDialog();
            void onCreate(Bundle savedInstanceState);
}

class ExpandableListActivity{
        ExpandableListActivity();
        void setListAdapter(ExpandableListAdapter adapter);
        boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id);
        ExpandableListView getExpandableListView();
}

class Fragment {
     Fragment();
     FragmentManager getFragmentManager();

void dump(@Sink({FlowPermission.FILESYSTEM ,FlowPermission.INTERNET, FlowPermission.WRITE_EXTERNAL_STORAGE}) String prefix, FileDescriptor fd, PrintWriter writer, @Sink({FlowPermission.FILESYSTEM ,FlowPermission.INTERNET, FlowPermission.WRITE_EXTERNAL_STORAGE}) String[] args);
//Print the Fragments's state into the given stream.
//CSH: FileDescriptors are a... "structure representing an open file, an open socket, or another source or sink of bytes"
// vague.  So it seems this would have to support at least writing to disk and sending over network?
//FILESYSTEM INTERNET WRITE_EXTERNAL_STORAGE

//Methods in spreadsheet not found in Fragment or parent classes:
// findFragmentByWho
// getLayoutInflater
// initState
// instantiateChildFragmentManager
// isInBackStack
// performActivityCreated
// performConfigurationChanged
// performContextItemSelected
// performCreate
// performCreateOptionsMenu
// performCreateView
// performDestroy
// performDestroyView
// performLowMemory
// performOptionsItemSelected
// performOptionsMenuClosed
// performPause
// performPrepareOptionsMenu
// performReallyStop
// performResume
// performSaveInstanceState
// performStart
// performStop
// restoreViewState
// setIndex



final FragmentActivity getActivity();
//Return the Activity this fragment is currently associated with.

final Bundle getArguments();
//Return the arguments supplied when the fragment was instantiated, if any.

final Resources getResources();
//Return getActivity();.getResources();.

View getView();
//Get the root view for the fragment's layout (the one returned by onCreateView(LayoutInflater, ViewGroup, Bundle););, if provided.

static Fragment instantiate(Context context, String fname);
//Like instantiate(Context, String, Bundle); but with a null argument Bundle.

static Fragment instantiate(Context context, String fname, Bundle args);
//Create a new instance of a Fragment with the given class name.

final boolean isAdded();
//Return true if the fragment is currently added to its activity.

final boolean isDetached();
//Return true if the fragment has been explicitly detached from the UI.

final boolean isHidden();
//Return true if the fragment has been hidden.

void onActivityCreated(Bundle savedInstanceState);
//Called when the fragment's activity has been created and this fragment's view hierarchy instantiated.

void onActivityResult(int requestCode, int resultCode, Intent data);
//Receive the result from a previous call to startActivityForResult(Intent, int);.

void onAttach(Activity activity);
//Called when a fragment is first attached to its activity.

void onConfigurationChanged(Configuration newConfig);
//Called by the system when the device configuration changes while your component is running.

boolean onContextItemSelected(MenuItem item);
//This hook is Called whenever an item in a context menu is selected.

void onCreate(Bundle savedInstanceState);
//Called to do initial creation of a fragment.

Animation onCreateAnimation(int transit, boolean enter, int nextAnim);
//Called when a fragment loads an animation.

void onCreateOptionsMenu(Menu menu, MenuInflater inflater);
//Initialize the contents of the Activity's standard options menu.

View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
//Called to have the fragment instantiate its user interface view.

void onDestroy();
//Called when the fragment is no longer in use.

void onDestroyOptionsMenu();
//Called when this fragment's option menu items are no longer being included in the overall options menu.

void onDestroyView();
//Called when the view previously created by onCreateView(LayoutInflater, ViewGroup, Bundle); has been detached from the fragment.

void onDetach();
//Called when the fragment is no longer attached to its activity.

void onHiddenChanged(boolean hidden);
//Called when the hidden state (as returned by isHidden(); of the fragment has changed.

void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState);
//Called when a fragment is being created as part of a view layout inflation, typically from setting the content view of an activity.

void onLowMemory();
//This is Called when the overall system is running low on memory, and would like actively running process to try to tighten their belt.

boolean onOptionsItemSelected(MenuItem item);
//This hook is Called whenever an item in your options menu is selected.

void onOptionsMenuClosed(Menu menu);
//This hook is Called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected);.

void onPause();
//Called when the Fragment is no longer resumed.

void onPrepareOptionsMenu(Menu menu);
//Prepare the Screen's standard options menu to be displayed.

void onResume();
//Called when the fragment is visible to the user and actively running.

void onSaveInstanceState(Bundle outState);
//Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted.

void onStart();
//Called when the Fragment is visible to the user.

void onStop();
//Called when the Fragment is no longer started.

void onViewCreated(View view, Bundle savedInstanceState);
//Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle); has returned, but before any saved state has been restored in to the view.

void onViewStateRestored(Bundle savedInstanceState);
//Called when all saved state has been restored into the view hierarchy of the fragment.

void setArguments(Bundle args);
//Supply the construction arguments for this fragment.

void setInitialSavedState(Fragment.SavedState state);
//Set the initial saved state that this Fragment should restore itself from when first being constructed, as returned by FragmentManager.saveFragmentInstanceState.

void setMenuVisibility(boolean menuVisible);
//Set a hint for whether this fragment's menu should be visible.

void setUserVisibleHint(boolean isVisibleToUser);
//Set a hint to the system about whether this fragment's UI is currently visible to the user.

String toString();
//Returns a string containing a concise, human-readable description of this object.





    

//UNUSED AND UNANNOTATED
// final boolean equals(Object o);
// final FragmentManager getChildFragmentManager();
// final FragmentManager getFragmentManager();
// final int getId();
// LoaderManager getLoaderManager();
// final Fragment getParentFragment();
// final boolean getRetainInstance();
// final String getString(int resId);
// final String getString(int resId, Object... formatArgs);
// final String getTag();
// final Fragment getTargetFragment();
// final int getTargetRequestCode();
// final CharSequence getText(int resId);
// boolean getUserVisibleHint();
// void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo);
// void registerForContextMenu(View view);
// void setHasOptionsMenu(boolean hasMenu);
// void setRetainInstance(boolean retain);
// void setTargetFragment(Fragment fragment, int requestCode);
// void startActivity(Intent intent);
// void startActivityForResult(Intent intent, int requestCode);
// void unregisterForContextMenu(View view);
}

class FragmentManager {
//abstract void addOnBackStackChangedListener(FragmentManager.OnBackStackChangedListener listener);
//Add a new listener for changes to the fragment back stack.

abstract FragmentTransaction beginTransaction();
//Start a series of edit operations on the Fragments associated with this FragmentManager.

//abstract void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args);
//Print the FragmentManager's state into the given stream.

//static void enableDebugLogging(boolean enabled);
//Control whether the framework's internal fragment manager debugging logs are turned on.

abstract boolean executePendingTransactions();
//After a FragmentTransaction is committed with FragmentTransaction.commit();, it is scheduled to be executed asynchronously on the process's main thread.

//abstract Fragment findFragmentById(int id);
//Finds a fragment that was identified by the given id either when inflated from XML or as the container ID when added in a transaction.

abstract Fragment findFragmentByTag(String tag);
//Finds a fragment that was identified by the given tag either when inflated from XML or as supplied when added in a transaction.

//abstract FragmentManager.BackStackEntry getBackStackEntryAt(int index);
//Return the BackStackEntry at index index in the back stack; entries start index 0 being the bottom of the stack.

//abstract int getBackStackEntryCount();
//Return the number of entries currently in the back stack.

abstract Fragment getFragment(Bundle bundle, String key);
//Retrieve the current Fragment instance for a reference previously placed with putFragment(Bundle, String, Fragment);.

abstract void popBackStack();
//Pop the top state off the back stack.

abstract void popBackStack(String name, int flags);
//Pop the last fragment transition from the manager's fragment back stack.

abstract void popBackStack(int id, int flags);
//Pop all back stack states up to the one with the given identifier.

//abstract boolean popBackStackImmediate(int id, int flags);
//Like popBackStack(int, int);, but performs the operation immediately inside of the call.

//abstract boolean popBackStackImmediate(String name, int flags);
//Like popBackStack(String, int);, but performs the operation immediately inside of the call.

//abstract boolean popBackStackImmediate();
//Like popBackStack();, but performs the operation immediately inside of the call.

abstract void putFragment(Bundle bundle, String key, Fragment fragment);
//Put a reference to a fragment in a Bundle.

//abstract void removeOnBackStackChangedListener(FragmentManager.OnBackStackChangedListener listener);
//Remove a listener that was previously added with addOnBackStackChangedListener(OnBackStackChangedListener);.

abstract Fragment.SavedState saveFragmentInstanceState(Fragment f);
//Save the current instance state of the given Fragment.

}

class FragmentTransaction {
FragmentTransaction replace(int arg0, @Sink(DISPLAY) Fragment arg1);

abstract FragmentTransaction add(@Sink(DISPLAY) Fragment fragment, String tag);
//Calls add(int, Fragment, String); with a 0 containerViewId.

abstract FragmentTransaction add(int containerViewId, @Sink(DISPLAY) Fragment fragment);
//Calls add(int, Fragment, String); with a null tag.

abstract FragmentTransaction add(int containerViewId, @Sink(DISPLAY) Fragment fragment, String tag);
//Add a fragment to the activity state.

//abstract FragmentTransaction addToBackStack(String name);
//Add this transaction to the back stack.

abstract FragmentTransaction attach(@Sink(DISPLAY) Fragment fragment);
//Re-attach a fragment after it had previously been deatched from the UI with detach(Fragment);.

abstract int commit();
//Schedules a commit of this transaction.

abstract int commitAllowingStateLoss();
//Like commit(); but allows the commit to be executed after an activity's state is saved.

abstract FragmentTransaction detach(Fragment fragment);
//Detach the given fragment from the UI.

//abstract FragmentTransaction disallowAddToBackStack();
//Disallow calls to addToBackStack(String);.

//abstract FragmentTransaction hide(Fragment fragment);
//Hides an existing fragment.

//abstract boolean isAddToBackStackAllowed();
//Returns true if this FragmentTransaction is allowed to be added to the back stack.

//abstract boolean isEmpty();

abstract FragmentTransaction remove(Fragment fragment);
//Remove an existing fragment.

//abstract FragmentTransaction replace(int containerViewId, Fragment fragment, String tag);
//Replace an existing fragment that was added to a container.

//abstract FragmentTransaction replace(int containerViewId, Fragment fragment);
//Calls replace(int, Fragment, String); with a null tag.

//abstract FragmentTransaction setBreadCrumbShortTitle(int res);
//Set the short title to show as a bread crumb when this transaction is on the back stack.

//abstract FragmentTransaction setBreadCrumbShortTitle(CharSequence text);
//Like setBreadCrumbShortTitle(int); but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes.

//abstract FragmentTransaction setBreadCrumbTitle(CharSequence text);
//Like setBreadCrumbTitle(int); but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes.

//abstract FragmentTransaction setBreadCrumbTitle(int res);
//Set the full title to show as a bread crumb when this transaction is on the back stack.

//abstract FragmentTransaction setCustomAnimations(int enter, int exit, int popEnter, int popExit);
//Set specific animation resources to run for the fragments that are entering and exiting in this transaction.

//abstract FragmentTransaction setCustomAnimations(int enter, int exit);
//Set specific animation resources to run for the fragments that are entering and exiting in this transaction.

//abstract FragmentTransaction setTransition(int transit);
//Select a standard transition animation for this transaction.

//abstract FragmentTransaction setTransitionStyle(int styleRes);
//Set a custom style resource that will be used for resolving transit animations.

//abstract FragmentTransaction show(Fragment fragment);
//Shows a previously hidden fragment.

}

class IntentService{
        IntentService(String name);
        protected void onHandleIntent(@Source(FlowPermission.INTENT) Intent arg0);
}

class ListActivity{
        ListActivity();
        protected void onListItemClick(ListView l, View v, int position, long id);
        void setListAdapter(ListAdapter adapter);
        ListView getListView();
        ListAdapter getListAdapter();
}

class ListFragment {
//CSH: in spreadsheet, not found in API
//ensureList
    

//ListAdapter getListAdapter();
//Get the ListAdapter associated with this activity's ListView.

//ListView getListView();
//Get the activity's list view widget.

//long getSelectedItemId();
//Get the cursor row ID of the currently selected list item.

//int getSelectedItemPosition();
//Get the position of the currently selected list item.

//View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
//Provide default implementation to return a simple list view.

//void onDestroyView();
//Detach from list view.

//void onListItemClick(ListView l, View v, int position, long id);
//This method will be called when an item in the list is selected.

//void onViewCreated(View view, Bundle savedInstanceState);
//Attach to list view once the view hierarchy has been created.

//void setEmptyText(CharSequence text);
//The default content for a ListFragment has a TextView that can be shown when the list is empty.

void setListAdapter(ListAdapter adapter);
//Provide the cursor for the list view.

void setListShown(boolean shown);
//Control whether the list is being displayed.

//void setListShownNoAnimation(boolean shown);
//Like setListShown(boolean);, but no animation is used when transitioning from the previous state.

//void setSelection(int position);
//Set the currently selected list item to the specified position with the adapter's data
}

class Notification{
            Notification(int icon, @Sink(DISPLAY) CharSequence tickerText, long when);
            void setLatestEventInfo(Context context, @Sink(DISPLAY) CharSequence contentTitle, @Sink(DISPLAY) CharSequence contentText, PendingIntent contentIntent);
}

class NotificationManager{
            void cancel(int id);
            void notify(int id, @Sink(DISPLAY) Notification notification);
}

class Notification$Builder {

Notification.Builder addAction(@Sink(FlowPermission.DISPLAY) int icon, @Sink(FlowPermission.DISPLAY) CharSequence title, PendingIntent intent);
//Add an action to this notification.

Notification build();
//Combine all of the options that have been set and return a new Notification object.

Notification getNotification();
//This method was deprecated in API level 16. Use build(); instead.

Notification.Builder setAutoCancel(boolean autoCancel);
//Make this notification automatically dismissed when the user touches it.

Notification.Builder setContent(@Sink(FlowPermission.DISPLAY) RemoteViews views);
//Supply a custom RemoteViews to use instead of the platform template.

Notification.Builder setContentInfo(@Sink(FlowPermission.DISPLAY) CharSequence info);
//A small piece of additional information pertaining to this notification.

Notification.Builder setContentIntent(PendingIntent intent);
//Supply a PendingIntent to be sent when the notification is clicked.

Notification.Builder setContentText(@Sink(FlowPermission.DISPLAY) CharSequence text);
//Set the second line of text in the platform notification template.

Notification.Builder setContentTitle(@Sink(FlowPermission.DISPLAY) CharSequence title);
//Set the first line of text in the platform notification template.

Notification.Builder setDefaults(int defaults);
//Set which notification properties will be inherited from system defaults.

Notification.Builder setDeleteIntent(PendingIntent intent);
//Supply a PendingIntent to send when the notification is cleared explicitly by the user.

Notification.Builder setFullScreenIntent(PendingIntent intent, boolean highPriority);
//An intent to launch instead of posting the notification to the status bar.

Notification.Builder setLargeIcon(@Sink(FlowPermission.DISPLAY) Bitmap icon);
//Add a large icon to the notification (and the ticker on some devices);.

Notification.Builder setLights(int argb, int onMs, int offMs);
//Set the desired color for the indicator LED on the device, as well as the blink duty cycle (specified in milliseconds);.

Notification.Builder setNumber(int number);
//Set the large number at the right-hand side of the notification.

Notification.Builder setOngoing(boolean ongoing);
//Set whether this is an "ongoing" notification.

Notification.Builder setOnlyAlertOnce(boolean onlyAlertOnce);
//Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.

Notification.Builder setPriority(int pri);
//Set the priority of this notification.

Notification.Builder setProgress(@Sink(FlowPermission.DISPLAY) int max, @Sink(FlowPermission.DISPLAY) int progress, boolean indeterminate);
//Set the progress this notification represents.

//Notification.Builder setShowWhen(boolean show);
//Control whether the timestamp set with setWhen is shown in the content view.

Notification.Builder setSmallIcon(@Sink(FlowPermission.DISPLAY) int icon, int level);
//A variant of setSmallIcon(int); that takes an additional level parameter for when the icon is a LevelListDrawable.

Notification.Builder setSmallIcon(@Sink(FlowPermission.DISPLAY) int icon);
//Set the small icon resource, which will be used to represent the notification in the status bar.

Notification.Builder setSound(Uri sound);
//Set the sound to play.
//CSH: Do we need an AUDIO sink?

Notification.Builder setSound(Uri sound, int streamType);
//Set the sound to play, along with a specific stream on which to play it.
//CSH: Audio sink?

//Notification.Builder setStyle(Notification.Style style);
//Add a rich notification style to be applied at build time.

Notification.Builder setSubText(@Sink(FlowPermission.DISPLAY) CharSequence text);
//Set the third line of text in the platform notification template.

Notification.Builder setTicker(@Sink(FlowPermission.DISPLAY) CharSequence tickerText, @Sink(FlowPermission.DISPLAY) RemoteViews views);
//Set the text that is displayed in the status bar when the notification first arrives, and also a RemoteViews object that may be displayed instead on some devices.

Notification.Builder setTicker(@Sink(FlowPermission.DISPLAY) CharSequence tickerText);
//Set the "ticker" text which is displayed in the status bar when the notification first arrives.

Notification.Builder setUsesChronometer(boolean b);
//Show the when field as a stopwatch.

Notification.Builder setVibrate(@Sink(FlowPermission.VIBRATE) long[] pattern);
//Set the vibration pattern to use.

Notification.Builder setWhen(long when);
//Add a timestamp pertaining to the notification (usually the time the event occurred);.

}
class PendingIntent{
            static PendingIntent getActivity(Context context, int requestCode, @Source(FlowPermission.INTENT) Intent intent, int flags);
            static PendingIntent getBroadcast(Context context, int requestCode, @Source(FlowPermission.INTENT) Intent intent, int flags);
    //2 (cancel)
        void cancel();
}

class ProgressDialog {
ProgressDialog(Context context);
static ProgressDialog show(Context context, @Sink(FlowPermission.DISPLAY) CharSequence title, @Sink(FlowPermission.DISPLAY) CharSequence message);
static ProgressDialog show(Context context, @Sink(FlowPermission.DISPLAY) CharSequence title, @Sink(FlowPermission.DISPLAY) CharSequence message, boolean indeterminate, boolean cancelable);
static ProgressDialog show(Context context, @Sink(FlowPermission.DISPLAY) CharSequence title, @Sink(FlowPermission.DISPLAY) CharSequence message, boolean indeterminate, boolean cancelable, DialogInterface.OnCancelListener cancelListener);
static ProgressDialog show(Context context, @Sink(FlowPermission.DISPLAY) CharSequence title, @Sink(FlowPermission.DISPLAY) CharSequence message, boolean indeterminate);
void setMessage(@Sink(FlowPermission.DISPLAY) CharSequence message);
void setProgress(@Sink(FlowPermission.DISPLAY) int value);
void setMax(@Sink(FlowPermission.DISPLAY) int max);
void setProgressStyle(int style);


// UNUSED AND UNANNOTATED
// int getMax();
// int getProgress();
// int getSecondaryProgress();
// void incrementProgressBy(int diff);
// void incrementSecondaryProgressBy(int diff);
// boolean isIndeterminate();
// void onStart();
// Called when the dialog is starting.
// void setIndeterminate(boolean indeterminate);
// void setIndeterminateDrawable(Drawable d);
// void setProgressDrawable(Drawable d);
// void setProgressNumberFormat(String format);
// Change the format of the small text showing current and maximum units of progress.
// void setProgressPercentFormat(NumberFormat format);
// Change the format of the small text showing the percentage of progress.
// void setSecondaryProgress(int secondaryProgress);

}

class Service{
            IBinder onBind(Intent arg0);
            void onStart(Intent intent, int startId);
            Service();
            void onDestroy();
            void onCreate();
            int onStartCommand(Intent intent, int flags, int startId);
      	  void stopSelf();
       	 Application getApplication();
}

class TabActivity{
            TabHost getTabHost();
            TabActivity();
}



