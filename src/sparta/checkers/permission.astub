package android.accessibilityservice;

class AccessibilityService {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

package android.accounts;

class AbstractAccountAuthenticator {
	@requestPermission(android.permission.ACCOUNT_MANAGER) public checkBinderPermission();
	@requestPermission(android.permission.ACCOUNT_MANAGER) public confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String []);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
}

class AbstractAccountAuthenticator$Transport {
	@requestPermission(android.permission.ACCOUNT_MANAGER) public addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String [],android.os.Bundle);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String []);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
}

class AbstractAccountAuthenticator {
	@requestPermission(android.permission.ACCOUNT_MANAGER) public addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String [],android.os.Bundle);
}

class AccountAuthenticatorActivity {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(boolean);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class AccountManager {
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public addAccount(java.lang.String,java.lang.String,java.lang.String [],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.GET_ACCOUNTS) public addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean);
	@requestPermission(android.permission.USE_CREDENTIALS) public blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public clearPassword(android.accounts.Account);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.GET_ACCOUNTS) public getAccounts();
	@requestPermission(android.permission.GET_ACCOUNTS) public getAccountsByType(java.lang.String);
	@requestPermission(android.permission.GET_ACCOUNTS) public getAccountsByTypeAndFeatures(java.lang.String,java.lang.String [],android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.USE_CREDENTIALS) public getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.USE_CREDENTIALS) public getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.GET_ACCOUNTS) public getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String [],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public getPassword(android.accounts.Account);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public getUserData(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.GET_ACCOUNTS) public hasFeatures(android.accounts.Account,java.lang.String [],android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS) public invalidateAuthToken(java.lang.String,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public peekAuthToken(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setAuthToken(android.accounts.Account,java.lang.String,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setPassword(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setUserData(android.accounts.Account,java.lang.String,java.lang.String);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
}

class AccountManager$AmsTask {
	@requestPermission(android.permission.GET_ACCOUNTS, android.permission.MANAGE_ACCOUNTS) public doWork();
	@requestPermission(android.permission.GET_ACCOUNTS, android.permission.MANAGE_ACCOUNTS) public start();
}

class AccountManager$GetAuthTokenByTypeAndFeaturesTask {
	@requestPermission(android.permission.GET_ACCOUNTS, android.permission.MANAGE_ACCOUNTS) public doWork();
	@requestPermission(android.permission.GET_ACCOUNTS, android.permission.MANAGE_ACCOUNTS) public start();
}

class AccountManagerService {
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public addAccount(android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String [],boolean,android.os.Bundle);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public checkAuthenticateAccountsPermission(android.accounts.Account);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public checkManageAccountsOrUseCredentialsPermissions();
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public checkManageAccountsPermission();
	@requestPermission(android.permission.GET_ACCOUNTS) public checkReadAccountsPermission();
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public clearPassword(android.accounts.Account);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean);
	@requestPermission(android.permission.GET_ACCOUNTS) public getAccounts(java.lang.String);
	@requestPermission(android.permission.GET_ACCOUNTS) public getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String []);
	@requestPermission(android.permission.USE_CREDENTIALS) public getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public getPassword(android.accounts.Account);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public getUserData(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.GET_ACCOUNTS) public hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String []);
	@requestPermission(android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS) public invalidateAuthToken(java.lang.String,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public peekAuthToken(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setAuthToken(android.accounts.Account,java.lang.String,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setPassword(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setUserData(android.accounts.Account,java.lang.String,java.lang.String);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle);
}

class AccountManagerService$SimWatcher {
	@requestPermission(android.permission.READ_PHONE_STATE) public onReceive(android.content.Context,android.content.Intent);
}

class GrantCredentialsPermissionActivity {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(boolean);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class IAccountAuthenticator$Stub$Proxy {
	@requestPermission(android.permission.ACCOUNT_MANAGER) public addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String [],android.os.Bundle);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String []);
	@requestPermission(android.permission.ACCOUNT_MANAGER) public updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
}

class IAccountManager$Stub$Proxy {
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public addAccount(android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String [],boolean,android.os.Bundle);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public clearPassword(android.accounts.Account);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean);
	@requestPermission(android.permission.GET_ACCOUNTS) public getAccounts(java.lang.String);
	@requestPermission(android.permission.GET_ACCOUNTS) public getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String []);
	@requestPermission(android.permission.USE_CREDENTIALS) public getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public getPassword(android.accounts.Account);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public getUserData(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.GET_ACCOUNTS) public hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String []);
	@requestPermission(android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS) public invalidateAuthToken(java.lang.String,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public peekAuthToken(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setAuthToken(android.accounts.Account,java.lang.String,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setPassword(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.AUTHENTICATE_ACCOUNTS) public setUserData(android.accounts.Account,java.lang.String,java.lang.String);
	@requestPermission(android.permission.MANAGE_ACCOUNTS) public updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle);
}

package android.app;

class Activity {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission() public sendBroadcast(android.content.Intent);
	@requestPermission() public sendOrderedBroadcast(android.content.Intent,java.lang.String);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.INTERNET, NONE) public setContentView(int);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(boolean);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
	@requestPermission() public startActivity(android.content.Intent);
	@requestPermission() public startActivityForResult(android.content.Intent,int);
	@requestPermission() public startActivityFromChild(android.app.Activity,android.content.Intent,int);
	@requestPermission() public startActivityIfNeeded(android.content.Intent,int);
}

class ActivityGroup {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(boolean);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class ActivityManager {
	@requestPermission(android.permission.CLEAR_APP_USER_DATA) public clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.FORCE_STOP_PACKAGES) public forceStopPackage(java.lang.String);
	@requestPermission(android.permission.GET_TASKS) public getRecentTasks(int,int);
	@requestPermission(android.permission.GET_TASKS) public getRunningTasks(int);
	@requestPermission(android.permission.RESTART_PACKAGES, android.permission.KILL_BACKGROUND_PROCESSES) public killBackgroundProcesses(java.lang.String);
	@requestPermission(android.permission.RESTART_PACKAGES, android.permission.KILL_BACKGROUND_PROCESSES) public restartPackage(java.lang.String);
}

class ActivityManagerNative {
	@requestPermission(android.permission.CLEAR_APP_USER_DATA) public clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.FORCE_STOP_PACKAGES) public forceStopPackage(java.lang.String);
	@requestPermission(android.permission.GET_TASKS) public getRecentTasks(int,int);
	@requestPermission(android.permission.GET_TASKS) public getRunningTasks(int);
	@requestPermission(android.permission.RESTART_PACKAGES, android.permission.KILL_BACKGROUND_PROCESSES) public killBackgroundProcesses(java.lang.String);
	@requestPermission(android.permission.RESTART_PACKAGES, android.permission.KILL_BACKGROUND_PROCESSES) public restartPackage(java.lang.String);
}

package android.app.admin;

class DevicePolicyManager {
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback);
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public reportFailedPasswordAttempt();
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public reportSuccessfulPasswordAttempt();
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public setActiveAdmin(android.content.ComponentName);
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public setActivePasswordState(int,int);
}

class IDevicePolicyManager$Stub$Proxy {
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback);
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public reportFailedPasswordAttempt();
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public reportSuccessfulPasswordAttempt();
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public setActiveAdmin(android.content.ComponentName);
	@requestPermission(android.permission.BIND_DEVICE_ADMIN) public setActivePasswordState(int,int);
}

package android.app;

class AlarmManager {
	@requestPermission(android.permission.SET_TIME) public setTime(long);
	@requestPermission(android.permission.SET_TIME_ZONE) public setTimeZone(java.lang.String);
}

class AliasActivity {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(boolean);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class Application {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

package android.app.backup;

class BackupAgent {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class BackupAgentHelper {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class BackupManager {
	@requestPermission(android.permission.BACKUP) public beginRestoreSession();
	@requestPermission(android.permission.BACKUP, NONE) public dataChanged(java.lang.String);
	@requestPermission(android.permission.BACKUP) public requestRestore(android.app.backup.RestoreObserver);
}

class IBackupManager$Stub$Proxy {
	@requestPermission(android.permission.BACKUP) public backupNow();
	@requestPermission(android.permission.BACKUP) public beginRestoreSession(java.lang.String);
	@requestPermission(android.permission.BACKUP) public clearBackupData(java.lang.String);
	@requestPermission(android.permission.BACKUP, NONE) public dataChanged(java.lang.String);
	@requestPermission(android.permission.BACKUP) public getCurrentTransport();
	@requestPermission(android.permission.BACKUP) public isBackupEnabled();
	@requestPermission(android.permission.BACKUP) public listAllTransports();
	@requestPermission(android.permission.BACKUP) public selectBackupTransport(java.lang.String);
	@requestPermission(android.permission.BACKUP AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS) public setAutoRestore(boolean);
	@requestPermission(android.permission.BACKUP AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS) public setBackupEnabled(boolean);
}

package android.app;

class ContextImpl {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class ContextImpl$ApplicationContentResolver {
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long);
	@requestPermission(android.permission.READ_SYNC_STATS) public getCurrentSync();
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getIsSyncable(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getMasterSyncAutomatically();
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getPeriodicSyncs(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getSyncAutomatically(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public getSyncStatus(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public isSyncActive(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public isSyncPending(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_CONTACTS) public openFileDescriptor(android.net.Uri,java.lang.String);
	@requestPermission(android.permission.READ_CONTACTS) public openInputStream(android.net.Uri);
	@requestPermission(android.permission.READ_CONTACTS) public openOutputStream(android.net.Uri);
	@requestPermission(android.permission.READ_CONTACTS) public query(android.net.Uri,java.lang.String [],java.lang.String,java.lang.String [],java.lang.String);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setIsSyncable(android.accounts.Account,java.lang.String,int);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setMasterSyncAutomatically(boolean);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setSyncAutomatically(android.accounts.Account,java.lang.String,boolean);
}

class ContextImpl$ApplicationPackageManager {
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName);
	@requestPermission(android.permission.CLEAR_APP_USER_DATA) public clearApplicationUserData(String,IPackageDataObserver);
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public clearPackagePreferredActivities(String);
	@requestPermission(android.permission.DELETE_CACHE_FILES) public deleteApplicationCacheFiles(String,IPackageDataObserver);
	@requestPermission(android.permission.DELETE_PACKAGES) public deletePackage(String,IPackageDeleteObserver,int);
	@requestPermission(android.permission.CLEAR_APP_CACHE) public freeStorage(long,IntentSender);
	@requestPermission(android.permission.CLEAR_APP_CACHE) public freeStorageAndNotify(long,IPackageDataObserver);
	@requestPermission(android.permission.GET_PACKAGE_SIZE) public getPackageSizeInfo(String,IPackageStatsObserver);
	@requestPermission(android.permission.INSTALL_PACKAGES) public installPackage(Uri,IPackageInstallObserver,int,String);
	@requestPermission(android.permission.MOVE_PACKAGE) public movePackage(String,IPackageMoveObserver,int);
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public replacePreferredActivity(IntentFilter,int,ComponentName[],ComponentName);
	@requestPermission(android.permission.CHANGE_COMPONENT_ENABLED_STATE) public setApplicationEnabledSetting(String,int,int);
	@requestPermission(android.permission.CHANGE_COMPONENT_ENABLED_STATE) public setComponentEnabledSetting(ComponentName,int,int);
}

class ExpandableListActivity {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(boolean);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class FullBackupAgent {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class IActivityManager$Stub$Proxy {
	@requestPermission(android.permission.BACKUP) public bindBackupAgent(android.content.pm.ApplicationInfo,int);
	@requestPermission(android.permission.CLEAR_APP_USER_DATA) public clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.FORCE_STOP_PACKAGES) public forceStopPackage(java.lang.String);
	@requestPermission(android.permission.GET_TASKS) public getRecentTasks(int,int);
	@requestPermission(android.permission.GET_TASKS) public getTasks(int,int,android.app.IThumbnailReceiver);
	@requestPermission(android.permission.KILL_BACKGROUND_PROCESSES, android.permission.RESTART_PACKAGES) public killBackgroundProcesses(java.lang.String);
	@requestPermission(android.permission.REORDER_TASKS) public moveTaskBackwards(int);
	@requestPermission(android.permission.REORDER_TASKS) public moveTaskToBack(int);
	@requestPermission(android.permission.REORDER_TASKS) public moveTaskToFront(int);
	@requestPermission(android.permission.SET_ACTIVITY_WATCHER) public profileControl(java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor);
	@requestPermission(android.permission.STOP_APP_SWITCHES) public resumeAppSwitches();
	@requestPermission(android.permission.SET_ACTIVITY_WATCHER) public setActivityController(android.app.IActivityController);
	@requestPermission(android.permission.SET_ALWAYS_FINISH) public setAlwaysFinish(boolean);
	@requestPermission(android.permission.SET_DEBUG_APP) public setDebugApp(java.lang.String,boolean,boolean);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(android.os.IBinder,boolean);
	@requestPermission(android.permission.SET_PROCESS_LIMIT) public setProcessForeground(android.os.IBinder,int,boolean);
	@requestPermission(android.permission.SET_PROCESS_LIMIT) public setProcessLimit(int);
	@requestPermission(android.permission.SHUTDOWN) public shutdown(int);
	@requestPermission(android.permission.SIGNAL_PERSISTENT_PROCESSES) public signalPersistentProcesses(int);
	@requestPermission(android.permission.STOP_APP_SWITCHES) public stopAppSwitches();
	@requestPermission(android.permission.BROADCAST_STICKY) public unbroadcastIntent(android.app.IApplicationThread,android.content.Intent);
	@requestPermission(android.permission.FORCE_BACK) public unhandledBack(int);
	@requestPermission(android.permission.CHANGE_CONFIGURATION) public updateConfiguration(android.content.res.Configuration);
}

class IAlarmManager$Stub$Proxy {
	@requestPermission(android.permission.SET_TIME) public setTime(long);
	@requestPermission(android.permission.SET_TIME_ZONE) public setTimeZone(java.lang.String);
}

class Instrumentation {
	@requestPermission(android.permission.INJECT_EVENTS) public invokeContextMenuAction(android.app.Activity,int,int);
	@requestPermission(android.permission.INJECT_EVENTS) public sendCharacterSync(int);
	@requestPermission(android.permission.INJECT_EVENTS) public sendKeyDownUpSync(int);
	@requestPermission(android.permission.INJECT_EVENTS) public sendKeySync(android.view.KeyEvent);
	@requestPermission(android.permission.INJECT_EVENTS) public sendPointerSync(android.view.MotionEvent);
	@requestPermission(android.permission.INJECT_EVENTS) public sendStringSync(java.lang.String);
	@requestPermission(android.permission.INJECT_EVENTS) public sendTrackballEventSync(android.view.MotionEvent);
}

class IntentService {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class IStatusBar$Stub$Proxy {
	@requestPermission(android.permission.EXPAND_STATUS_BAR) public activate();
	@requestPermission(android.permission.STATUS_BAR) public addIcon(java.lang.String,java.lang.String,int,int);
	@requestPermission(android.permission.EXPAND_STATUS_BAR) public deactivate();
	@requestPermission(android.permission.STATUS_BAR) public disable(int,android.os.IBinder,java.lang.String);
	@requestPermission(android.permission.STATUS_BAR) public removeIcon(android.os.IBinder);
	@requestPermission(android.permission.EXPAND_STATUS_BAR) public toggle();
	@requestPermission(android.permission.STATUS_BAR) public updateIcon(android.os.IBinder,java.lang.String,java.lang.String,int,int);
}

class IWallpaperManager$Stub$Proxy {
	@requestPermission(android.permission.SET_WALLPAPER_HINTS) public setDimensionHints(int,int);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.lang.String);
	@requestPermission(android.permission.SET_WALLPAPER_COMPONENT) public setWallpaperComponent(android.content.ComponentName);
}

class KeyguardManager {
	@requestPermission(android.permission.DISABLE_KEYGUARD) public exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult);
}

class KeyguardManager$KeyguardLock {
	@requestPermission(android.permission.DISABLE_KEYGUARD) public disableKeyguard();
	@requestPermission(android.permission.DISABLE_KEYGUARD) public reenableKeyguard();
}

class ListActivity {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(boolean);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class NotificationManager {
	@requestPermission(android.permission.VIBRATE, NONE) public notify(int,android.app.Notification);
	@requestPermission(android.permission.VIBRATE, NONE) public notify(java.lang.String,int,android.app.Notification);
}

class Service {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission() public sendBroadcast(android.content.Intent);
	@requestPermission() public sendOrderedBroadcast(android.content.Intent,java.lang.String);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
	@requestPermission() public startActivity(android.content.Intent);
	@requestPermission() public startService(android.content.Intent);
}

class StatusBarManager {
	@requestPermission(android.permission.STATUS_BAR) public addIcon(java.lang.String,int,int);
	@requestPermission(android.permission.EXPAND_STATUS_BAR) public collapse();
	@requestPermission(android.permission.STATUS_BAR) public disable(int);
	@requestPermission(android.permission.EXPAND_STATUS_BAR) public expand();
	@requestPermission(android.permission.STATUS_BAR) public removeIcon(android.os.IBinder);
	@requestPermission(android.permission.EXPAND_STATUS_BAR) public toggle();
	@requestPermission(android.permission.STATUS_BAR) public updateIcon(android.os.IBinder,java.lang.String,int,int);
}

class TabActivity {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.PERSISTENT_ACTIVITY) public setPersistent(boolean);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class WallpaperManager {
	@requestPermission(android.permission.SET_WALLPAPER) public clear();
	@requestPermission(android.permission.SET_WALLPAPER) public setBitmap(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setResource(int);
	@requestPermission(android.permission.SET_WALLPAPER) public setStream(java.io.InputStream);
	@requestPermission(android.permission.SET_WALLPAPER_HINTS) public suggestDesiredDimensions(int,int);
}

package android.appwidget;

class AppWidgetManager {
	@requestPermission(android.permission.BIND_APPWIDGET) public bindAppWidgetId(int,android.content.ComponentName);
}

package android.bluetooth;

class BluetoothA2dp {
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH) public connectSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH) public disconnectSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public getConnectedSinks();
	@requestPermission(android.permission.BLUETOOTH) public getNonDisconnectedSinks();
	@requestPermission(android.permission.BLUETOOTH) public getSinkPriority(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public getSinkState(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public isSinkConnected(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public resumeSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS) public setSinkPriority(android.bluetooth.BluetoothDevice,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public suspendSink(android.bluetooth.BluetoothDevice);
}

class BluetoothAdapter {
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelDiscovery();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public disable();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public enable();
	@requestPermission(android.permission.BLUETOOTH) public getAddress();
	@requestPermission(android.permission.BLUETOOTH) public getBondedDevices();
	@requestPermission(android.permission.BLUETOOTH) public getDiscoverableTimeout();
	@requestPermission(android.permission.BLUETOOTH) public getName();
	@requestPermission(android.permission.BLUETOOTH) public getScanMode();
	@requestPermission(android.permission.BLUETOOTH) public getState();
	@requestPermission(android.permission.BLUETOOTH) public isDiscovering();
	@requestPermission(android.permission.BLUETOOTH) public isEnabled();
	@requestPermission(android.permission.BLUETOOTH) public listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH) public setDiscoverableTimeout(int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH) public setName(java.lang.String);
	@requestPermission(android.permission.WRITE_SECURE_SETTINGS, android.permission.BLUETOOTH) public setScanMode(int,int);
	@requestPermission(android.permission.WRITE_SECURE_SETTINGS, android.permission.BLUETOOTH) public setScanMode(int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public startDiscovery();
}

class BluetoothDevice {
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelBondProcess();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelPairingUserInput();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public createBond();
	@requestPermission(android.permission.BLUETOOTH) public createRfcommSocketToServiceRecord(java.util.UUID);
	@requestPermission(android.permission.BLUETOOTH) public fetchUuidsWithSdp();
	@requestPermission(android.permission.BLUETOOTH) public getBondState();
	@requestPermission(android.permission.BLUETOOTH) public getName();
	@requestPermission(android.permission.BLUETOOTH) public getServiceChannel(android.os.ParcelUuid);
	@requestPermission(android.permission.BLUETOOTH) public getUuids();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public removeBond();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPairingConfirmation(boolean);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPasskey(int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPin([B);
}

class BluetoothHeadset {
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public connectHeadset(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public disconnectHeadset();
	@requestPermission(android.permission.BLUETOOTH) public getBatteryUsageHint();
	@requestPermission(android.permission.BLUETOOTH) public getCurrentHeadset();
	@requestPermission(android.permission.BLUETOOTH) public getPriority(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public getState();
	@requestPermission(android.permission.BLUETOOTH) public isConnected(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPriority(android.bluetooth.BluetoothDevice,int);
	@requestPermission(android.permission.BLUETOOTH) public startVoiceRecognition();
	@requestPermission(android.permission.BLUETOOTH) public stopVoiceRecognition();
}

class BluetoothPbap {
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public disconnect();
	@requestPermission(android.permission.BLUETOOTH) public getClient();
	@requestPermission(android.permission.BLUETOOTH) public getState();
	@requestPermission(android.permission.BLUETOOTH) public isConnected(android.bluetooth.BluetoothDevice);
}

class BluetoothSocket {
	@requestPermission(android.permission.BLUETOOTH) public connect();
}

class HeadsetBase {
	@requestPermission(android.permission.WAKE_LOCK) public acquireWakeLock();
	@requestPermission(android.permission.WAKE_LOCK) public finalize();
	@requestPermission(android.permission.WAKE_LOCK) public handleInput(java.lang.String);
	@requestPermission(android.permission.WAKE_LOCK) public releaseWakeLock();
}

class IBluetooth$Stub$Proxy {
	@requestPermission(android.permission.BLUETOOTH) public addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelBondProcess(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelDiscovery();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelPairingUserInput(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public createBond(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public disable(boolean);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public enable();
	@requestPermission(android.permission.BLUETOOTH) public fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback);
	@requestPermission(android.permission.BLUETOOTH) public getAddress();
	@requestPermission(android.permission.BLUETOOTH) public getBluetoothState();
	@requestPermission(android.permission.BLUETOOTH) public getBondState(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getDiscoverableTimeout();
	@requestPermission(android.permission.BLUETOOTH) public getName();
	@requestPermission(android.permission.BLUETOOTH) public getRemoteClass(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getRemoteName(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid);
	@requestPermission(android.permission.BLUETOOTH) public getRemoteUuids(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getScanMode();
	@requestPermission(android.permission.BLUETOOTH) public getTrustState(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public isDiscovering();
	@requestPermission(android.permission.BLUETOOTH) public isEnabled();
	@requestPermission(android.permission.BLUETOOTH) public listBonds();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public removeBond(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public removeServiceRecord(int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH) public setDiscoverableTimeout(int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH) public setName(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPairingConfirmation(java.lang.String,boolean);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPasskey(java.lang.String,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPin(java.lang.String,[B);
	@requestPermission(android.permission.WRITE_SECURE_SETTINGS, android.permission.BLUETOOTH) public setScanMode(int,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setTrust(java.lang.String,boolean);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public startDiscovery();
}

class IBluetoothA2dp$Stub$Proxy {
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH) public connectSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH) public disconnectSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public getConnectedSinks();
	@requestPermission(android.permission.BLUETOOTH) public getNonDisconnectedSinks();
	@requestPermission(android.permission.BLUETOOTH) public getSinkPriority(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public getSinkState(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH, android.permission.MODIFY_AUDIO_SETTINGS) public resumeSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS) public setSinkPriority(android.bluetooth.BluetoothDevice,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH AND android.permission.MODIFY_AUDIO_SETTINGS) public suspendSink(android.bluetooth.BluetoothDevice);
}

class IBluetoothHeadset$Stub$Proxy {
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public connectHeadset(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public disconnectHeadset();
	@requestPermission(android.permission.BLUETOOTH) public getBatteryUsageHint();
	@requestPermission(android.permission.BLUETOOTH) public getCurrentHeadset();
	@requestPermission(android.permission.BLUETOOTH) public getPriority(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public getState();
	@requestPermission(android.permission.BLUETOOTH) public isConnected(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPriority(android.bluetooth.BluetoothDevice,int);
	@requestPermission(android.permission.BLUETOOTH) public startVoiceRecognition();
	@requestPermission(android.permission.BLUETOOTH) public stopVoiceRecognition();
}

class IBluetoothPbap$Stub$Proxy {
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public connect(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public disconnect();
	@requestPermission(android.permission.BLUETOOTH) public getClient();
	@requestPermission(android.permission.BLUETOOTH) public getState();
	@requestPermission(android.permission.BLUETOOTH) public isConnected(android.bluetooth.BluetoothDevice);
}

class ScoSocket {
	@requestPermission(android.permission.WAKE_LOCK) public acquireWakeLock();
	@requestPermission(android.permission.WAKE_LOCK) public close();
	@requestPermission(android.permission.WAKE_LOCK) public finalize();
	@requestPermission(android.permission.WAKE_LOCK) public releaseWakeLock();
	@requestPermission(android.permission.WAKE_LOCK) public releaseWakeLockNow();
}

package android.content;

class ContentResolver {
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long);
	@requestPermission(android.permission.READ_SYNC_STATS) public getCurrentSync();
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getIsSyncable(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getMasterSyncAutomatically();
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getPeriodicSyncs(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getSyncAutomatically(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public getSyncStatus(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public isSyncActive(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public isSyncPending(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_CONTACTS) public openFileDescriptor(android.net.Uri,java.lang.String);
	@requestPermission(android.permission.READ_CONTACTS) public openInputStream(android.net.Uri);
	@requestPermission(android.permission.READ_CONTACTS) public openOutputStream(android.net.Uri);
	@requestPermission(android.permission.READ_CONTACTS) public query(android.net.Uri,java.lang.String [],java.lang.String,java.lang.String [],java.lang.String);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setIsSyncable(android.accounts.Account,java.lang.String,int);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setMasterSyncAutomatically(boolean);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setSyncAutomatically(android.accounts.Account,java.lang.String,boolean);
}

class ContentService {
	@requestPermission(android.permission.GET_ACCOUNTS) public <init>(android.content.Context,boolean);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long);
	@requestPermission(android.permission.DUMP) public dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String []);
	@requestPermission(android.permission.READ_SYNC_STATS) public getCurrentSync();
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getIsSyncable(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getMasterSyncAutomatically();
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getPeriodicSyncs(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getSyncAutomatically(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public getSyncStatus(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public isSyncActive(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public isSyncPending(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.GET_ACCOUNTS) public main(android.content.Context,boolean);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setIsSyncable(android.accounts.Account,java.lang.String,int);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setMasterSyncAutomatically(boolean);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setSyncAutomatically(android.accounts.Account,java.lang.String,boolean);
}

class Context {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission() public sendBroadcast(android.content.Intent);
	@requestPermission() public sendOrderedBroadcast(android.content.Intent,java.lang.String);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
	@requestPermission() public startActivity(android.content.Intent);
	@requestPermission() public startService(android.content.Intent);
}

class ContextWrapper {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission() public sendBroadcast(android.content.Intent);
	@requestPermission() public sendOrderedBroadcast(android.content.Intent,java.lang.String);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
	@requestPermission() public startActivity(android.content.Intent);
	@requestPermission() public startService(android.content.Intent);
}

class IContentService$Stub$Proxy {
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long);
	@requestPermission(android.permission.READ_SYNC_STATS) public getCurrentSync();
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getIsSyncable(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getMasterSyncAutomatically();
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getPeriodicSyncs(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_SETTINGS) public getSyncAutomatically(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public getSyncStatus(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public isSyncActive(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.READ_SYNC_STATS) public isSyncPending(android.accounts.Account,java.lang.String);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setIsSyncable(android.accounts.Account,java.lang.String,int);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setMasterSyncAutomatically(boolean);
	@requestPermission(android.permission.WRITE_SYNC_SETTINGS) public setSyncAutomatically(android.accounts.Account,java.lang.String,boolean);
}

class MutableContextWrapper {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

package android.content.pm;

class IPackageManager$Stub$Proxy {
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName [],android.content.ComponentName);
	@requestPermission(android.permission.CLEAR_APP_USER_DATA) public clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public clearPackagePreferredActivities(java.lang.String);
	@requestPermission(android.permission.DELETE_CACHE_FILES) public deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.DELETE_PACKAGES) public deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int);
	@requestPermission(android.permission.CLEAR_APP_CACHE) public freeStorage(long,android.content.IntentSender);
	@requestPermission(android.permission.CLEAR_APP_CACHE) public freeStorageAndNotify(long,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.INSTALL_PACKAGES) public installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String);
	@requestPermission(android.permission.MOVE_PACKAGE) public movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int);
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName [],android.content.ComponentName);
	@requestPermission(android.permission.CHANGE_COMPONENT_ENABLED_STATE) public setApplicationEnabledSetting(java.lang.String,int,int);
	@requestPermission(android.permission.CHANGE_COMPONENT_ENABLED_STATE) public setComponentEnabledSetting(android.content.ComponentName,int,int);
	@requestPermission(android.permission.WRITE_SECURE_SETTINGS) public setInstallLocation(int);
	@requestPermission() public updateExternalMediaStatus(boolean,boolean);
}

class PackageManager {
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName);
	@requestPermission(android.permission.CLEAR_APP_USER_DATA) public clearApplicationUserData(java.lang.String,IPackageDataObserver);
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public clearPackagePreferredActivities(java.lang.String);
	@requestPermission(android.permission.DELETE_CACHE_FILES) public deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.DELETE_PACKAGES) public deletePackage(java.lang.String,IPackageDeleteObserver,int);
	@requestPermission(android.permission.CLEAR_APP_CACHE) public freeStorage(long,android.content.IntentSender);
	@requestPermission(android.permission.CLEAR_APP_CACHE) public freeStorageAndNotify(long,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.GET_PACKAGE_SIZE) public getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver);
	@requestPermission(android.permission.INSTALL_PACKAGES) public installPackage(Uri,IPackageInstallObserver,int,java.lang.String);
	@requestPermission(android.permission.MOVE_PACKAGE) public movePackage(java.lang.String,IPackageMoveObserver,int);
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName);
	@requestPermission(android.permission.CHANGE_COMPONENT_ENABLED_STATE) public setApplicationEnabledSetting(java.lang.String,int,int);
	@requestPermission(android.permission.CHANGE_COMPONENT_ENABLED_STATE) public setComponentEnabledSetting(android.content.ComponentName,int,int);
}

package android.app;

class ContextImpl$ApplicationPackageManager {
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName);
	@requestPermission(android.permission.CLEAR_APP_USER_DATA) public clearApplicationUserData(java.lang.String,IPackageDataObserver);
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public clearPackagePreferredActivities(java.lang.String);
	@requestPermission(android.permission.DELETE_CACHE_FILES) public deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.DELETE_PACKAGES) public deletePackage(java.lang.String,IPackageDeleteObserver,int);
	@requestPermission(android.permission.CLEAR_APP_CACHE) public freeStorage(long,android.content.IntentSender);
	@requestPermission(android.permission.CLEAR_APP_CACHE) public freeStorageAndNotify(long,android.content.pm.IPackageDataObserver);
	@requestPermission(android.permission.GET_PACKAGE_SIZE) public getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver);
	@requestPermission(android.permission.INSTALL_PACKAGES) public installPackage(Uri,IPackageInstallObserver,int,java.lang.String);
	@requestPermission(android.permission.MOVE_PACKAGE) public movePackage(java.lang.String,IPackageMoveObserver,int);
	@requestPermission(android.permission.SET_PREFERRED_APPLICATIONS) public replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName);
	@requestPermission(android.permission.CHANGE_COMPONENT_ENABLED_STATE) public setApplicationEnabledSetting(java.lang.String,int,int);
	@requestPermission(android.permission.CHANGE_COMPONENT_ENABLED_STATE) public setComponentEnabledSetting(android.content.ComponentName,int,int);
}

package android.hardware;

class Camera {
	@requestPermission(android.permission.CAMERA) public native_setup(java.lang.Object);
	@requestPermission(android.permission.CAMERA) public open();
}

package android.inputmethodservice;

class AbstractInputMethodService {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

package android.location;

class ILocationManager$Stub$Proxy {
	@requestPermission(android.permission.ACCESS_FINE_LOCATION) public addGpsStatusListener(android.location.IGpsStatusListener);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION) public addProximityAlert(double,double,float,long,android.app.PendingIntent);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public clearTestProviderEnabled(java.lang.String);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public clearTestProviderLocation(java.lang.String);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public clearTestProviderStatus(java.lang.String);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getLastKnownLocation(java.lang.String);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getProviderInfo(java.lang.String);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getProviders(boolean);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public isProviderEnabled(java.lang.String);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public removeTestProvider(java.lang.String);
	@requestPermission(android.permission.INSTALL_LOCATION_PROVIDER) public reportLocation(android.location.Location,boolean);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS) public sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public setTestProviderEnabled(java.lang.String,boolean);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public setTestProviderLocation(java.lang.String,android.location.Location);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public setTestProviderStatus(java.lang.String,int,android.os.Bundle,long);
}

class LocationManager {
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public _requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public _requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION) public addGpsStatusListener(android.location.GpsStatus$Listener);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION) public addNmeaListener(android.location.GpsStatus$NmeaListener);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION) public addProximityAlert(double,double,float,long,android.app.PendingIntent);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public best(java.util.List);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public clearTestProviderEnabled(java.lang.String);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public clearTestProviderLocation(java.lang.String);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public clearTestProviderStatus(java.lang.String);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getBestProvider(android.location.Criteria,boolean);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getLastKnownLocation(java.lang.String);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getProvider(java.lang.String);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getProviders(android.location.Criteria,boolean);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getProviders(boolean);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public isProviderEnabled(java.lang.String);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public removeTestProvider(java.lang.String);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS) public sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public setTestProviderEnabled(java.lang.String,boolean);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public setTestProviderLocation(java.lang.String,android.location.Location);
	@requestPermission(android.permission.ACCESS_MOCK_LOCATION) public setTestProviderStatus(java.lang.String,int,android.os.Bundle,long);
}

package android.media;

class AsyncPlayer {
	@requestPermission(android.permission.WAKE_LOCK) public acquireWakeLock();
	@requestPermission(android.permission.WAKE_LOCK) public enqueueLocked(android.media.AsyncPlayer$Command);
	@requestPermission(android.permission.WAKE_LOCK) public play(android.content.Context,android.net.Uri,boolean,int);
	@requestPermission(android.permission.WAKE_LOCK) public releaseWakeLock();
	@requestPermission(android.permission.WAKE_LOCK) public stop();
}

class AudioManager {
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public isBluetoothA2dpOn();
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public isWiredHeadsetOn();
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setBluetoothScoOn(boolean);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setMicrophoneMute(boolean);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setMode(int);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setParameter(java.lang.String,java.lang.String);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setParameters(java.lang.String);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setSpeakerphoneOn(boolean);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public startBluetoothSco();
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public stopBluetoothSco();
}

class AudioRecord {
	@requestPermission(android.permission.RECORD_AUDIO) public <init>(int,int,int,int,int);
}

class AudioService {
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setBluetoothScoOn(boolean);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setMode(int,android.os.IBinder);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setSpeakerphoneOn(boolean);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public startBluetoothSco(android.os.IBinder);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public stopBluetoothSco(android.os.IBinder);
}

class IAudioService$Stub$Proxy {
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setBluetoothScoOn(boolean);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setMode(int,android.os.IBinder);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public setSpeakerphoneOn(boolean);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public startBluetoothSco(android.os.IBinder);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public stopBluetoothSco(android.os.IBinder);
}

class MediaPlayer {
	@requestPermission(android.permission.WAKE_LOCK, NONE) public start();
	@requestPermission(android.permission.WAKE_LOCK, NONE) public stayAwake(boolean);
	@requestPermission(android.permission.WAKE_LOCK, NONE) public stop();
}

class MediaRecorder {
	@requestPermission(android.permission.RECORD_AUDIO) public setAudioSource(int);
	@requestPermission(android.permission.CAMERA) public setVideoSource(int);
}

class RingtoneManager {
	@requestPermission(android.permission.WRITE_SETTINGS) public setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri);
}

package android.net;

class ConnectivityManager {
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getActiveNetworkInfo();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getAllNetworkInfo();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getLastTetherError(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getMobileDataEnabled();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getNetworkInfo(int);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getNetworkPreference();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetherableIfaces();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetherableUsbRegexs();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetherableWifiRegexs();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetheredIfaces();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetheringErroredIfaces();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public isTetheringSupported();
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public requestRouteToHost(int,int);
	@requestPermission(android.permission.CHANGE_BACKGROUND_DATA_SETTING) public setBackgroundDataSetting(boolean);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS, android.permission.BACKUP) public setMobileDataEnabled(boolean);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS, android.permission.BACKUP) public setNetworkPreference(int);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.CHANGE_WIFI_STATE) public setRadio(int,boolean);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.CHANGE_WIFI_STATE) public setRadios(boolean);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE) public startUsingNetworkFeature(int,java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public stopUsingNetworkFeature(int,java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE) public tether(java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE) public untether(java.lang.String);
}

class Downloads$ById {
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public deleteDownload(android.content.Context,long);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public getMimeTypeForId(android.content.Context,long);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public getStatus(android.content.Context,long);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public openDownload(android.content.Context,long,java.lang.String);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public openDownloadStream(android.content.Context,long);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

class Downloads$ByUri {
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public getCurrentOtaDownloads(android.content.Context,java.lang.String);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public getProgressCursor(android.content.Context,long);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public getStatus(android.content.Context,java.lang.String,long);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String);
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

class Downloads$DownloadBase {
	@requestPermission(android.permission.ACCESS_DOWNLOAD_MANAGER) public startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

package android.net.http;

class RequestQueue {
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public enablePlatformNotifications();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public setProxyConfig();
}

package android.net;

class IConnectivityManager$Stub$Proxy {
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getActiveNetworkInfo();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getAllNetworkInfo();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getLastTetherError(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getMobileDataEnabled();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getNetworkInfo(int);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getNetworkPreference();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetherableIfaces();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetherableUsbRegexs();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetherableWifiRegexs();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetheredIfaces();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getTetheringErroredIfaces();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public isTetheringSupported();
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public requestRouteToHost(int,int);
	@requestPermission(android.permission.CHANGE_BACKGROUND_DATA_SETTING) public setBackgroundDataSetting(boolean);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS, android.permission.BACKUP) public setMobileDataEnabled(boolean);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS, android.permission.BACKUP) public setNetworkPreference(int);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.CHANGE_WIFI_STATE) public setRadio(int,boolean);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.CHANGE_WIFI_STATE) public setRadios(boolean);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE AND android.permission.CHANGE_NETWORK_STATE) public startUsingNetworkFeature(int,java.lang.String,android.os.IBinder);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public stopUsingNetworkFeature(int,java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE) public tether(java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE) public untether(java.lang.String);
}

class IThrottleManager$Stub$Proxy {
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getByteCount(java.lang.String,int,int,int);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getCliffLevel(java.lang.String,int);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getCliffThreshold(java.lang.String,int);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getHelpUri();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getPeriodStartTime(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getResetTime(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getThrottle(java.lang.String);
}

class MobileDataStateTracker {
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public reconnect();
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public setRadio(boolean);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public teardown();
}

class NetworkInfo {
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public isConnectedOrConnecting();
}

class ThrottleManager {
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getByteCount(java.lang.String,int,int,int);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getCliffLevel(java.lang.String,int);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getCliffThreshold(java.lang.String,int);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getHelpUri();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getPeriodStartTime(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getResetTime(java.lang.String);
}

package android.net.wifi;

class IWifiManager$Stub$Proxy {
	@requestPermission(android.permission.CHANGE_WIFI_MULTICAST_STATE) public acquireMulticastLock(android.os.IBinder,java.lang.String);
	@requestPermission(android.permission.WAKE_LOCK) public acquireWifiLock(android.os.IBinder,int,java.lang.String);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public addOrUpdateNetwork(android.net.wifi.WifiConfiguration);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public disableNetwork(int);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public disconnect();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public enableNetwork(int,boolean);
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getConfiguredNetworks();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getConnectionInfo();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getDhcpInfo();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getNumAllowedChannels();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getScanResults();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getValidChannelCounts();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getWifiApEnabledState();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getWifiEnabledState();
	@requestPermission(android.permission.CHANGE_WIFI_MULTICAST_STATE) public initializeMulticastFiltering();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public isMulticastEnabled();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public pingSupplicant();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public reassociate();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public reconnect();
	@requestPermission(android.permission.CHANGE_WIFI_MULTICAST_STATE) public releaseMulticastLock();
	@requestPermission(android.permission.WAKE_LOCK) public releaseWifiLock(android.os.IBinder);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public removeNetwork(int);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public saveConfiguration();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public setNumAllowedChannels(int,boolean);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public setWifiEnabled(boolean);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public startScan(boolean);
}

class WifiManager {
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public addNetwork(android.net.wifi.WifiConfiguration);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public addOrUpdateNetwork(android.net.wifi.WifiConfiguration);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public disableNetwork(int);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public disconnect();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public enableNetwork(int,boolean);
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getConfiguredNetworks();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getConnectionInfo();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getDhcpInfo();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getNumAllowedChannels();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getScanResults();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getValidChannelCounts();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getWifiApState();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public getWifiState();
	@requestPermission(android.permission.CHANGE_WIFI_MULTICAST_STATE) public initializeMulticastFiltering();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public isMulticastEnabled();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public isWifiApEnabled();
	@requestPermission(android.permission.ACCESS_WIFI_STATE) public isWifiEnabled();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public pingSupplicant();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public reassociate();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public reconnect();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public removeNetwork(int);
	@requestPermission(android.permission.CHANGE_WIFI_STATE, android.permission.BACKUP) public saveConfiguration();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public setNumAllowedChannels(int,boolean);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public setWifiEnabled(boolean);
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public startScan();
	@requestPermission(android.permission.CHANGE_WIFI_STATE) public startScanActive();
}

class WifiManager$MulticastLock {
	@requestPermission(android.permission.CHANGE_WIFI_MULTICAST_STATE) public acquire();
	@requestPermission(android.permission.CHANGE_WIFI_MULTICAST_STATE, NONE) public finalize();
	@requestPermission(android.permission.CHANGE_WIFI_MULTICAST_STATE) public release();
}

class WifiManager$WifiLock {
	@requestPermission(android.permission.WAKE_LOCK) public acquire();
	@requestPermission(android.permission.WAKE_LOCK, NONE) public finalize();
	@requestPermission(android.permission.WAKE_LOCK) public release();
}

package android.os;

class DropBoxManager {
	@requestPermission(android.permission.READ_LOGS) public getNextEntry(java.lang.String,long);
}

class IHardwareService$Stub$Proxy {
	@requestPermission(android.permission.FLASHLIGHT OR android.permission.HARDWARE_TEST) public setFlashlightEnabled(boolean);
}

class INetworkManagementService$Stub$Proxy {
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public detachPppd(java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public disableNat(java.lang.String,java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public enableNat(java.lang.String,java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getDnsForwarders();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getInterfaceRxCounter(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getInterfaceRxThrottle(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getInterfaceTxCounter(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getInterfaceTxThrottle(java.lang.String);
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public getIpForwardingEnabled();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public isTetheringStarted();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public isUsbRNDISStarted();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public listInterfaces();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public listTetheredInterfaces();
	@requestPermission(android.permission.ACCESS_NETWORK_STATE) public listTtys();
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public setInterfaceThrottle(java.lang.String,int,int);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public setIpForwardingEnabled(boolean);
	@requestPermission(android.permission.SHUTDOWN) public shutdown();
	@requestPermission(android.permission.CHANGE_NETWORK_STATE AND android.permission.CHANGE_WIFI_STATE) public startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public startUsbRNDIS();
	@requestPermission(android.permission.CHANGE_NETWORK_STATE AND android.permission.CHANGE_WIFI_STATE) public stopAccessPoint();
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public stopTethering();
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public stopUsbRNDIS();
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public tetherInterface(java.lang.String);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public unregisterObserver(android.net.INetworkManagementEventObserver);
	@requestPermission(android.permission.CHANGE_NETWORK_STATE) public untetherInterface(java.lang.String);
}

class IPowerManager$Stub$Proxy {
	@requestPermission(android.permission.WAKE_LOCK) public acquireWakeLock(int,android.os.IBinder,java.lang.String);
	@requestPermission(android.permission.DEVICE_POWER) public clearUserActivityTimeout(long,long);
	@requestPermission(android.permission.REBOOT) public crash(java.lang.String);
	@requestPermission(android.permission.DEVICE_POWER) public goToSleep(long);
	@requestPermission(android.permission.DEVICE_POWER) public goToSleepWithReason(long,int);
	@requestPermission(android.permission.DEVICE_POWER) public preventScreenOn(boolean);
	@requestPermission(android.permission.REBOOT) public reboot(java.lang.String);
	@requestPermission(android.permission.WAKE_LOCK) public releaseWakeLock(android.os.IBinder,int);
	@requestPermission(android.permission.DEVICE_POWER) public setAttentionLight(boolean,int);
	@requestPermission(android.permission.DEVICE_POWER) public setBacklightBrightness(int);
	@requestPermission(android.permission.WRITE_SECURE_SETTINGS) public setMaximumScreenOffTimeount(int);
	@requestPermission(android.permission.DEVICE_POWER) public setPokeLock(int,android.os.IBinder,java.lang.String);
	@requestPermission(android.permission.WRITE_SETTINGS) public setStayOnSetting(int);
	@requestPermission(android.permission.DEVICE_POWER) public userActivityWithForce(long,boolean,boolean);
}

class IVibratorService$Stub$Proxy {
	@requestPermission(android.permission.VIBRATE) public cancelVibrate(android.os.IBinder);
	@requestPermission(android.permission.VIBRATE) public vibrate(long,android.os.IBinder);
	@requestPermission(android.permission.VIBRATE) public vibratePattern([J,int,android.os.IBinder);
}

class PowerManager {
	@requestPermission(android.permission.DEVICE_POWER) public goToSleep(long);
	@requestPermission(android.permission.REBOOT) public reboot(java.lang.String);
	@requestPermission(android.permission.DEVICE_POWER) public setBacklightBrightness(int);
}

class PowerManager$WakeLock {
	@requestPermission(android.permission.WAKE_LOCK) public acquire();
	@requestPermission(android.permission.WAKE_LOCK) public acquire(long);
	@requestPermission(android.permission.WAKE_LOCK) public release();
	@requestPermission(android.permission.WAKE_LOCK) public release(int);
}

class RecoverySystem {
	@requestPermission(android.permission.REBOOT) public bootCommand(android.content.Context,java.lang.String);
	@requestPermission(android.permission.REBOOT) public installPackage(android.content.Context,java.io.File);
	@requestPermission(android.permission.REBOOT) public rebootWipeUserData(android.content.Context);
}

package android.os.storage;

class IMountService$Stub$Proxy {
	@requestPermission(android.permission.ASEC_CREATE) public createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int);
	@requestPermission(android.permission.ASEC_DESTROY) public destroySecureContainer(java.lang.String,boolean);
	@requestPermission(android.permission.ASEC_CREATE) public finalizeSecureContainer(java.lang.String);
	@requestPermission(android.permission.MOUNT_FORMAT_FILESYSTEMS) public formatVolume(java.lang.String);
	@requestPermission(android.permission.ASEC_ACCESS) public getSecureContainerList();
	@requestPermission(android.permission.ASEC_ACCESS) public getSecureContainerPath(java.lang.String);
	@requestPermission(android.permission.MOUNT_UNMOUNT_FILESYSTEMS) public getStorageUsers(java.lang.String);
	@requestPermission(android.permission.ASEC_ACCESS) public isSecureContainerMounted(java.lang.String);
	@requestPermission(android.permission.ASEC_MOUNT_UNMOUNT) public mountSecureContainer(java.lang.String,java.lang.String,int);
	@requestPermission(android.permission.MOUNT_UNMOUNT_FILESYSTEMS) public mountVolume(java.lang.String);
	@requestPermission(android.permission.ASEC_RENAME) public renameSecureContainer(java.lang.String,java.lang.String);
	@requestPermission(android.permission.MOUNT_UNMOUNT_FILESYSTEMS) public setUsbMassStorageEnabled(boolean);
	@requestPermission(android.permission.SHUTDOWN) public shutdown(android.os.storage.IMountShutdownObserver);
	@requestPermission(android.permission.ASEC_MOUNT_UNMOUNT) public unmountSecureContainer(java.lang.String,boolean);
	@requestPermission(android.permission.MOUNT_UNMOUNT_FILESYSTEMS) public unmountVolume(java.lang.String,boolean);
}

class StorageManager {
	@requestPermission(android.permission.MOUNT_UNMOUNT_FILESYSTEMS) public disableUsbMassStorage();
	@requestPermission(android.permission.MOUNT_UNMOUNT_FILESYSTEMS) public enableUsbMassStorage();
}

package android.os;

class Vibrator {
	@requestPermission(android.permission.VIBRATE) public cancel();
	@requestPermission(android.permission.VIBRATE) public vibrate([J,int);
	@requestPermission(android.permission.VIBRATE) public vibrate(long);
}

package android.pim.vcard;

class VCardComposer {
	@requestPermission(android.permission.READ_CONTACTS) public createOneEntry();
	@requestPermission(android.permission.READ_CONTACTS) public createOneEntry(java.lang.reflect.Method);
	@requestPermission(android.permission.READ_CONTACTS) public createOneEntryInternal(java.lang.String,java.lang.reflect.Method);
	@requestPermission(android.permission.READ_CONTACTS) public init();
	@requestPermission(android.permission.READ_CONTACTS) public init(java.lang.String,java.lang.String []);
}

class VCardComposer$HandlerForOutputStream {
	@requestPermission(android.permission.READ_CONTACTS) public onInit(android.content.Context);
}

class VCardComposer$OneEntryHandler {
	@requestPermission(android.permission.READ_CONTACTS) public onInit(android.content.Context);
}

class VCardEntry {
	@requestPermission(android.permission.WRITE_CONTACTS) public pushIntoContentResolver(android.content.ContentResolver);
}

class VCardEntryCommitter {
	@requestPermission(android.permission.WRITE_CONTACTS) public onEntryCreated(android.pim.vcard.VCardEntry);
}

class VCardEntryHandler {
	@requestPermission(android.permission.WRITE_CONTACTS) public onEntryCreated(android.pim.vcard.VCardEntry);
}

package android.provider;

class Browser {
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS) public addSearchUrl(android.content.ContentResolver,java.lang.String);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS) public canClearHistory(android.content.ContentResolver);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS) public clearHistory(android.content.ContentResolver);
	@requestPermission(com.android.browser.permission.WRITE_HISTORY_BOOKMARKS) public clearSearches(android.content.ContentResolver);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS) public deleteFromHistory(android.content.ContentResolver,java.lang.String);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS) public deleteHistoryTimeFrame(android.content.ContentResolver,long,long);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS) public deleteHistoryWhere(android.content.ContentResolver,java.lang.String);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS) public getAllBookmarks(android.content.ContentResolver);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS) public getAllVisitedUrls(android.content.ContentResolver);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS) public getVisitedHistory(android.content.ContentResolver);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS) public getVisitedLike(android.content.ContentResolver,java.lang.String);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS) public requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS) public truncateHistory(android.content.ContentResolver);
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS) public updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean);
}

class Calendar$CalendarAlerts {
	@requestPermission(android.permission.READ_CALENDAR) public alarmExists(android.content.ContentResolver,long,long,long);
	@requestPermission(android.permission.READ_CALENDAR) public findNextAlarmTime(android.content.ContentResolver,long);
	@requestPermission(android.permission.WRITE_CALENDAR) public insert(android.content.ContentResolver,long,long,long,long,int);
	@requestPermission(android.permission.READ_CALENDAR) public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String [],java.lang.String);
}

class Calendar$Calendars {
	@requestPermission(android.permission.WRITE_CALENDAR) public delete(android.content.ContentResolver,java.lang.String,java.lang.String []);
	@requestPermission(android.permission.WRITE_CALENDAR) public deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account);
	@requestPermission(android.permission.READ_CALENDAR) public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String);
}

class Calendar$EventDays {
	@requestPermission(android.permission.READ_CALENDAR) public query(android.content.ContentResolver,int,int);
}

class Calendar$Events {
	@requestPermission(android.permission.READ_CALENDAR) public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String);
	@requestPermission(android.permission.READ_CALENDAR) public query(android.content.ContentResolver,java.lang.String []);
}

class Calendar$Instances {
	@requestPermission(android.permission.READ_CALENDAR) public query(android.content.ContentResolver,java.lang.String [],long,long,java.lang.String,java.lang.String);
	@requestPermission(android.permission.READ_CALENDAR) public query(android.content.ContentResolver,java.lang.String [],long,long);
}

class CallLog$Calls {
	@requestPermission(android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS) public addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int);
	@requestPermission(android.permission.READ_CONTACTS) public getLastOutgoingCall(android.content.Context);
	@requestPermission(android.permission.WRITE_CONTACTS) public removeExpiredEntries(android.content.Context);
}

class Contacts$People {
	@requestPermission(android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS) public addToGroup(android.content.ContentResolver,long,java.lang.String);
	@requestPermission(android.permission.WRITE_CONTACTS) public addToGroup(android.content.ContentResolver,long,long);
	@requestPermission(android.permission.READ_CONTACTS) public addToMyContactsGroup(android.content.ContentResolver,long);
	@requestPermission(android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS) public createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues);
	@requestPermission(android.permission.READ_CONTACTS) public loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options);
	@requestPermission(android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS) public markAsContacted(android.content.ContentResolver,long);
	@requestPermission(android.permission.READ_CONTACTS) public openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri);
	@requestPermission(android.permission.READ_CONTACTS) public queryGroups(android.content.ContentResolver,long);
	@requestPermission(android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS) public setPhotoData(android.content.ContentResolver,android.net.Uri,[B);
	@requestPermission(android.permission.READ_CONTACTS) public tryGetMyContactsGroupId(android.content.ContentResolver);
}

class Contacts$Settings {
	@requestPermission(android.permission.READ_CONTACTS) public getSetting(android.content.ContentResolver,java.lang.String,java.lang.String);
	@requestPermission(android.permission.WRITE_CONTACTS) public setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String);
}

class ContactsContract$Contacts {
	@requestPermission(android.permission.READ_CONTACTS) public getLookupUri(android.content.ContentResolver,android.net.Uri);
	@requestPermission(android.permission.READ_CONTACTS) public lookupContact(android.content.ContentResolver,android.net.Uri);
	@requestPermission(android.permission.WRITE_CONTACTS) public markAsContacted(android.content.ContentResolver,long);
	@requestPermission(android.permission.READ_CONTACTS) public openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri);
}

class ContactsContract$Data {
	@requestPermission(android.permission.READ_CONTACTS) public getContactLookupUri(android.content.ContentResolver,android.net.Uri);
}

class ContactsContract$RawContacts {
	@requestPermission(android.permission.READ_CONTACTS) public getContactLookupUri(android.content.ContentResolver,android.net.Uri);
}

class DrmStore {
	@requestPermission(android.permission.ACCESS_DRM) public enforceAccessDrmPermission(android.content.Context);
}

class Settings$Bookmarks {
	@requestPermission(android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS) public add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int);
	@requestPermission(android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS) public getIntentForShortcut(android.content.ContentResolver,char);
}

class Settings$Secure {
	@requestPermission(android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS) public putFloat(android.content.ContentResolver,java.lang.String,float);
	@requestPermission(android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS) public putInt(android.content.ContentResolver,java.lang.String,int);
	@requestPermission(android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS) public putLong(android.content.ContentResolver,java.lang.String,long);
	@requestPermission(android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS) public putString(android.content.ContentResolver,java.lang.String,java.lang.String);
	@requestPermission(android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS) public setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean);
}

class Settings$System {
	@requestPermission(android.permission.WRITE_SETTINGS) public putConfiguration(android.content.ContentResolver,android.content.res.Configuration);
	@requestPermission(android.permission.WRITE_SETTINGS) public putFloat(android.content.ContentResolver,java.lang.String,float);
	@requestPermission(android.permission.WRITE_SETTINGS) public putInt(android.content.ContentResolver,java.lang.String,int);
	@requestPermission(android.permission.WRITE_SETTINGS) public putLong(android.content.ContentResolver,java.lang.String,long);
	@requestPermission(android.permission.WRITE_SETTINGS) public putString(android.content.ContentResolver,java.lang.String,java.lang.String);
	@requestPermission(android.permission.WRITE_SETTINGS) public setShowGTalkServiceStatus(android.content.ContentResolver,boolean);
}

class Telephony$Mms {
	@requestPermission(android.permission.READ_SMS) public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String);
	@requestPermission(android.permission.READ_SMS) public query(android.content.ContentResolver,java.lang.String []);
}

class Telephony$Sms {
	@requestPermission(android.permission.WRITE_SMS AND android.permission.READ_SMS) public addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean,long);
	@requestPermission(android.permission.WRITE_SMS AND android.permission.READ_SMS) public addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean);
	@requestPermission(android.permission.WRITE_SMS) public moveMessageToFolder(android.content.Context,android.net.Uri,int,int);
	@requestPermission(android.permission.READ_SMS) public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String);
	@requestPermission(android.permission.READ_SMS) public query(android.content.ContentResolver,java.lang.String []);
}

class Telephony$Sms$Draft {
	@requestPermission(android.permission.READ_SMS AND android.permission.WRITE_SMS) public addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long);
	@requestPermission(android.permission.WRITE_SMS) public saveMessage(android.content.ContentResolver,android.net.Uri,java.lang.String);
}

class Telephony$Sms$Inbox {
	@requestPermission(android.permission.READ_SMS AND android.permission.WRITE_SMS) public addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean);
}

class Telephony$Sms$Outbox {
	@requestPermission(android.permission.WRITE_SMS) public addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long);
}

class Telephony$Sms$Sent {
	@requestPermission(android.permission.READ_SMS AND android.permission.WRITE_SMS) public addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long);
}

class Telephony$Threads {
	@requestPermission(android.permission.READ_SMS) public getOrCreateThreadId(android.content.Context,java.lang.String);
	@requestPermission(android.permission.READ_SMS) public getOrCreateThreadId(android.content.Context,java.util.Set);
}

class UserDictionary$Words {
	@requestPermission(android.permission.WRITE_USER_DICTIONARY) public addWord(android.content.Context,java.lang.String,int,int);
}

package android.server;

class BluetoothA2dpService {
	@requestPermission(android.permission.BLUETOOTH) public <init>(android.content.Context,android.server.BluetoothService);
	@requestPermission(android.permission.BLUETOOTH) public addAudioSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public checkSinkSuspendState(int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH) public connectSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH) public disconnectSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public getConnectedSinks();
	@requestPermission(android.permission.BLUETOOTH) public getNonDisconnectedSinks();
	@requestPermission(android.permission.BLUETOOTH) public getSinkPriority(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public getSinkState(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS, android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.WRITE_SETTINGS) public handleSinkStateChange(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public isSinkDevice(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH) public lookupSinksMatchingStates(int[]);
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS, android.permission.BLUETOOTH) public onBluetoothDisable();
	@requestPermission(android.permission.MODIFY_AUDIO_SETTINGS) public onBluetoothEnable();
	@requestPermission(android.permission.BLUETOOTH) public onConnectSinkResult(java.lang.String,boolean);
	@requestPermission(android.permission.BLUETOOTH) public onSinkPropertyChanged(java.lang.String,java.lang.String []);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH, android.permission.MODIFY_AUDIO_SETTINGS) public resumeSink(android.bluetooth.BluetoothDevice);
	@requestPermission(android.permission.BLUETOOTH_ADMIN, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS) public setSinkPriority(android.bluetooth.BluetoothDevice,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS) public setSinkPriority(android.bluetooth.BluetoothDevice,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH AND android.permission.MODIFY_AUDIO_SETTINGS) public suspendSink(android.bluetooth.BluetoothDevice);
}

class BluetoothService {
	@requestPermission(android.permission.BLUETOOTH) public addRemoteDeviceProperties(java.lang.String,java.lang.String []);
	@requestPermission(android.permission.BLUETOOTH) public addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelBondProcess(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelDiscovery();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public cancelPairingUserInput(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public createBond(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public disable();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public disable(boolean);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public enable();
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public enable(boolean);
	@requestPermission(android.permission.BLUETOOTH) public fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback);
	@requestPermission(android.permission.BLUETOOTH) public getAddress();
	@requestPermission(android.permission.BLUETOOTH) public getAddressFromObjectPath(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getAllProperties();
	@requestPermission(android.permission.BLUETOOTH) public getBluetoothState();
	@requestPermission(android.permission.BLUETOOTH) public getBondState(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getDiscoverableTimeout();
	@requestPermission(android.permission.BLUETOOTH) public getName();
	@requestPermission(android.permission.BLUETOOTH) public getObjectPathFromAddress(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getProperty(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getPropertyInternal(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getRemoteClass(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getRemoteName(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid);
	@requestPermission(android.permission.BLUETOOTH) public getRemoteUuids(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public getScanMode();
	@requestPermission(android.permission.BLUETOOTH) public getTrustState(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public isDiscovering();
	@requestPermission(android.permission.BLUETOOTH) public isEnabled();
	@requestPermission(android.permission.BLUETOOTH) public listBonds();
	@requestPermission(android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS) public persistBluetoothOnSetting(boolean);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public removeBond(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public removeServiceRecord(int);
	@requestPermission(android.permission.BLUETOOTH) public sendUuidIntent(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH) public setDiscoverableTimeout(int);
	@requestPermission(android.permission.BLUETOOTH) public setLinkTimeout(java.lang.String,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH) public setName(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPairingConfirmation(java.lang.String,boolean);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPasskey(java.lang.String,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setPin(java.lang.String,[B);
	@requestPermission(android.permission.BLUETOOTH) public setPropertyBoolean(java.lang.String,boolean);
	@requestPermission(android.permission.BLUETOOTH) public setPropertyInteger(java.lang.String,int);
	@requestPermission(android.permission.BLUETOOTH) public setPropertyString(java.lang.String,java.lang.String);
	@requestPermission(android.permission.WRITE_SECURE_SETTINGS, android.permission.BLUETOOTH) public setScanMode(int,int);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public setTrust(java.lang.String,boolean);
	@requestPermission(android.permission.BLUETOOTH_ADMIN) public startDiscovery();
	@requestPermission(android.permission.BLUETOOTH) public updateDeviceServiceChannelCache(java.lang.String);
	@requestPermission(android.permission.BLUETOOTH) public updateRemoteDevicePropertiesCache(java.lang.String);
}

package android.server.search;

class Searchables {
	@requestPermission(android.permission.GLOBAL_SEARCH) public buildSearchableList();
	@requestPermission(android.permission.GLOBAL_SEARCH) public findGlobalSearchActivity();
}

package android.service.urlrenderer;

class UrlRendererService {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

package android.service.wallpaper;

class WallpaperService {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

package android.speech;

class RecognitionService {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class SpeechRecognizer {
	@requestPermission(android.permission.RECORD_AUDIO) public cancel();
	@requestPermission(android.permission.RECORD_AUDIO) public handleCancelMessage();
	@requestPermission(android.permission.RECORD_AUDIO) public handleStartListening(android.content.Intent);
	@requestPermission(android.permission.RECORD_AUDIO) public handleStopMessage();
	@requestPermission(android.permission.RECORD_AUDIO) public startListening(android.content.Intent);
	@requestPermission(android.permission.RECORD_AUDIO) public stopListening();
}

package android.telephony.gsm;

class SmsManager {
	@requestPermission(android.permission.RECEIVE_SMS, android.permission.SEND_SMS) public copyMessageToSim([B,[B,int);
	@requestPermission(android.permission.RECEIVE_SMS, android.permission.SEND_SMS) public deleteMessageFromSim(int);
	@requestPermission(android.permission.RECEIVE_SMS) public getAllMessagesFromSim();
	@requestPermission(android.permission.SEND_SMS) public sendDataMessage(java.lang.String,java.lang.String,short,[B,android.app.PendingIntent,android.app.PendingIntent);
	@requestPermission(android.permission.SEND_SMS) public sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList);
	@requestPermission(android.permission.SEND_SMS) public sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent);
	@requestPermission(android.permission.RECEIVE_SMS, android.permission.SEND_SMS) public updateMessageOnSim(int,int,[B);
}

package android.telephony;

class PhoneNumberUtils {
	@requestPermission(android.permission.CALL_PRIVILEGED, android.permission.READ_CONTACTS, NONE) public getNumberFromIntent(android.content.Intent,android.content.Context);
	@requestPermission(android.permission.READ_PHONE_STATE) public isVoiceMailNumber(java.lang.String);
}

class SmsManager {
	@requestPermission(android.permission.RECEIVE_SMS, android.permission.SEND_SMS) public copyMessageToIcc([B,[B,int);
	@requestPermission(android.permission.RECEIVE_SMS, android.permission.SEND_SMS) public deleteMessageFromIcc(int);
	@requestPermission(android.permission.RECEIVE_SMS) public getAllMessagesFromIcc();
	@requestPermission(android.permission.SEND_SMS) public sendDataMessage(java.lang.String,java.lang.String,short,[B,android.app.PendingIntent,android.app.PendingIntent);
	@requestPermission(android.permission.SEND_SMS) public sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList);
	@requestPermission(android.permission.SEND_SMS) public sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent);
	@requestPermission(android.permission.RECEIVE_SMS, android.permission.SEND_SMS) public updateMessageOnIcc(int,int,[B);
}

class TelephonyManager {
	@requestPermission(android.permission.CONTROL_LOCATION_UPDATES) public disableLocationUpdates();
	@requestPermission(android.permission.CONTROL_LOCATION_UPDATES) public enableLocationUpdates();
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getCellLocation();
	@requestPermission(android.permission.CALL_PRIVILEGED) public getCompleteVoiceMailNumber();
	@requestPermission(android.permission.READ_PHONE_STATE) public getDeviceId();
	@requestPermission(android.permission.READ_PHONE_STATE) public getDeviceSoftwareVersion();
	@requestPermission(android.permission.READ_PHONE_STATE) public getLine1AlphaTag();
	@requestPermission(android.permission.READ_PHONE_STATE) public getLine1Number();
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getNeighboringCellInfo();
	@requestPermission(android.permission.READ_PHONE_STATE) public getSimSerialNumber();
	@requestPermission(android.permission.READ_PHONE_STATE) public getSubscriberId();
	@requestPermission(android.permission.READ_PHONE_STATE) public getVoiceMailAlphaTag();
	@requestPermission(android.permission.READ_PHONE_STATE) public getVoiceMailNumber();
	@requestPermission(android.permission.READ_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION, NONE) public listen(android.telephony.PhoneStateListener,int);
}

package android.view;

class ContextThemeWrapper {
	@requestPermission(android.permission.SET_WALLPAPER) public clearWallpaper();
	@requestPermission(android.permission.BROADCAST_STICKY) public removeStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyBroadcast(android.content.Intent);
	@requestPermission(android.permission.BROADCAST_STICKY) public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(android.graphics.Bitmap);
	@requestPermission(android.permission.SET_WALLPAPER) public setWallpaper(java.io.InputStream);
}

class IWindowManager$Stub$Proxy {
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public addAppToken(int,android.view.IApplicationToken,int,int,boolean);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public addWindowToken(android.os.IBinder,int);
	@requestPermission(android.permission.DISABLE_KEYGUARD) public disableKeyguard(android.os.IBinder,java.lang.String);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public executeAppTransition();
	@requestPermission(android.permission.DISABLE_KEYGUARD) public exitKeyguardSecurely(android.view.IOnKeyguardExitResult);
	@requestPermission(android.permission.READ_INPUT_STATE) public getDPadKeycodeState(int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getDPadScancodeState(int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getKeycodeState(int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getKeycodeStateForDevice(int,int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getScancodeState(int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getScancodeStateForDevice(int,int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getSwitchState(int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getSwitchStateForDevice(int,int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getTrackballKeycodeState(int);
	@requestPermission(android.permission.READ_INPUT_STATE) public getTrackballScancodeState(int);
	@requestPermission(android.permission.INJECT_EVENTS) public injectKeyEvent(android.view.KeyEvent,boolean);
	@requestPermission(android.permission.INJECT_EVENTS) public injectPointerEvent(android.view.MotionEvent,boolean);
	@requestPermission(android.permission.INJECT_EVENTS) public injectTrackballEvent(android.view.MotionEvent,boolean);
	@requestPermission(android.permission.DUMP) public isViewServerRunning();
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public moveAppToken(int,android.os.IBinder);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public moveAppTokensToBottom(java.util.List);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public moveAppTokensToTop(java.util.List);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public pauseKeyDispatching(android.os.IBinder);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public prepareAppTransition(int);
	@requestPermission(android.permission.DISABLE_KEYGUARD) public reenableKeyguard(android.os.IBinder);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public removeAppToken(android.os.IBinder);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public removeWindowToken(android.os.IBinder);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public resumeKeyDispatching(android.os.IBinder);
	@requestPermission(android.permission.SET_ANIMATION_SCALE) public setAnimationScale(int,float);
	@requestPermission(android.permission.SET_ANIMATION_SCALE) public setAnimationScales([F);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public setAppGroupId(android.os.IBinder,int);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public setAppOrientation(android.view.IApplicationToken,int);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public setAppStartingWindow(android.os.IBinder,java.lang.String,int,java.lang.CharSequence,int,int,android.os.IBinder,boolean);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public setAppVisibility(android.os.IBinder,boolean);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public setAppWillBeHidden(android.os.IBinder);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public setEventDispatching(boolean);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public setFocusedApp(android.os.IBinder,boolean);
	@requestPermission(android.permission.MANAGE_APP_TOKENS AND android.permission.DEVICE_POWER) public setNewConfiguration(android.content.res.Configuration);
	@requestPermission(android.permission.SET_ORIENTATION) public setRotation(int,boolean,int);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public startAppFreezingScreen(android.os.IBinder,int);
	@requestPermission(android.permission.DUMP) public startViewServer(int);
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public stopAppFreezingScreen(android.os.IBinder,boolean);
	@requestPermission(android.permission.DUMP) public stopViewServer();
	@requestPermission(android.permission.MANAGE_APP_TOKENS) public updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder);
}

class IWindowSession$Stub$Proxy {
	@requestPermission(android.permission.SYSTEM_ALERT_WINDOW, android.permission.INTERNAL_SYSTEM_WINDOW, NONE) public add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect);
}

class Surface {
	@requestPermission(android.permission.ACCESS_SURFACE_FLINGER) public closeTransaction();
	@requestPermission(android.permission.ACCESS_SURFACE_FLINGER) public freezeDisplay(int);
	@requestPermission(android.permission.ACCESS_SURFACE_FLINGER) public setOrientation(int,int,int);
	@requestPermission(android.permission.ACCESS_SURFACE_FLINGER) public setOrientation(int,int);
	@requestPermission(android.permission.ACCESS_SURFACE_FLINGER) public unfreezeDisplay(int);
}

class SurfaceSession {
	@requestPermission(android.permission.ACCESS_SURFACE_FLINGER) public <init>();
}

package android.webkit;

class GeolocationService {
	@requestPermission(android.permission.ACCESS_FINE_LOCATION) public registerForLocationUpdates();
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public setEnableGps(boolean);
	@requestPermission(android.permission.ACCESS_FINE_LOCATION) public start();
}

class WebChromeClient {
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions.Callback);
}

class WebIconDatabase {
	@requestPermission(com.android.browser.permission.READ_HISTORY_BOOKMARKS) public bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener);
}

class WebSettings {
	@requestPermission(android.permission.INTERNET) public setBlockNetworkLoads(boolean);
	@requestPermission(android.permission.INTERNET) public verifyNetworkAccess();
}

class WebView {
	@requestPermission(android.permission.INTERNET) public <init>(android.content.Context,android.util.AttributeSet,int);
	@requestPermission(android.permission.INTERNET) public <init>(android.content.Context,android.util.AttributeSet);
	@requestPermission(android.permission.INTERNET) public <init>(android.content.Context);
}

class WebViewCore {
	@requestPermission(android.permission.INTERNET) public <init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy,java.util.Map);
}

package android.widget;

class QuickContactBadge {
	@requestPermission(android.permission.READ_CONTACTS) public assignContactFromEmail(java.lang.String,boolean);
	@requestPermission(android.permission.READ_CONTACTS) public assignContactFromPhone(java.lang.String,boolean);
	@requestPermission(android.permission.READ_CONTACTS) public trigger(android.net.Uri);
}

package com.android.http.multipart;

class FilePart {
	@requestPermission(android.permission.INTERNET) public sendData(java.io.OutputStream);
	@requestPermission(android.permission.INTERNET) public sendDispositionHeader(java.io.OutputStream);
}

class Part {
	@requestPermission(android.permission.INTERNET) public send(java.io.OutputStream);
	@requestPermission(android.permission.INTERNET) public sendParts(java.io.OutputStream,com.android.http.multipart.Part[]);
	@requestPermission(android.permission.INTERNET) public sendParts(java.io.OutputStream,com.android.http.multipart.Part[],byte[]);
	@requestPermission(android.permission.INTERNET) public sendStart(java.io.OutputStream);
	@requestPermission(android.permission.INTERNET) public sendTransferEncodingHeader(java.io.OutputStream);
}

class StringPart {
	@requestPermission(android.permission.INTERNET) public sendData(java.io.OuputStream);
}

package com.android.internal.app;

class IBatteryStats$Stub$Proxy {
	@requestPermission(android.permission.BATTERY_STATS) public getAwakeTimeBattery();
	@requestPermission(android.permission.BATTERY_STATS) public getAwakeTimePlugged();
	@requestPermission(android.permission.BATTERY_STATS) public getStatistics();
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteFullWifiLockAcquired(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteFullWifiLockReleased(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteInputEvent();
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public notePhoneDataConnectionState(int,boolean);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public notePhoneOff();
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public notePhoneOn();
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public notePhoneSignalStrength(SignalStrength);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public notePhoneState(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteScanWifiLockAcquired(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteScanWifiLockReleased(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteScreenBrightness(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteScreenOff();
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteScreenOn();
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteStartGps(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteStartSensor(int,int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteStartWakelock(int,java.lang.String,int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteStopGps(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteStopSensor(int,int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteStopWakelock(int,java.lang.String,int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteUserActivity(int,int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteWifiMulticastDisabled(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteWifiMulticastEnabled(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteWifiOff(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteWifiOn(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteWifiRunning();
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteWifiStopped();
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public recordCurrentLevel(int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public setOnBattery(boolean,int);
}

class IUsageStats$Stub$Proxy {
	@requestPermission(android.permission.PACKAGE_USAGE_STATS) public getAllPkgUsageStats();
	@requestPermission(android.permission.PACKAGE_USAGE_STATS) public getPkgUsageStats(ComponentName);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteLaunchTime(ComponentName, int);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public notePauseComponent(ComponentName);
	@requestPermission(android.permission.UPDATE_DEVICE_STATS) public noteResumeComponent(ComponentName);
}

package com.android.internal.appwidget;

class IAppWidgetService$Stub$Proxy {
	@requestPermission(android.permission.BIND_APPWIDGET) public bindAppWidgetId(int,ComponentName);
}

package com.android.internal.os;

class IDropBoxManagerService$Stub$Proxy {
	@requestPermission(android.permission.READ_LOGS) public getNextEntry(java.lang.String,long);
}

package com.android.internal.telephony;

class CallerInfo {
	@requestPermission(android.permission.READ_CONTACTS) public getCallerId(android.content.Context,java.lang.String);
	@requestPermission(android.permission.READ_CONTACTS) public getCallerInfo(android.content.Context,java.lang.String);
	@requestPermission(android.permission.READ_PHONE_STATE) public markAsVoiceMail();
}

class IccPhoneBookInterfaceManager$Stub$Proxy {
	@requestPermission(android.permission.READ_CONTACTS) public getAdnRecordsInEf(int);
	@requestPermission(android.permission.WRITE_CONTACTS) public updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,java.lang.String);
	@requestPermission(android.permission.WRITE_CONTACTS) public updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

class IIccPhoneBook$Stub$Proxy {
	@requestPermission(android.permission.READ_CONTACTS) public getAdnRecordsInEf(int);
	@requestPermission(android.permission.WRITE_CONTACTS) public updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,java.lang.String);
	@requestPermission(android.permission.WRITE_CONTACTS) public updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

class IPhoneSubInfo$Stub$Proxy {
	@requestPermission(android.permission.READ_PHONE_STATE) public getDeviceId();
	@requestPermission(android.permission.READ_PHONE_STATE) public getDeviceSvn();
	@requestPermission(android.permission.READ_PHONE_STATE) public getIccSerialNumber();
	@requestPermission(android.permission.READ_PHONE_STATE) public getLine1AlphaTag();
	@requestPermission(android.permission.READ_PHONE_STATE) public getLine1Number();
	@requestPermission(android.permission.READ_PHONE_STATE) public getSubscriberId();
	@requestPermission(android.permission.READ_PHONE_STATE) public getVoiceMailAlphaTag();
	@requestPermission(android.permission.READ_PHONE_STATE) public getVoiceMailNumber();
}

class ISms$Stub$Proxy {
	@requestPermission(android.permission.RECEIVE_SMS) public copyMessageToIccEf(int,byte[],byte[]);
	@requestPermission(android.permission.RECEIVE_SMS) public getAllMessagesFromIccEf();
	@requestPermission(android.permission.SEND_SMS) public sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent);
	@requestPermission(android.permission.SEND_SMS) public sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List);
	@requestPermission(android.permission.SEND_SMS) public sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent);
	@requestPermission(android.permission.RECEIVE_SMS) public updateMessageOnIccEf(int,int,byte[]);
}

class ITelephony$Stub$Proxy {
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public answerRingingCall();
	@requestPermission(android.permission.CALL_PHONE) public call(java.lang.String);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public cancelMissedCallsNotification();
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public disableApnType(java.lang.String);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public disableDataConnectivity();
	@requestPermission(android.permission.CONTROL_LOCATION_UPDATES) public disableLocationUpdates();
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public enableApnType(java.lang.String);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public enableDataConnectivity();
	@requestPermission(android.permission.CONTROL_LOCATION_UPDATES) public enableLocationUpdates();
	@requestPermission(android.permission.CALL_PHONE) public endCall();
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getCellLocation();
	@requestPermission(android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION) public getNeighboringCellInfo();
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public handlePinMmi(java.lang.String);
	@requestPermission(android.permission.READ_PHONE_STATE) public isSimPinEnabled();
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public setRadio(boolean);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public silenceRinger();
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public supplyPin(java.lang.String);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public toggleRadioOnOff();
}

class ITelephonyRegistry$Stub$Proxy {
	@requestPermission(android.permission.READ_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION, NONE) public listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public notifyCallForwardingChanged(boolean);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public notifyCallState(int,java.lang.String);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public notifyCellLocation(android.os.Bundle);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public notifyDataActivity(int);
	@requestPermission(android.permission.MODIFY_PHONE_STATE, android.permission.BROADCAST_STICKY) public notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int);
	@requestPermission(android.permission.MODIFY_PHONE_STATE, android.permission.BROADCAST_STICKY) public notifyDataConnectionFailed(java.lang.String);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public notifyMessageWaitingChanged(boolean);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public notifyServiceState(android.telephony.ServiceState);
	@requestPermission(android.permission.MODIFY_PHONE_STATE) public notifySignalStrength(android.telephony.SignalStrength);
}

package com.android.server;

class WallpaperManagerService {
	@requestPermission(android.permission.BIND_WALLPAPER, android.permission.MANAGE_APP_TOKENS) public bindWallpaperComponentLocked(android.content.ComponentName);
	@requestPermission(android.permission.DUMP) public dump(java.io.FileDescriptor,java.io.PrintWriter,[Ljava.lang.String);
}

package java.lang;

class Runtime {
	@requestPermission(android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE) public exec(java.lang.String);
	@requestPermission(android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE) public exec(java.lang.String[]);
	@requestPermission(android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE) public exec(java.lang.String[],java.lang.String[]);
	@requestPermission(android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE) public exec(java.lang.String[],java.lang.String[],java.io.File);
	@requestPermission(android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE) public exec(java.lang.String,java.lang.String[]);
	@requestPermission(android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE) public exec(java.lang.String,java.lang.String[],java.io.File);
}

package java.net;

class DatagramSocket {
	@requestPermission(android.permission.INTERNET) public <init>();
	@requestPermission(android.permission.INTERNET) public <init>(int);
	@requestPermission(android.permission.INTERNET) public <init>(int,java.net.InetAddress);
	@requestPermission(android.permission.INTERNET) public <init>(java.net.SocketAddress);
}

class HttpURLConnection {
	@requestPermission(android.permission.INTERNET) public <init>(java.net.URL);
	@requestPermission(android.permission.INTERNET) public connect();
}

class MulticastSocket {
	@requestPermission(android.permission.INTERNET) public <init>();
	@requestPermission(android.permission.INTERNET) public <init>(int);
	@requestPermission(android.permission.INTERNET) public <init>(java.net.SocketAddress);
}

class NetworkInterface {
	@requestPermission(android.permission.INTERNET) public <init>();
	@requestPermission(android.permission.INTERNET) public <init>(java.lang.String,int,java.net.InetAddress);
}

class ServerSocket {
	@requestPermission(android.permission.INTERNET) public <init>();
	@requestPermission(android.permission.INTERNET) public <init>(int);
	@requestPermission(android.permission.INTERNET) public <init>(int,int);
	@requestPermission(android.permission.INTERNET) public <init>(int,int,java.net.InetAddress);
	@requestPermission(android.permission.INTERNET) public bind(java.net.SocketAddress);
	@requestPermission(android.permission.INTERNET) public bind(java.net.SocketAddress,int);
}

class Socket {
	@requestPermission(android.permission.INTERNET) public <init>();
	@requestPermission(android.permission.INTERNET) public <init>(java.lang.String,int);
	@requestPermission(android.permission.INTERNET) public <init>(java.lang.String,int,java.net.InetAddress,int);
	@requestPermission(android.permission.INTERNET) public <init>(java.lang.String,int,boolean);
	@requestPermission(android.permission.INTERNET) public <init>(java.net.InetAddress,int);
	@requestPermission(android.permission.INTERNET) public <init>(java.net.InetAddress,int,java.net.InetAddress,int);
	@requestPermission(android.permission.INTERNET) public <init>(java.net.InetAddress,int,boolean);
}

class URL {
	@requestPermission(android.permission.INTERNET) public getContent(java.lang.Class[]);
	@requestPermission(android.permission.INTERNET) public getContent();
	@requestPermission(android.permission.INTERNET) public openConnection(java.net.Proxy);
	@requestPermission(android.permission.INTERNET) public openConnection();
	@requestPermission(android.permission.INTERNET) public openStream();
}

class URLConnection {
	@requestPermission(android.permission.INTERNET) public connect();
	@requestPermission(android.permission.INTERNET) public getInputStream();
}

package org.apache.http.impl.client;

class DefaultHttpClient {
	@requestPermission(android.permission.INTERNET) public <init>();
	@requestPermission(android.permission.INTERNET) public <init>(org.apache.http.params.HttpParams);
	@requestPermission(android.permission.INTERNET) public <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.client.methods.HttpUriRequest);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext);
}

class HttpClient {
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.client.methods.HttpUriRequest);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest);
	@requestPermission(android.permission.INTERNET) public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext);
}
