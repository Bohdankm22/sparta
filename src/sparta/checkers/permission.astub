package android.accessibilityservice;

class AccessibilityService {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

package android.accounts;

class AbstractAccountAuthenticator {
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public checkBinderPermission();
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String []);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
}

class AbstractAccountAuthenticator$Transport {
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String [],android.os.Bundle);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String []);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
}

class AbstractAccountAuthenticator {
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String [],android.os.Bundle);
}

class AccountAuthenticatorActivity {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(boolean);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class AccountManager {
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public addAccount(java.lang.String,java.lang.String,java.lang.String [],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean);
	@RequiredPremissions("android.permission.USE_CREDENTIALS") public blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public clearPassword(android.accounts.Account);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public getAccounts();
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public getAccountsByType(java.lang.String);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public getAccountsByTypeAndFeatures(java.lang.String,java.lang.String [],android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.USE_CREDENTIALS") public getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.USE_CREDENTIALS") public getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String [],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public getPassword(android.accounts.Account);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public getUserData(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public hasFeatures(android.accounts.Account,java.lang.String [],android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS") public invalidateAuthToken(java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public peekAuthToken(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setAuthToken(android.accounts.Account,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setPassword(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setUserData(android.accounts.Account,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler);
}

class AccountManager$AmsTask {
	@RequiredPremissions("android.permission.GET_ACCOUNTS, android.permission.MANAGE_ACCOUNTS") public doWork();
	@RequiredPremissions("android.permission.GET_ACCOUNTS, android.permission.MANAGE_ACCOUNTS") public start();
}

class AccountManager$GetAuthTokenByTypeAndFeaturesTask {
	@RequiredPremissions("android.permission.GET_ACCOUNTS, android.permission.MANAGE_ACCOUNTS") public doWork();
	@RequiredPremissions("android.permission.GET_ACCOUNTS, android.permission.MANAGE_ACCOUNTS") public start();
}

class AccountManagerService {
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public addAccount(android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String [],boolean,android.os.Bundle);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public checkAuthenticateAccountsPermission(android.accounts.Account);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public checkManageAccountsOrUseCredentialsPermissions();
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public checkManageAccountsPermission();
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public checkReadAccountsPermission();
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public clearPassword(android.accounts.Account);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public getAccounts(java.lang.String);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String []);
	@RequiredPremissions("android.permission.USE_CREDENTIALS") public getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public getPassword(android.accounts.Account);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public getUserData(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String []);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS") public invalidateAuthToken(java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public peekAuthToken(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setAuthToken(android.accounts.Account,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setPassword(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setUserData(android.accounts.Account,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle);
}

class AccountManagerService$SimWatcher {
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public onReceive(android.content.Context,android.content.Intent);
}

class GrantCredentialsPermissionActivity {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(boolean);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class IAccountAuthenticator$Stub$Proxy {
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String [],android.os.Bundle);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String []);
	@RequiredPremissions("android.permission.ACCOUNT_MANAGER") public updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle);
}

class IAccountManager$Stub$Proxy {
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public addAccount(android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String [],boolean,android.os.Bundle);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public clearPassword(android.accounts.Account);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public getAccounts(java.lang.String);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String []);
	@RequiredPremissions("android.permission.USE_CREDENTIALS") public getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public getPassword(android.accounts.Account);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public getUserData(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String []);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS") public invalidateAuthToken(java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public peekAuthToken(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setAuthToken(android.accounts.Account,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setPassword(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.AUTHENTICATE_ACCOUNTS") public setUserData(android.accounts.Account,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.MANAGE_ACCOUNTS") public updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle);
}

package android.app;

class Activity {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("") public sendBroadcast(android.content.Intent);
	@RequiredPremissions("") public sendOrderedBroadcast(android.content.Intent,java.lang.String);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.INTERNET, NONE") public setContentView(int);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(boolean);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
	@RequiredPremissions("") public startActivity(android.content.Intent);
	@RequiredPremissions("") public startActivityForResult(android.content.Intent,int);
	@RequiredPremissions("") public startActivityFromChild(android.app.Activity,android.content.Intent,int);
	@RequiredPremissions("") public startActivityIfNeeded(android.content.Intent,int);
}

class ActivityGroup {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(boolean);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class ActivityManager {
	@RequiredPremissions("android.permission.CLEAR_APP_USER_DATA") public clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.FORCE_STOP_PACKAGES") public forceStopPackage(java.lang.String);
	@RequiredPremissions("android.permission.GET_TASKS") public getRecentTasks(int,int);
	@RequiredPremissions("android.permission.GET_TASKS") public getRunningTasks(int);
	@RequiredPremissions("android.permission.RESTART_PACKAGES, android.permission.KILL_BACKGROUND_PROCESSES") public killBackgroundProcesses(java.lang.String);
	@RequiredPremissions("android.permission.RESTART_PACKAGES, android.permission.KILL_BACKGROUND_PROCESSES") public restartPackage(java.lang.String);
}

class ActivityManagerNative {
	@RequiredPremissions("android.permission.CLEAR_APP_USER_DATA") public clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.FORCE_STOP_PACKAGES") public forceStopPackage(java.lang.String);
	@RequiredPremissions("android.permission.GET_TASKS") public getRecentTasks(int,int);
	@RequiredPremissions("android.permission.GET_TASKS") public getRunningTasks(int);
	@RequiredPremissions("android.permission.RESTART_PACKAGES, android.permission.KILL_BACKGROUND_PROCESSES") public killBackgroundProcesses(java.lang.String);
	@RequiredPremissions("android.permission.RESTART_PACKAGES, android.permission.KILL_BACKGROUND_PROCESSES") public restartPackage(java.lang.String);
}

package android.app.admin;

class DevicePolicyManager {
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback);
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public reportFailedPasswordAttempt();
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public reportSuccessfulPasswordAttempt();
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public setActiveAdmin(android.content.ComponentName);
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public setActivePasswordState(int,int);
}

class IDevicePolicyManager$Stub$Proxy {
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback);
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public reportFailedPasswordAttempt();
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public reportSuccessfulPasswordAttempt();
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public setActiveAdmin(android.content.ComponentName);
	@RequiredPremissions("android.permission.BIND_DEVICE_ADMIN") public setActivePasswordState(int,int);
}

package android.app;

class AlarmManager {
	@RequiredPremissions("android.permission.SET_TIME") public setTime(long);
	@RequiredPremissions("android.permission.SET_TIME_ZONE") public setTimeZone(java.lang.String);
}

class AliasActivity {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(boolean);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class Application {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

package android.app.backup;

class BackupAgent {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class BackupAgentHelper {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class BackupManager {
	@RequiredPremissions("android.permission.BACKUP") public beginRestoreSession();
	@RequiredPremissions("android.permission.BACKUP, NONE") public dataChanged(java.lang.String);
	@RequiredPremissions("android.permission.BACKUP") public requestRestore(android.app.backup.RestoreObserver);
}

class IBackupManager$Stub$Proxy {
	@RequiredPremissions("android.permission.BACKUP") public backupNow();
	@RequiredPremissions("android.permission.BACKUP") public beginRestoreSession(java.lang.String);
	@RequiredPremissions("android.permission.BACKUP") public clearBackupData(java.lang.String);
	@RequiredPremissions("android.permission.BACKUP, NONE") public dataChanged(java.lang.String);
	@RequiredPremissions("android.permission.BACKUP") public getCurrentTransport();
	@RequiredPremissions("android.permission.BACKUP") public isBackupEnabled();
	@RequiredPremissions("android.permission.BACKUP") public listAllTransports();
	@RequiredPremissions("android.permission.BACKUP") public selectBackupTransport(java.lang.String);
	@RequiredPremissions("android.permission.BACKUP AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS") public setAutoRestore(boolean);
	@RequiredPremissions("android.permission.BACKUP AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS") public setBackupEnabled(boolean);
}

package android.app;

class ContextImpl {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class ContextImpl$ApplicationContentResolver {
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public getCurrentSync();
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getIsSyncable(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getMasterSyncAutomatically();
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getPeriodicSyncs(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getSyncAutomatically(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public getSyncStatus(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public isSyncActive(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public isSyncPending(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_CONTACTS") public openFileDescriptor(android.net.Uri,java.lang.String);
	@RequiredPremissions("android.permission.READ_CONTACTS") public openInputStream(android.net.Uri);
	@RequiredPremissions("android.permission.READ_CONTACTS") public openOutputStream(android.net.Uri);
	@RequiredPremissions("android.permission.READ_CONTACTS") public query(android.net.Uri,java.lang.String [],java.lang.String,java.lang.String [],java.lang.String);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setIsSyncable(android.accounts.Account,java.lang.String,int);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setMasterSyncAutomatically(boolean);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setSyncAutomatically(android.accounts.Account,java.lang.String,boolean);
}

class ContextImpl$ApplicationPackageManager {
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName);
	@RequiredPremissions("android.permission.CLEAR_APP_USER_DATA") public clearApplicationUserData(String,IPackageDataObserver);
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public clearPackagePreferredActivities(String);
	@RequiredPremissions("android.permission.DELETE_CACHE_FILES") public deleteApplicationCacheFiles(String,IPackageDataObserver);
	@RequiredPremissions("android.permission.DELETE_PACKAGES") public deletePackage(String,IPackageDeleteObserver,int);
	@RequiredPremissions("android.permission.CLEAR_APP_CACHE") public freeStorage(long,IntentSender);
	@RequiredPremissions("android.permission.CLEAR_APP_CACHE") public freeStorageAndNotify(long,IPackageDataObserver);
	@RequiredPremissions("android.permission.GET_PACKAGE_SIZE") public getPackageSizeInfo(String,IPackageStatsObserver);
	@RequiredPremissions("android.permission.INSTALL_PACKAGES") public installPackage(Uri,IPackageInstallObserver,int,String);
	@RequiredPremissions("android.permission.MOVE_PACKAGE") public movePackage(String,IPackageMoveObserver,int);
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public replacePreferredActivity(IntentFilter,int,ComponentName[],ComponentName);
	@RequiredPremissions("android.permission.CHANGE_COMPONENT_ENABLED_STATE") public setApplicationEnabledSetting(String,int,int);
	@RequiredPremissions("android.permission.CHANGE_COMPONENT_ENABLED_STATE") public setComponentEnabledSetting(ComponentName,int,int);
}

class ExpandableListActivity {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(boolean);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class FullBackupAgent {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class IActivityManager$Stub$Proxy {
	@RequiredPremissions("android.permission.BACKUP") public bindBackupAgent(android.content.pm.ApplicationInfo,int);
	@RequiredPremissions("android.permission.CLEAR_APP_USER_DATA") public clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.FORCE_STOP_PACKAGES") public forceStopPackage(java.lang.String);
	@RequiredPremissions("android.permission.GET_TASKS") public getRecentTasks(int,int);
	@RequiredPremissions("android.permission.GET_TASKS") public getTasks(int,int,android.app.IThumbnailReceiver);
	@RequiredPremissions("android.permission.KILL_BACKGROUND_PROCESSES, android.permission.RESTART_PACKAGES") public killBackgroundProcesses(java.lang.String);
	@RequiredPremissions("android.permission.REORDER_TASKS") public moveTaskBackwards(int);
	@RequiredPremissions("android.permission.REORDER_TASKS") public moveTaskToBack(int);
	@RequiredPremissions("android.permission.REORDER_TASKS") public moveTaskToFront(int);
	@RequiredPremissions("android.permission.SET_ACTIVITY_WATCHER") public profileControl(java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor);
	@RequiredPremissions("android.permission.STOP_APP_SWITCHES") public resumeAppSwitches();
	@RequiredPremissions("android.permission.SET_ACTIVITY_WATCHER") public setActivityController(android.app.IActivityController);
	@RequiredPremissions("android.permission.SET_ALWAYS_FINISH") public setAlwaysFinish(boolean);
	@RequiredPremissions("android.permission.SET_DEBUG_APP") public setDebugApp(java.lang.String,boolean,boolean);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(android.os.IBinder,boolean);
	@RequiredPremissions("android.permission.SET_PROCESS_LIMIT") public setProcessForeground(android.os.IBinder,int,boolean);
	@RequiredPremissions("android.permission.SET_PROCESS_LIMIT") public setProcessLimit(int);
	@RequiredPremissions("android.permission.SHUTDOWN") public shutdown(int);
	@RequiredPremissions("android.permission.SIGNAL_PERSISTENT_PROCESSES") public signalPersistentProcesses(int);
	@RequiredPremissions("android.permission.STOP_APP_SWITCHES") public stopAppSwitches();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public unbroadcastIntent(android.app.IApplicationThread,android.content.Intent);
	@RequiredPremissions("android.permission.FORCE_BACK") public unhandledBack(int);
	@RequiredPremissions("android.permission.CHANGE_CONFIGURATION") public updateConfiguration(android.content.res.Configuration);
}

class IAlarmManager$Stub$Proxy {
	@RequiredPremissions("android.permission.SET_TIME") public setTime(long);
	@RequiredPremissions("android.permission.SET_TIME_ZONE") public setTimeZone(java.lang.String);
}

class Instrumentation {
	@RequiredPremissions("android.permission.INJECT_EVENTS") public invokeContextMenuAction(android.app.Activity,int,int);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public sendCharacterSync(int);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public sendKeyDownUpSync(int);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public sendKeySync(android.view.KeyEvent);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public sendPointerSync(android.view.MotionEvent);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public sendStringSync(java.lang.String);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public sendTrackballEventSync(android.view.MotionEvent);
}

class IntentService {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class IStatusBar$Stub$Proxy {
	@RequiredPremissions("android.permission.EXPAND_STATUS_BAR") public activate();
	@RequiredPremissions("android.permission.STATUS_BAR") public addIcon(java.lang.String,java.lang.String,int,int);
	@RequiredPremissions("android.permission.EXPAND_STATUS_BAR") public deactivate();
	@RequiredPremissions("android.permission.STATUS_BAR") public disable(int,android.os.IBinder,java.lang.String);
	@RequiredPremissions("android.permission.STATUS_BAR") public removeIcon(android.os.IBinder);
	@RequiredPremissions("android.permission.EXPAND_STATUS_BAR") public toggle();
	@RequiredPremissions("android.permission.STATUS_BAR") public updateIcon(android.os.IBinder,java.lang.String,java.lang.String,int,int);
}

class IWallpaperManager$Stub$Proxy {
	@RequiredPremissions("android.permission.SET_WALLPAPER_HINTS") public setDimensionHints(int,int);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.lang.String);
	@RequiredPremissions("android.permission.SET_WALLPAPER_COMPONENT") public setWallpaperComponent(android.content.ComponentName);
}

class KeyguardManager {
	@RequiredPremissions("android.permission.DISABLE_KEYGUARD") public exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult);
}

class KeyguardManager$KeyguardLock {
	@RequiredPremissions("android.permission.DISABLE_KEYGUARD") public disableKeyguard();
	@RequiredPremissions("android.permission.DISABLE_KEYGUARD") public reenableKeyguard();
}

class ListActivity {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(boolean);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class NotificationManager {
	@RequiredPremissions("android.permission.VIBRATE, NONE") public notify(int,android.app.Notification);
	@RequiredPremissions("android.permission.VIBRATE, NONE") public notify(java.lang.String,int,android.app.Notification);
}

class Service {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("") public sendBroadcast(android.content.Intent);
	@RequiredPremissions("") public sendOrderedBroadcast(android.content.Intent,java.lang.String);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
	@RequiredPremissions("") public startActivity(android.content.Intent);
	@RequiredPremissions("") public startService(android.content.Intent);
}

class StatusBarManager {
	@RequiredPremissions("android.permission.STATUS_BAR") public addIcon(java.lang.String,int,int);
	@RequiredPremissions("android.permission.EXPAND_STATUS_BAR") public collapse();
	@RequiredPremissions("android.permission.STATUS_BAR") public disable(int);
	@RequiredPremissions("android.permission.EXPAND_STATUS_BAR") public expand();
	@RequiredPremissions("android.permission.STATUS_BAR") public removeIcon(android.os.IBinder);
	@RequiredPremissions("android.permission.EXPAND_STATUS_BAR") public toggle();
	@RequiredPremissions("android.permission.STATUS_BAR") public updateIcon(android.os.IBinder,java.lang.String,int,int);
}

class TabActivity {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.PERSISTENT_ACTIVITY") public setPersistent(boolean);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class WallpaperManager {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clear();
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setBitmap(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setResource(int);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setStream(java.io.InputStream);
	@RequiredPremissions("android.permission.SET_WALLPAPER_HINTS") public suggestDesiredDimensions(int,int);
}

package android.appwidget;

class AppWidgetManager {
	@RequiredPremissions("android.permission.BIND_APPWIDGET") public bindAppWidgetId(int,android.content.ComponentName);
}

package android.bluetooth;

class BluetoothA2dp {
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH") public connectSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH") public disconnectSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public getConnectedSinks();
	@RequiredPremissions("android.permission.BLUETOOTH") public getNonDisconnectedSinks();
	@RequiredPremissions("android.permission.BLUETOOTH") public getSinkPriority(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public getSinkState(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public isSinkConnected(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public resumeSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS") public setSinkPriority(android.bluetooth.BluetoothDevice,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public suspendSink(android.bluetooth.BluetoothDevice);
}

class BluetoothAdapter {
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelDiscovery();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public disable();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public enable();
	@RequiredPremissions("android.permission.BLUETOOTH") public getAddress();
	@RequiredPremissions("android.permission.BLUETOOTH") public getBondedDevices();
	@RequiredPremissions("android.permission.BLUETOOTH") public getDiscoverableTimeout();
	@RequiredPremissions("android.permission.BLUETOOTH") public getName();
	@RequiredPremissions("android.permission.BLUETOOTH") public getScanMode();
	@RequiredPremissions("android.permission.BLUETOOTH") public getState();
	@RequiredPremissions("android.permission.BLUETOOTH") public isDiscovering();
	@RequiredPremissions("android.permission.BLUETOOTH") public isEnabled();
	@RequiredPremissions("android.permission.BLUETOOTH") public listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH") public setDiscoverableTimeout(int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH") public setName(java.lang.String);
	@RequiredPremissions("android.permission.WRITE_SECURE_SETTINGS, android.permission.BLUETOOTH") public setScanMode(int,int);
	@RequiredPremissions("android.permission.WRITE_SECURE_SETTINGS, android.permission.BLUETOOTH") public setScanMode(int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public startDiscovery();
}

class BluetoothDevice {
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelBondProcess();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelPairingUserInput();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public createBond();
	@RequiredPremissions("android.permission.BLUETOOTH") public createRfcommSocketToServiceRecord(java.util.UUID);
	@RequiredPremissions("android.permission.BLUETOOTH") public fetchUuidsWithSdp();
	@RequiredPremissions("android.permission.BLUETOOTH") public getBondState();
	@RequiredPremissions("android.permission.BLUETOOTH") public getName();
	@RequiredPremissions("android.permission.BLUETOOTH") public getServiceChannel(android.os.ParcelUuid);
	@RequiredPremissions("android.permission.BLUETOOTH") public getUuids();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public removeBond();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPairingConfirmation(boolean);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPasskey(int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPin([B);
}

class BluetoothHeadset {
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public connectHeadset(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public disconnectHeadset();
	@RequiredPremissions("android.permission.BLUETOOTH") public getBatteryUsageHint();
	@RequiredPremissions("android.permission.BLUETOOTH") public getCurrentHeadset();
	@RequiredPremissions("android.permission.BLUETOOTH") public getPriority(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public getState();
	@RequiredPremissions("android.permission.BLUETOOTH") public isConnected(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPriority(android.bluetooth.BluetoothDevice,int);
	@RequiredPremissions("android.permission.BLUETOOTH") public startVoiceRecognition();
	@RequiredPremissions("android.permission.BLUETOOTH") public stopVoiceRecognition();
}

class BluetoothPbap {
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public disconnect();
	@RequiredPremissions("android.permission.BLUETOOTH") public getClient();
	@RequiredPremissions("android.permission.BLUETOOTH") public getState();
	@RequiredPremissions("android.permission.BLUETOOTH") public isConnected(android.bluetooth.BluetoothDevice);
}

class BluetoothSocket {
	@RequiredPremissions("android.permission.BLUETOOTH") public connect();
}

class HeadsetBase {
	@RequiredPremissions("android.permission.WAKE_LOCK") public acquireWakeLock();
	@RequiredPremissions("android.permission.WAKE_LOCK") public finalize();
	@RequiredPremissions("android.permission.WAKE_LOCK") public handleInput(java.lang.String);
	@RequiredPremissions("android.permission.WAKE_LOCK") public releaseWakeLock();
}

class IBluetooth$Stub$Proxy {
	@RequiredPremissions("android.permission.BLUETOOTH") public addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelBondProcess(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelDiscovery();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelPairingUserInput(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public createBond(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public disable(boolean);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public enable();
	@RequiredPremissions("android.permission.BLUETOOTH") public fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback);
	@RequiredPremissions("android.permission.BLUETOOTH") public getAddress();
	@RequiredPremissions("android.permission.BLUETOOTH") public getBluetoothState();
	@RequiredPremissions("android.permission.BLUETOOTH") public getBondState(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getDiscoverableTimeout();
	@RequiredPremissions("android.permission.BLUETOOTH") public getName();
	@RequiredPremissions("android.permission.BLUETOOTH") public getRemoteClass(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getRemoteName(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid);
	@RequiredPremissions("android.permission.BLUETOOTH") public getRemoteUuids(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getScanMode();
	@RequiredPremissions("android.permission.BLUETOOTH") public getTrustState(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public isDiscovering();
	@RequiredPremissions("android.permission.BLUETOOTH") public isEnabled();
	@RequiredPremissions("android.permission.BLUETOOTH") public listBonds();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public removeBond(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public removeServiceRecord(int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH") public setDiscoverableTimeout(int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH") public setName(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPairingConfirmation(java.lang.String,boolean);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPasskey(java.lang.String,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPin(java.lang.String,[B);
	@RequiredPremissions("android.permission.WRITE_SECURE_SETTINGS, android.permission.BLUETOOTH") public setScanMode(int,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setTrust(java.lang.String,boolean);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public startDiscovery();
}

class IBluetoothA2dp$Stub$Proxy {
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH") public connectSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH") public disconnectSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public getConnectedSinks();
	@RequiredPremissions("android.permission.BLUETOOTH") public getNonDisconnectedSinks();
	@RequiredPremissions("android.permission.BLUETOOTH") public getSinkPriority(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public getSinkState(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH, android.permission.MODIFY_AUDIO_SETTINGS") public resumeSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS") public setSinkPriority(android.bluetooth.BluetoothDevice,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH AND android.permission.MODIFY_AUDIO_SETTINGS") public suspendSink(android.bluetooth.BluetoothDevice);
}

class IBluetoothHeadset$Stub$Proxy {
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public connectHeadset(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public disconnectHeadset();
	@RequiredPremissions("android.permission.BLUETOOTH") public getBatteryUsageHint();
	@RequiredPremissions("android.permission.BLUETOOTH") public getCurrentHeadset();
	@RequiredPremissions("android.permission.BLUETOOTH") public getPriority(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public getState();
	@RequiredPremissions("android.permission.BLUETOOTH") public isConnected(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPriority(android.bluetooth.BluetoothDevice,int);
	@RequiredPremissions("android.permission.BLUETOOTH") public startVoiceRecognition();
	@RequiredPremissions("android.permission.BLUETOOTH") public stopVoiceRecognition();
}

class IBluetoothPbap$Stub$Proxy {
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public connect(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public disconnect();
	@RequiredPremissions("android.permission.BLUETOOTH") public getClient();
	@RequiredPremissions("android.permission.BLUETOOTH") public getState();
	@RequiredPremissions("android.permission.BLUETOOTH") public isConnected(android.bluetooth.BluetoothDevice);
}

class ScoSocket {
	@RequiredPremissions("android.permission.WAKE_LOCK") public acquireWakeLock();
	@RequiredPremissions("android.permission.WAKE_LOCK") public close();
	@RequiredPremissions("android.permission.WAKE_LOCK") public finalize();
	@RequiredPremissions("android.permission.WAKE_LOCK") public releaseWakeLock();
	@RequiredPremissions("android.permission.WAKE_LOCK") public releaseWakeLockNow();
}

package android.content;

class ContentResolver {
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public getCurrentSync();
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getIsSyncable(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getMasterSyncAutomatically();
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getPeriodicSyncs(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getSyncAutomatically(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public getSyncStatus(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public isSyncActive(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public isSyncPending(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_CONTACTS") public openFileDescriptor(android.net.Uri,java.lang.String);
	@RequiredPremissions("android.permission.READ_CONTACTS") public openInputStream(android.net.Uri);
	@RequiredPremissions("android.permission.READ_CONTACTS") public openOutputStream(android.net.Uri);
	@RequiredPremissions("android.permission.READ_CONTACTS") public query(android.net.Uri,java.lang.String [],java.lang.String,java.lang.String [],java.lang.String);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setIsSyncable(android.accounts.Account,java.lang.String,int);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setMasterSyncAutomatically(boolean);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setSyncAutomatically(android.accounts.Account,java.lang.String,boolean);
}

class ContentService {
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public <init>(android.content.Context,boolean);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long);
	@RequiredPremissions("android.permission.DUMP") public dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String []);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public getCurrentSync();
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getIsSyncable(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getMasterSyncAutomatically();
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getPeriodicSyncs(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getSyncAutomatically(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public getSyncStatus(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public isSyncActive(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public isSyncPending(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.GET_ACCOUNTS") public main(android.content.Context,boolean);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setIsSyncable(android.accounts.Account,java.lang.String,int);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setMasterSyncAutomatically(boolean);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setSyncAutomatically(android.accounts.Account,java.lang.String,boolean);
}

class Context {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("") public sendBroadcast(android.content.Intent);
	@RequiredPremissions("") public sendOrderedBroadcast(android.content.Intent,java.lang.String);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
	@RequiredPremissions("") public startActivity(android.content.Intent);
	@RequiredPremissions("") public startService(android.content.Intent);
}

class ContextWrapper {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("") public sendBroadcast(android.content.Intent);
	@RequiredPremissions("") public sendOrderedBroadcast(android.content.Intent,java.lang.String);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
	@RequiredPremissions("") public startActivity(android.content.Intent);
	@RequiredPremissions("") public startService(android.content.Intent);
}

class IContentService$Stub$Proxy {
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public getCurrentSync();
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getIsSyncable(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getMasterSyncAutomatically();
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getPeriodicSyncs(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_SETTINGS") public getSyncAutomatically(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public getSyncStatus(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public isSyncActive(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.READ_SYNC_STATS") public isSyncPending(android.accounts.Account,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setIsSyncable(android.accounts.Account,java.lang.String,int);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setMasterSyncAutomatically(boolean);
	@RequiredPremissions("android.permission.WRITE_SYNC_SETTINGS") public setSyncAutomatically(android.accounts.Account,java.lang.String,boolean);
}

class MutableContextWrapper {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

package android.content.pm;

class IPackageManager$Stub$Proxy {
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName [],android.content.ComponentName);
	@RequiredPremissions("android.permission.CLEAR_APP_USER_DATA") public clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public clearPackagePreferredActivities(java.lang.String);
	@RequiredPremissions("android.permission.DELETE_CACHE_FILES") public deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.DELETE_PACKAGES") public deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int);
	@RequiredPremissions("android.permission.CLEAR_APP_CACHE") public freeStorage(long,android.content.IntentSender);
	@RequiredPremissions("android.permission.CLEAR_APP_CACHE") public freeStorageAndNotify(long,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.INSTALL_PACKAGES") public installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String);
	@RequiredPremissions("android.permission.MOVE_PACKAGE") public movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int);
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName [],android.content.ComponentName);
	@RequiredPremissions("android.permission.CHANGE_COMPONENT_ENABLED_STATE") public setApplicationEnabledSetting(java.lang.String,int,int);
	@RequiredPremissions("android.permission.CHANGE_COMPONENT_ENABLED_STATE") public setComponentEnabledSetting(android.content.ComponentName,int,int);
	@RequiredPremissions("android.permission.WRITE_SECURE_SETTINGS") public setInstallLocation(int);
	@RequiredPremissions("") public updateExternalMediaStatus(boolean,boolean);
}

class PackageManager {
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName);
	@RequiredPremissions("android.permission.CLEAR_APP_USER_DATA") public clearApplicationUserData(java.lang.String,IPackageDataObserver);
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public clearPackagePreferredActivities(java.lang.String);
	@RequiredPremissions("android.permission.DELETE_CACHE_FILES") public deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.DELETE_PACKAGES") public deletePackage(java.lang.String,IPackageDeleteObserver,int);
	@RequiredPremissions("android.permission.CLEAR_APP_CACHE") public freeStorage(long,android.content.IntentSender);
	@RequiredPremissions("android.permission.CLEAR_APP_CACHE") public freeStorageAndNotify(long,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.GET_PACKAGE_SIZE") public getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver);
	@RequiredPremissions("android.permission.INSTALL_PACKAGES") public installPackage(Uri,IPackageInstallObserver,int,java.lang.String);
	@RequiredPremissions("android.permission.MOVE_PACKAGE") public movePackage(java.lang.String,IPackageMoveObserver,int);
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName);
	@RequiredPremissions("android.permission.CHANGE_COMPONENT_ENABLED_STATE") public setApplicationEnabledSetting(java.lang.String,int,int);
	@RequiredPremissions("android.permission.CHANGE_COMPONENT_ENABLED_STATE") public setComponentEnabledSetting(android.content.ComponentName,int,int);
}

package android.app;

class ContextImpl$ApplicationPackageManager {
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName);
	@RequiredPremissions("android.permission.CLEAR_APP_USER_DATA") public clearApplicationUserData(java.lang.String,IPackageDataObserver);
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public clearPackagePreferredActivities(java.lang.String);
	@RequiredPremissions("android.permission.DELETE_CACHE_FILES") public deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.DELETE_PACKAGES") public deletePackage(java.lang.String,IPackageDeleteObserver,int);
	@RequiredPremissions("android.permission.CLEAR_APP_CACHE") public freeStorage(long,android.content.IntentSender);
	@RequiredPremissions("android.permission.CLEAR_APP_CACHE") public freeStorageAndNotify(long,android.content.pm.IPackageDataObserver);
	@RequiredPremissions("android.permission.GET_PACKAGE_SIZE") public getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver);
	@RequiredPremissions("android.permission.INSTALL_PACKAGES") public installPackage(Uri,IPackageInstallObserver,int,java.lang.String);
	@RequiredPremissions("android.permission.MOVE_PACKAGE") public movePackage(java.lang.String,IPackageMoveObserver,int);
	@RequiredPremissions("android.permission.SET_PREFERRED_APPLICATIONS") public replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName);
	@RequiredPremissions("android.permission.CHANGE_COMPONENT_ENABLED_STATE") public setApplicationEnabledSetting(java.lang.String,int,int);
	@RequiredPremissions("android.permission.CHANGE_COMPONENT_ENABLED_STATE") public setComponentEnabledSetting(android.content.ComponentName,int,int);
}

package android.hardware;

class Camera {
	@RequiredPremissions("android.permission.CAMERA") public native_setup(java.lang.Object);
	@RequiredPremissions("android.permission.CAMERA") public open();
}

package android.inputmethodservice;

class AbstractInputMethodService {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

package android.location;

class ILocationManager$Stub$Proxy {
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION") public addGpsStatusListener(android.location.IGpsStatusListener);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION") public addProximityAlert(double,double,float,long,android.app.PendingIntent);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public clearTestProviderEnabled(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public clearTestProviderLocation(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public clearTestProviderStatus(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getLastKnownLocation(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getProviderInfo(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getProviders(boolean);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public isProviderEnabled(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public removeTestProvider(java.lang.String);
	@RequiredPremissions("android.permission.INSTALL_LOCATION_PROVIDER") public reportLocation(android.location.Location,boolean);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS") public sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public setTestProviderEnabled(java.lang.String,boolean);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public setTestProviderLocation(java.lang.String,android.location.Location);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public setTestProviderStatus(java.lang.String,int,android.os.Bundle,long);
}

class LocationManager {
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public _requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public _requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION") public addGpsStatusListener(android.location.GpsStatus$Listener);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION") public addNmeaListener(android.location.GpsStatus$NmeaListener);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION") public addProximityAlert(double,double,float,long,android.app.PendingIntent);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public best(java.util.List);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public clearTestProviderEnabled(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public clearTestProviderLocation(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public clearTestProviderStatus(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getBestProvider(android.location.Criteria,boolean);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getLastKnownLocation(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getProvider(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getProviders(android.location.Criteria,boolean);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getProviders(boolean);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public isProviderEnabled(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public removeTestProvider(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS") public sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public setTestProviderEnabled(java.lang.String,boolean);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public setTestProviderLocation(java.lang.String,android.location.Location);
	@RequiredPremissions("android.permission.ACCESS_MOCK_LOCATION") public setTestProviderStatus(java.lang.String,int,android.os.Bundle,long);
}

package android.media;

class AsyncPlayer {
	@RequiredPremissions("android.permission.WAKE_LOCK") public acquireWakeLock();
	@RequiredPremissions("android.permission.WAKE_LOCK") public enqueueLocked(android.media.AsyncPlayer$Command);
	@RequiredPremissions("android.permission.WAKE_LOCK") public play(android.content.Context,android.net.Uri,boolean,int);
	@RequiredPremissions("android.permission.WAKE_LOCK") public releaseWakeLock();
	@RequiredPremissions("android.permission.WAKE_LOCK") public stop();
}

class AudioManager {
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public isBluetoothA2dpOn();
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public isWiredHeadsetOn();
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setBluetoothScoOn(boolean);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setMicrophoneMute(boolean);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setMode(int);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setParameter(java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setParameters(java.lang.String);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setSpeakerphoneOn(boolean);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public startBluetoothSco();
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public stopBluetoothSco();
}

class AudioRecord {
	@RequiredPremissions("android.permission.RECORD_AUDIO") public <init>(int,int,int,int,int);
}

class AudioService {
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setBluetoothScoOn(boolean);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setMode(int,android.os.IBinder);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setSpeakerphoneOn(boolean);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public startBluetoothSco(android.os.IBinder);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public stopBluetoothSco(android.os.IBinder);
}

class IAudioService$Stub$Proxy {
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setBluetoothScoOn(boolean);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setMode(int,android.os.IBinder);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public setSpeakerphoneOn(boolean);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public startBluetoothSco(android.os.IBinder);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public stopBluetoothSco(android.os.IBinder);
}

class MediaPlayer {
	@RequiredPremissions("android.permission.WAKE_LOCK, NONE") public start();
	@RequiredPremissions("android.permission.WAKE_LOCK, NONE") public stayAwake(boolean);
	@RequiredPremissions("android.permission.WAKE_LOCK, NONE") public stop();
}

class MediaRecorder {
	@RequiredPremissions("android.permission.RECORD_AUDIO") public setAudioSource(int);
	@RequiredPremissions("android.permission.CAMERA") public setVideoSource(int);
}

class RingtoneManager {
	@RequiredPremissions("android.permission.WRITE_SETTINGS") public setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri);
}

package android.net;

class ConnectivityManager {
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getActiveNetworkInfo();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getAllNetworkInfo();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getLastTetherError(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getMobileDataEnabled();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getNetworkInfo(int);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getNetworkPreference();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetherableIfaces();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetherableUsbRegexs();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetherableWifiRegexs();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetheredIfaces();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetheringErroredIfaces();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public isTetheringSupported();
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public requestRouteToHost(int,int);
	@RequiredPremissions("android.permission.CHANGE_BACKGROUND_DATA_SETTING") public setBackgroundDataSetting(boolean);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS, android.permission.BACKUP") public setMobileDataEnabled(boolean);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS, android.permission.BACKUP") public setNetworkPreference(int);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.CHANGE_WIFI_STATE") public setRadio(int,boolean);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.CHANGE_WIFI_STATE") public setRadios(boolean);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE") public startUsingNetworkFeature(int,java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public stopUsingNetworkFeature(int,java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE") public tether(java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE") public untether(java.lang.String);
}

class Downloads$ById {
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public deleteDownload(android.content.Context,long);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public getMimeTypeForId(android.content.Context,long);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public getStatus(android.content.Context,long);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public openDownload(android.content.Context,long,java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public openDownloadStream(android.content.Context,long);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

class Downloads$ByUri {
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public getCurrentOtaDownloads(android.content.Context,java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public getProgressCursor(android.content.Context,long);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public getStatus(android.content.Context,java.lang.String,long);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

class Downloads$DownloadBase {
	@RequiredPremissions("android.permission.ACCESS_DOWNLOAD_MANAGER") public startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

package android.net.http;

class RequestQueue {
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public enablePlatformNotifications();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public setProxyConfig();
}

package android.net;

class IConnectivityManager$Stub$Proxy {
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getActiveNetworkInfo();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getAllNetworkInfo();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getLastTetherError(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getMobileDataEnabled();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getNetworkInfo(int);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getNetworkPreference();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetherableIfaces();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetherableUsbRegexs();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetherableWifiRegexs();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetheredIfaces();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getTetheringErroredIfaces();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public isTetheringSupported();
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public requestRouteToHost(int,int);
	@RequiredPremissions("android.permission.CHANGE_BACKGROUND_DATA_SETTING") public setBackgroundDataSetting(boolean);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS, android.permission.BACKUP") public setMobileDataEnabled(boolean);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS, android.permission.BACKUP") public setNetworkPreference(int);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.CHANGE_WIFI_STATE") public setRadio(int,boolean);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.CHANGE_WIFI_STATE") public setRadios(boolean);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE AND android.permission.CHANGE_NETWORK_STATE") public startUsingNetworkFeature(int,java.lang.String,android.os.IBinder);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public stopUsingNetworkFeature(int,java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE") public tether(java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE, android.permission.ACCESS_NETWORK_STATE") public untether(java.lang.String);
}

class IThrottleManager$Stub$Proxy {
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getByteCount(java.lang.String,int,int,int);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getCliffLevel(java.lang.String,int);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getCliffThreshold(java.lang.String,int);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getHelpUri();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getPeriodStartTime(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getResetTime(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getThrottle(java.lang.String);
}

class MobileDataStateTracker {
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public reconnect();
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public setRadio(boolean);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public teardown();
}

class NetworkInfo {
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public isConnectedOrConnecting();
}

class ThrottleManager {
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getByteCount(java.lang.String,int,int,int);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getCliffLevel(java.lang.String,int);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getCliffThreshold(java.lang.String,int);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getHelpUri();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getPeriodStartTime(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getResetTime(java.lang.String);
}

package android.net.wifi;

class IWifiManager$Stub$Proxy {
	@RequiredPremissions("android.permission.CHANGE_WIFI_MULTICAST_STATE") public acquireMulticastLock(android.os.IBinder,java.lang.String);
	@RequiredPremissions("android.permission.WAKE_LOCK") public acquireWifiLock(android.os.IBinder,int,java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public addOrUpdateNetwork(android.net.wifi.WifiConfiguration);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public disableNetwork(int);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public disconnect();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public enableNetwork(int,boolean);
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getConfiguredNetworks();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getConnectionInfo();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getDhcpInfo();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getNumAllowedChannels();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getScanResults();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getValidChannelCounts();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getWifiApEnabledState();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getWifiEnabledState();
	@RequiredPremissions("android.permission.CHANGE_WIFI_MULTICAST_STATE") public initializeMulticastFiltering();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public isMulticastEnabled();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public pingSupplicant();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public reassociate();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public reconnect();
	@RequiredPremissions("android.permission.CHANGE_WIFI_MULTICAST_STATE") public releaseMulticastLock();
	@RequiredPremissions("android.permission.WAKE_LOCK") public releaseWifiLock(android.os.IBinder);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public removeNetwork(int);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public saveConfiguration();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public setNumAllowedChannels(int,boolean);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public setWifiEnabled(boolean);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public startScan(boolean);
}

class WifiManager {
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public addNetwork(android.net.wifi.WifiConfiguration);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public addOrUpdateNetwork(android.net.wifi.WifiConfiguration);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public disableNetwork(int);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public disconnect();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public enableNetwork(int,boolean);
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getConfiguredNetworks();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getConnectionInfo();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getDhcpInfo();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getNumAllowedChannels();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getScanResults();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getValidChannelCounts();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getWifiApState();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public getWifiState();
	@RequiredPremissions("android.permission.CHANGE_WIFI_MULTICAST_STATE") public initializeMulticastFiltering();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public isMulticastEnabled();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public isWifiApEnabled();
	@RequiredPremissions("android.permission.ACCESS_WIFI_STATE") public isWifiEnabled();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public pingSupplicant();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public reassociate();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public reconnect();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public removeNetwork(int);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE, android.permission.BACKUP") public saveConfiguration();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public setNumAllowedChannels(int,boolean);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public setWifiEnabled(boolean);
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public startScan();
	@RequiredPremissions("android.permission.CHANGE_WIFI_STATE") public startScanActive();
}

class WifiManager$MulticastLock {
	@RequiredPremissions("android.permission.CHANGE_WIFI_MULTICAST_STATE") public acquire();
	@RequiredPremissions("android.permission.CHANGE_WIFI_MULTICAST_STATE, NONE") public finalize();
	@RequiredPremissions("android.permission.CHANGE_WIFI_MULTICAST_STATE") public release();
}

class WifiManager$WifiLock {
	@RequiredPremissions("android.permission.WAKE_LOCK") public acquire();
	@RequiredPremissions("android.permission.WAKE_LOCK, NONE") public finalize();
	@RequiredPremissions("android.permission.WAKE_LOCK") public release();
}

package android.os;

class DropBoxManager {
	@RequiredPremissions("android.permission.READ_LOGS") public getNextEntry(java.lang.String,long);
}

class IHardwareService$Stub$Proxy {
	@RequiredPremissions("android.permission.FLASHLIGHT OR android.permission.HARDWARE_TEST") public setFlashlightEnabled(boolean);
}

class INetworkManagementService$Stub$Proxy {
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public detachPppd(java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public disableNat(java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public enableNat(java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getDnsForwarders();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getInterfaceRxCounter(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getInterfaceRxThrottle(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getInterfaceTxCounter(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getInterfaceTxThrottle(java.lang.String);
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public getIpForwardingEnabled();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public isTetheringStarted();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public isUsbRNDISStarted();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public listInterfaces();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public listTetheredInterfaces();
	@RequiredPremissions("android.permission.ACCESS_NETWORK_STATE") public listTtys();
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public setInterfaceThrottle(java.lang.String,int,int);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public setIpForwardingEnabled(boolean);
	@RequiredPremissions("android.permission.SHUTDOWN") public shutdown();
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE AND android.permission.CHANGE_WIFI_STATE") public startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public startUsbRNDIS();
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE AND android.permission.CHANGE_WIFI_STATE") public stopAccessPoint();
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public stopTethering();
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public stopUsbRNDIS();
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public tetherInterface(java.lang.String);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public unregisterObserver(android.net.INetworkManagementEventObserver);
	@RequiredPremissions("android.permission.CHANGE_NETWORK_STATE") public untetherInterface(java.lang.String);
}

class IPowerManager$Stub$Proxy {
	@RequiredPremissions("android.permission.WAKE_LOCK") public acquireWakeLock(int,android.os.IBinder,java.lang.String);
	@RequiredPremissions("android.permission.DEVICE_POWER") public clearUserActivityTimeout(long,long);
	@RequiredPremissions("android.permission.REBOOT") public crash(java.lang.String);
	@RequiredPremissions("android.permission.DEVICE_POWER") public goToSleep(long);
	@RequiredPremissions("android.permission.DEVICE_POWER") public goToSleepWithReason(long,int);
	@RequiredPremissions("android.permission.DEVICE_POWER") public preventScreenOn(boolean);
	@RequiredPremissions("android.permission.REBOOT") public reboot(java.lang.String);
	@RequiredPremissions("android.permission.WAKE_LOCK") public releaseWakeLock(android.os.IBinder,int);
	@RequiredPremissions("android.permission.DEVICE_POWER") public setAttentionLight(boolean,int);
	@RequiredPremissions("android.permission.DEVICE_POWER") public setBacklightBrightness(int);
	@RequiredPremissions("android.permission.WRITE_SECURE_SETTINGS") public setMaximumScreenOffTimeount(int);
	@RequiredPremissions("android.permission.DEVICE_POWER") public setPokeLock(int,android.os.IBinder,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_SETTINGS") public setStayOnSetting(int);
	@RequiredPremissions("android.permission.DEVICE_POWER") public userActivityWithForce(long,boolean,boolean);
}

class IVibratorService$Stub$Proxy {
	@RequiredPremissions("android.permission.VIBRATE") public cancelVibrate(android.os.IBinder);
	@RequiredPremissions("android.permission.VIBRATE") public vibrate(long,android.os.IBinder);
	@RequiredPremissions("android.permission.VIBRATE") public vibratePattern([J,int,android.os.IBinder);
}

class PowerManager {
	@RequiredPremissions("android.permission.DEVICE_POWER") public goToSleep(long);
	@RequiredPremissions("android.permission.REBOOT") public reboot(java.lang.String);
	@RequiredPremissions("android.permission.DEVICE_POWER") public setBacklightBrightness(int);
}

class PowerManager$WakeLock {
	@RequiredPremissions("android.permission.WAKE_LOCK") public acquire();
	@RequiredPremissions("android.permission.WAKE_LOCK") public acquire(long);
	@RequiredPremissions("android.permission.WAKE_LOCK") public release();
	@RequiredPremissions("android.permission.WAKE_LOCK") public release(int);
}

class RecoverySystem {
	@RequiredPremissions("android.permission.REBOOT") public bootCommand(android.content.Context,java.lang.String);
	@RequiredPremissions("android.permission.REBOOT") public installPackage(android.content.Context,java.io.File);
	@RequiredPremissions("android.permission.REBOOT") public rebootWipeUserData(android.content.Context);
}

package android.os.storage;

class IMountService$Stub$Proxy {
	@RequiredPremissions("android.permission.ASEC_CREATE") public createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int);
	@RequiredPremissions("android.permission.ASEC_DESTROY") public destroySecureContainer(java.lang.String,boolean);
	@RequiredPremissions("android.permission.ASEC_CREATE") public finalizeSecureContainer(java.lang.String);
	@RequiredPremissions("android.permission.MOUNT_FORMAT_FILESYSTEMS") public formatVolume(java.lang.String);
	@RequiredPremissions("android.permission.ASEC_ACCESS") public getSecureContainerList();
	@RequiredPremissions("android.permission.ASEC_ACCESS") public getSecureContainerPath(java.lang.String);
	@RequiredPremissions("android.permission.MOUNT_UNMOUNT_FILESYSTEMS") public getStorageUsers(java.lang.String);
	@RequiredPremissions("android.permission.ASEC_ACCESS") public isSecureContainerMounted(java.lang.String);
	@RequiredPremissions("android.permission.ASEC_MOUNT_UNMOUNT") public mountSecureContainer(java.lang.String,java.lang.String,int);
	@RequiredPremissions("android.permission.MOUNT_UNMOUNT_FILESYSTEMS") public mountVolume(java.lang.String);
	@RequiredPremissions("android.permission.ASEC_RENAME") public renameSecureContainer(java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.MOUNT_UNMOUNT_FILESYSTEMS") public setUsbMassStorageEnabled(boolean);
	@RequiredPremissions("android.permission.SHUTDOWN") public shutdown(android.os.storage.IMountShutdownObserver);
	@RequiredPremissions("android.permission.ASEC_MOUNT_UNMOUNT") public unmountSecureContainer(java.lang.String,boolean);
	@RequiredPremissions("android.permission.MOUNT_UNMOUNT_FILESYSTEMS") public unmountVolume(java.lang.String,boolean);
}

class StorageManager {
	@RequiredPremissions("android.permission.MOUNT_UNMOUNT_FILESYSTEMS") public disableUsbMassStorage();
	@RequiredPremissions("android.permission.MOUNT_UNMOUNT_FILESYSTEMS") public enableUsbMassStorage();
}

package android.os;

class Vibrator {
	@RequiredPremissions("android.permission.VIBRATE") public cancel();
	@RequiredPremissions("android.permission.VIBRATE") public vibrate([J,int);
	@RequiredPremissions("android.permission.VIBRATE") public vibrate(long);
}

package android.pim.vcard;

class VCardComposer {
	@RequiredPremissions("android.permission.READ_CONTACTS") public createOneEntry();
	@RequiredPremissions("android.permission.READ_CONTACTS") public createOneEntry(java.lang.reflect.Method);
	@RequiredPremissions("android.permission.READ_CONTACTS") public createOneEntryInternal(java.lang.String,java.lang.reflect.Method);
	@RequiredPremissions("android.permission.READ_CONTACTS") public init();
	@RequiredPremissions("android.permission.READ_CONTACTS") public init(java.lang.String,java.lang.String []);
}

class VCardComposer$HandlerForOutputStream {
	@RequiredPremissions("android.permission.READ_CONTACTS") public onInit(android.content.Context);
}

class VCardComposer$OneEntryHandler {
	@RequiredPremissions("android.permission.READ_CONTACTS") public onInit(android.content.Context);
}

class VCardEntry {
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public pushIntoContentResolver(android.content.ContentResolver);
}

class VCardEntryCommitter {
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public onEntryCreated(android.pim.vcard.VCardEntry);
}

class VCardEntryHandler {
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public onEntryCreated(android.pim.vcard.VCardEntry);
}

package android.provider;

class Browser {
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS") public addSearchUrl(android.content.ContentResolver,java.lang.String);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS") public canClearHistory(android.content.ContentResolver);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS") public clearHistory(android.content.ContentResolver);
	@RequiredPremissions("com.android.browser.permission.WRITE_HISTORY_BOOKMARKS") public clearSearches(android.content.ContentResolver);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS") public deleteFromHistory(android.content.ContentResolver,java.lang.String);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS") public deleteHistoryTimeFrame(android.content.ContentResolver,long,long);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS") public deleteHistoryWhere(android.content.ContentResolver,java.lang.String);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS") public getAllBookmarks(android.content.ContentResolver);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS") public getAllVisitedUrls(android.content.ContentResolver);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS") public getVisitedHistory(android.content.ContentResolver);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS") public getVisitedLike(android.content.ContentResolver,java.lang.String);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS") public requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS") public truncateHistory(android.content.ContentResolver);
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS") public updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean);
}

class Calendar$CalendarAlerts {
	@RequiredPremissions("android.permission.READ_CALENDAR") public alarmExists(android.content.ContentResolver,long,long,long);
	@RequiredPremissions("android.permission.READ_CALENDAR") public findNextAlarmTime(android.content.ContentResolver,long);
	@RequiredPremissions("android.permission.WRITE_CALENDAR") public insert(android.content.ContentResolver,long,long,long,long,int);
	@RequiredPremissions("android.permission.READ_CALENDAR") public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String [],java.lang.String);
}

class Calendar$Calendars {
	@RequiredPremissions("android.permission.WRITE_CALENDAR") public delete(android.content.ContentResolver,java.lang.String,java.lang.String []);
	@RequiredPremissions("android.permission.WRITE_CALENDAR") public deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account);
	@RequiredPremissions("android.permission.READ_CALENDAR") public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String);
}

class Calendar$EventDays {
	@RequiredPremissions("android.permission.READ_CALENDAR") public query(android.content.ContentResolver,int,int);
}

class Calendar$Events {
	@RequiredPremissions("android.permission.READ_CALENDAR") public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.READ_CALENDAR") public query(android.content.ContentResolver,java.lang.String []);
}

class Calendar$Instances {
	@RequiredPremissions("android.permission.READ_CALENDAR") public query(android.content.ContentResolver,java.lang.String [],long,long,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.READ_CALENDAR") public query(android.content.ContentResolver,java.lang.String [],long,long);
}

class CallLog$Calls {
	@RequiredPremissions("android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS") public addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int);
	@RequiredPremissions("android.permission.READ_CONTACTS") public getLastOutgoingCall(android.content.Context);
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public removeExpiredEntries(android.content.Context);
}

class Contacts$People {
	@RequiredPremissions("android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS") public addToGroup(android.content.ContentResolver,long,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public addToGroup(android.content.ContentResolver,long,long);
	@RequiredPremissions("android.permission.READ_CONTACTS") public addToMyContactsGroup(android.content.ContentResolver,long);
	@RequiredPremissions("android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS") public createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues);
	@RequiredPremissions("android.permission.READ_CONTACTS") public loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options);
	@RequiredPremissions("android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS") public markAsContacted(android.content.ContentResolver,long);
	@RequiredPremissions("android.permission.READ_CONTACTS") public openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri);
	@RequiredPremissions("android.permission.READ_CONTACTS") public queryGroups(android.content.ContentResolver,long);
	@RequiredPremissions("android.permission.READ_CONTACTS, android.permission.WRITE_CONTACTS") public setPhotoData(android.content.ContentResolver,android.net.Uri,[B);
	@RequiredPremissions("android.permission.READ_CONTACTS") public tryGetMyContactsGroupId(android.content.ContentResolver);
}

class Contacts$Settings {
	@RequiredPremissions("android.permission.READ_CONTACTS") public getSetting(android.content.ContentResolver,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String);
}

class ContactsContract$Contacts {
	@RequiredPremissions("android.permission.READ_CONTACTS") public getLookupUri(android.content.ContentResolver,android.net.Uri);
	@RequiredPremissions("android.permission.READ_CONTACTS") public lookupContact(android.content.ContentResolver,android.net.Uri);
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public markAsContacted(android.content.ContentResolver,long);
	@RequiredPremissions("android.permission.READ_CONTACTS") public openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri);
}

class ContactsContract$Data {
	@RequiredPremissions("android.permission.READ_CONTACTS") public getContactLookupUri(android.content.ContentResolver,android.net.Uri);
}

class ContactsContract$RawContacts {
	@RequiredPremissions("android.permission.READ_CONTACTS") public getContactLookupUri(android.content.ContentResolver,android.net.Uri);
}

class DrmStore {
	@RequiredPremissions("android.permission.ACCESS_DRM") public enforceAccessDrmPermission(android.content.Context);
}

class Settings$Bookmarks {
	@RequiredPremissions("android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS") public add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int);
	@RequiredPremissions("android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS") public getIntentForShortcut(android.content.ContentResolver,char);
}

class Settings$Secure {
	@RequiredPremissions("android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS") public putFloat(android.content.ContentResolver,java.lang.String,float);
	@RequiredPremissions("android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS") public putInt(android.content.ContentResolver,java.lang.String,int);
	@RequiredPremissions("android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS") public putLong(android.content.ContentResolver,java.lang.String,long);
	@RequiredPremissions("android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS") public putString(android.content.ContentResolver,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS") public setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean);
}

class Settings$System {
	@RequiredPremissions("android.permission.WRITE_SETTINGS") public putConfiguration(android.content.ContentResolver,android.content.res.Configuration);
	@RequiredPremissions("android.permission.WRITE_SETTINGS") public putFloat(android.content.ContentResolver,java.lang.String,float);
	@RequiredPremissions("android.permission.WRITE_SETTINGS") public putInt(android.content.ContentResolver,java.lang.String,int);
	@RequiredPremissions("android.permission.WRITE_SETTINGS") public putLong(android.content.ContentResolver,java.lang.String,long);
	@RequiredPremissions("android.permission.WRITE_SETTINGS") public putString(android.content.ContentResolver,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_SETTINGS") public setShowGTalkServiceStatus(android.content.ContentResolver,boolean);
}

class Telephony$Mms {
	@RequiredPremissions("android.permission.READ_SMS") public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.READ_SMS") public query(android.content.ContentResolver,java.lang.String []);
}

class Telephony$Sms {
	@RequiredPremissions("android.permission.WRITE_SMS AND android.permission.READ_SMS") public addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean,long);
	@RequiredPremissions("android.permission.WRITE_SMS AND android.permission.READ_SMS") public addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean);
	@RequiredPremissions("android.permission.WRITE_SMS") public moveMessageToFolder(android.content.Context,android.net.Uri,int,int);
	@RequiredPremissions("android.permission.READ_SMS") public query(android.content.ContentResolver,java.lang.String [],java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.READ_SMS") public query(android.content.ContentResolver,java.lang.String []);
}

class Telephony$Sms$Draft {
	@RequiredPremissions("android.permission.READ_SMS AND android.permission.WRITE_SMS") public addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long);
	@RequiredPremissions("android.permission.WRITE_SMS") public saveMessage(android.content.ContentResolver,android.net.Uri,java.lang.String);
}

class Telephony$Sms$Inbox {
	@RequiredPremissions("android.permission.READ_SMS AND android.permission.WRITE_SMS") public addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean);
}

class Telephony$Sms$Outbox {
	@RequiredPremissions("android.permission.WRITE_SMS") public addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long);
}

class Telephony$Sms$Sent {
	@RequiredPremissions("android.permission.READ_SMS AND android.permission.WRITE_SMS") public addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long);
}

class Telephony$Threads {
	@RequiredPremissions("android.permission.READ_SMS") public getOrCreateThreadId(android.content.Context,java.lang.String);
	@RequiredPremissions("android.permission.READ_SMS") public getOrCreateThreadId(android.content.Context,java.util.Set);
}

class UserDictionary$Words {
	@RequiredPremissions("android.permission.WRITE_USER_DICTIONARY") public addWord(android.content.Context,java.lang.String,int,int);
}

package android.server;

class BluetoothA2dpService {
	@RequiredPremissions("android.permission.BLUETOOTH") public <init>(android.content.Context,android.server.BluetoothService);
	@RequiredPremissions("android.permission.BLUETOOTH") public addAudioSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public checkSinkSuspendState(int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH") public connectSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH") public disconnectSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public getConnectedSinks();
	@RequiredPremissions("android.permission.BLUETOOTH") public getNonDisconnectedSinks();
	@RequiredPremissions("android.permission.BLUETOOTH") public getSinkPriority(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public getSinkState(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS, android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.WRITE_SETTINGS") public handleSinkStateChange(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public isSinkDevice(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH") public lookupSinksMatchingStates(int[]);
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS, android.permission.BLUETOOTH") public onBluetoothDisable();
	@RequiredPremissions("android.permission.MODIFY_AUDIO_SETTINGS") public onBluetoothEnable();
	@RequiredPremissions("android.permission.BLUETOOTH") public onConnectSinkResult(java.lang.String,boolean);
	@RequiredPremissions("android.permission.BLUETOOTH") public onSinkPropertyChanged(java.lang.String,java.lang.String []);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH, android.permission.MODIFY_AUDIO_SETTINGS") public resumeSink(android.bluetooth.BluetoothDevice);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN, android.permission.WRITE_SETTINGS, android.permission.WRITE_SECURE_SETTINGS") public setSinkPriority(android.bluetooth.BluetoothDevice,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.WRITE_SETTINGS") public setSinkPriority(android.bluetooth.BluetoothDevice,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH AND android.permission.MODIFY_AUDIO_SETTINGS") public suspendSink(android.bluetooth.BluetoothDevice);
}

class BluetoothService {
	@RequiredPremissions("android.permission.BLUETOOTH") public addRemoteDeviceProperties(java.lang.String,java.lang.String []);
	@RequiredPremissions("android.permission.BLUETOOTH") public addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelBondProcess(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelDiscovery();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public cancelPairingUserInput(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public createBond(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public disable();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public disable(boolean);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public enable();
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public enable(boolean);
	@RequiredPremissions("android.permission.BLUETOOTH") public fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback);
	@RequiredPremissions("android.permission.BLUETOOTH") public getAddress();
	@RequiredPremissions("android.permission.BLUETOOTH") public getAddressFromObjectPath(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getAllProperties();
	@RequiredPremissions("android.permission.BLUETOOTH") public getBluetoothState();
	@RequiredPremissions("android.permission.BLUETOOTH") public getBondState(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getDiscoverableTimeout();
	@RequiredPremissions("android.permission.BLUETOOTH") public getName();
	@RequiredPremissions("android.permission.BLUETOOTH") public getObjectPathFromAddress(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getProperty(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getPropertyInternal(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getRemoteClass(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getRemoteName(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid);
	@RequiredPremissions("android.permission.BLUETOOTH") public getRemoteUuids(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public getScanMode();
	@RequiredPremissions("android.permission.BLUETOOTH") public getTrustState(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public isDiscovering();
	@RequiredPremissions("android.permission.BLUETOOTH") public isEnabled();
	@RequiredPremissions("android.permission.BLUETOOTH") public listBonds();
	@RequiredPremissions("android.permission.WRITE_SETTINGS AND android.permission.WRITE_SECURE_SETTINGS") public persistBluetoothOnSetting(boolean);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public removeBond(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public removeServiceRecord(int);
	@RequiredPremissions("android.permission.BLUETOOTH") public sendUuidIntent(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH") public setDiscoverableTimeout(int);
	@RequiredPremissions("android.permission.BLUETOOTH") public setLinkTimeout(java.lang.String,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN AND android.permission.BLUETOOTH") public setName(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPairingConfirmation(java.lang.String,boolean);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPasskey(java.lang.String,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setPin(java.lang.String,[B);
	@RequiredPremissions("android.permission.BLUETOOTH") public setPropertyBoolean(java.lang.String,boolean);
	@RequiredPremissions("android.permission.BLUETOOTH") public setPropertyInteger(java.lang.String,int);
	@RequiredPremissions("android.permission.BLUETOOTH") public setPropertyString(java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_SECURE_SETTINGS, android.permission.BLUETOOTH") public setScanMode(int,int);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public setTrust(java.lang.String,boolean);
	@RequiredPremissions("android.permission.BLUETOOTH_ADMIN") public startDiscovery();
	@RequiredPremissions("android.permission.BLUETOOTH") public updateDeviceServiceChannelCache(java.lang.String);
	@RequiredPremissions("android.permission.BLUETOOTH") public updateRemoteDevicePropertiesCache(java.lang.String);
}

package android.server.search;

class Searchables {
	@RequiredPremissions("android.permission.GLOBAL_SEARCH") public buildSearchableList();
	@RequiredPremissions("android.permission.GLOBAL_SEARCH") public findGlobalSearchActivity();
}

package android.service.urlrenderer;

class UrlRendererService {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

package android.service.wallpaper;

class WallpaperService {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

package android.speech;

class RecognitionService {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class SpeechRecognizer {
	@RequiredPremissions("android.permission.RECORD_AUDIO") public cancel();
	@RequiredPremissions("android.permission.RECORD_AUDIO") public handleCancelMessage();
	@RequiredPremissions("android.permission.RECORD_AUDIO") public handleStartListening(android.content.Intent);
	@RequiredPremissions("android.permission.RECORD_AUDIO") public handleStopMessage();
	@RequiredPremissions("android.permission.RECORD_AUDIO") public startListening(android.content.Intent);
	@RequiredPremissions("android.permission.RECORD_AUDIO") public stopListening();
}

package android.telephony.gsm;

class SmsManager {
	@RequiredPremissions("android.permission.RECEIVE_SMS, android.permission.SEND_SMS") public copyMessageToSim([B,[B,int);
	@RequiredPremissions("android.permission.RECEIVE_SMS, android.permission.SEND_SMS") public deleteMessageFromSim(int);
	@RequiredPremissions("android.permission.RECEIVE_SMS") public getAllMessagesFromSim();
	@RequiredPremissions("android.permission.SEND_SMS") public sendDataMessage(java.lang.String,java.lang.String,short,[B,android.app.PendingIntent,android.app.PendingIntent);
	@RequiredPremissions("android.permission.SEND_SMS") public sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList);
	@RequiredPremissions("android.permission.SEND_SMS") public sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent);
	@RequiredPremissions("android.permission.RECEIVE_SMS, android.permission.SEND_SMS") public updateMessageOnSim(int,int,[B);
}

package android.telephony;

class PhoneNumberUtils {
	@RequiredPremissions("android.permission.CALL_PRIVILEGED, android.permission.READ_CONTACTS, NONE") public getNumberFromIntent(android.content.Intent,android.content.Context);
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public isVoiceMailNumber(java.lang.String);
}

class SmsManager {
	@RequiredPremissions("android.permission.RECEIVE_SMS, android.permission.SEND_SMS") public copyMessageToIcc([B,[B,int);
	@RequiredPremissions("android.permission.RECEIVE_SMS, android.permission.SEND_SMS") public deleteMessageFromIcc(int);
	@RequiredPremissions("android.permission.RECEIVE_SMS") public getAllMessagesFromIcc();
	@RequiredPremissions("android.permission.SEND_SMS") public sendDataMessage(java.lang.String,java.lang.String,short,[B,android.app.PendingIntent,android.app.PendingIntent);
	@RequiredPremissions("android.permission.SEND_SMS") public sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList);
	@RequiredPremissions("android.permission.SEND_SMS") public sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent);
	@RequiredPremissions("android.permission.RECEIVE_SMS, android.permission.SEND_SMS") public updateMessageOnIcc(int,int,[B);
}

class TelephonyManager {
	@RequiredPremissions("android.permission.CONTROL_LOCATION_UPDATES") public disableLocationUpdates();
	@RequiredPremissions("android.permission.CONTROL_LOCATION_UPDATES") public enableLocationUpdates();
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getCellLocation();
	@RequiredPremissions("android.permission.CALL_PRIVILEGED") public getCompleteVoiceMailNumber();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getDeviceId();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getDeviceSoftwareVersion();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getLine1AlphaTag();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getLine1Number();
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getNeighboringCellInfo();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getSimSerialNumber();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getSubscriberId();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getVoiceMailAlphaTag();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getVoiceMailNumber();
	@RequiredPremissions("android.permission.READ_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION, NONE") public listen(android.telephony.PhoneStateListener,int);
}

package android.view;

class ContextThemeWrapper {
	@RequiredPremissions("android.permission.SET_WALLPAPER") public clearWallpaper();
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public removeStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyBroadcast(android.content.Intent);
	@RequiredPremissions("android.permission.BROADCAST_STICKY") public sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(android.graphics.Bitmap);
	@RequiredPremissions("android.permission.SET_WALLPAPER") public setWallpaper(java.io.InputStream);
}

class IWindowManager$Stub$Proxy {
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public addAppToken(int,android.view.IApplicationToken,int,int,boolean);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public addWindowToken(android.os.IBinder,int);
	@RequiredPremissions("android.permission.DISABLE_KEYGUARD") public disableKeyguard(android.os.IBinder,java.lang.String);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public executeAppTransition();
	@RequiredPremissions("android.permission.DISABLE_KEYGUARD") public exitKeyguardSecurely(android.view.IOnKeyguardExitResult);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getDPadKeycodeState(int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getDPadScancodeState(int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getKeycodeState(int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getKeycodeStateForDevice(int,int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getScancodeState(int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getScancodeStateForDevice(int,int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getSwitchState(int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getSwitchStateForDevice(int,int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getTrackballKeycodeState(int);
	@RequiredPremissions("android.permission.READ_INPUT_STATE") public getTrackballScancodeState(int);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public injectKeyEvent(android.view.KeyEvent,boolean);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public injectPointerEvent(android.view.MotionEvent,boolean);
	@RequiredPremissions("android.permission.INJECT_EVENTS") public injectTrackballEvent(android.view.MotionEvent,boolean);
	@RequiredPremissions("android.permission.DUMP") public isViewServerRunning();
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public moveAppToken(int,android.os.IBinder);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public moveAppTokensToBottom(java.util.List);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public moveAppTokensToTop(java.util.List);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public pauseKeyDispatching(android.os.IBinder);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public prepareAppTransition(int);
	@RequiredPremissions("android.permission.DISABLE_KEYGUARD") public reenableKeyguard(android.os.IBinder);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public removeAppToken(android.os.IBinder);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public removeWindowToken(android.os.IBinder);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public resumeKeyDispatching(android.os.IBinder);
	@RequiredPremissions("android.permission.SET_ANIMATION_SCALE") public setAnimationScale(int,float);
	@RequiredPremissions("android.permission.SET_ANIMATION_SCALE") public setAnimationScales([F);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public setAppGroupId(android.os.IBinder,int);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public setAppOrientation(android.view.IApplicationToken,int);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public setAppStartingWindow(android.os.IBinder,java.lang.String,int,java.lang.CharSequence,int,int,android.os.IBinder,boolean);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public setAppVisibility(android.os.IBinder,boolean);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public setAppWillBeHidden(android.os.IBinder);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public setEventDispatching(boolean);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public setFocusedApp(android.os.IBinder,boolean);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS AND android.permission.DEVICE_POWER") public setNewConfiguration(android.content.res.Configuration);
	@RequiredPremissions("android.permission.SET_ORIENTATION") public setRotation(int,boolean,int);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public startAppFreezingScreen(android.os.IBinder,int);
	@RequiredPremissions("android.permission.DUMP") public startViewServer(int);
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public stopAppFreezingScreen(android.os.IBinder,boolean);
	@RequiredPremissions("android.permission.DUMP") public stopViewServer();
	@RequiredPremissions("android.permission.MANAGE_APP_TOKENS") public updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder);
}

class IWindowSession$Stub$Proxy {
	@RequiredPremissions("android.permission.SYSTEM_ALERT_WINDOW, android.permission.INTERNAL_SYSTEM_WINDOW, NONE") public add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect);
}

class Surface {
	@RequiredPremissions("android.permission.ACCESS_SURFACE_FLINGER") public closeTransaction();
	@RequiredPremissions("android.permission.ACCESS_SURFACE_FLINGER") public freezeDisplay(int);
	@RequiredPremissions("android.permission.ACCESS_SURFACE_FLINGER") public setOrientation(int,int,int);
	@RequiredPremissions("android.permission.ACCESS_SURFACE_FLINGER") public setOrientation(int,int);
	@RequiredPremissions("android.permission.ACCESS_SURFACE_FLINGER") public unfreezeDisplay(int);
}

class SurfaceSession {
	@RequiredPremissions("android.permission.ACCESS_SURFACE_FLINGER") public <init>();
}

package android.webkit;

class GeolocationService {
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION") public registerForLocationUpdates();
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public setEnableGps(boolean);
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION") public start();
}

class WebChromeClient {
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions.Callback);
}

class WebIconDatabase {
	@RequiredPremissions("com.android.browser.permission.READ_HISTORY_BOOKMARKS") public bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener);
}

class WebSettings {
	@RequiredPremissions("android.permission.INTERNET") public setBlockNetworkLoads(boolean);
	@RequiredPremissions("android.permission.INTERNET") public verifyNetworkAccess();
}

class WebView {
	@RequiredPremissions("android.permission.INTERNET") public <init>(android.content.Context,android.util.AttributeSet,int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(android.content.Context,android.util.AttributeSet);
	@RequiredPremissions("android.permission.INTERNET") public <init>(android.content.Context);
}

class WebViewCore {
	@RequiredPremissions("android.permission.INTERNET") public <init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy,java.util.Map);
}

package android.widget;

class QuickContactBadge {
	@RequiredPremissions("android.permission.READ_CONTACTS") public assignContactFromEmail(java.lang.String,boolean);
	@RequiredPremissions("android.permission.READ_CONTACTS") public assignContactFromPhone(java.lang.String,boolean);
	@RequiredPremissions("android.permission.READ_CONTACTS") public trigger(android.net.Uri);
}

package com.android.http.multipart;

class FilePart {
	@RequiredPremissions("android.permission.INTERNET") public sendData(java.io.OutputStream);
	@RequiredPremissions("android.permission.INTERNET") public sendDispositionHeader(java.io.OutputStream);
}

class Part {
	@RequiredPremissions("android.permission.INTERNET") public send(java.io.OutputStream);
	@RequiredPremissions("android.permission.INTERNET") public sendParts(java.io.OutputStream,com.android.http.multipart.Part[]);
	@RequiredPremissions("android.permission.INTERNET") public sendParts(java.io.OutputStream,com.android.http.multipart.Part[],byte[]);
	@RequiredPremissions("android.permission.INTERNET") public sendStart(java.io.OutputStream);
	@RequiredPremissions("android.permission.INTERNET") public sendTransferEncodingHeader(java.io.OutputStream);
}

class StringPart {
	@RequiredPremissions("android.permission.INTERNET") public sendData(java.io.OuputStream);
}

package com.android.internal.app;

class IBatteryStats$Stub$Proxy {
	@RequiredPremissions("android.permission.BATTERY_STATS") public getAwakeTimeBattery();
	@RequiredPremissions("android.permission.BATTERY_STATS") public getAwakeTimePlugged();
	@RequiredPremissions("android.permission.BATTERY_STATS") public getStatistics();
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteFullWifiLockAcquired(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteFullWifiLockReleased(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteInputEvent();
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public notePhoneDataConnectionState(int,boolean);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public notePhoneOff();
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public notePhoneOn();
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public notePhoneSignalStrength(SignalStrength);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public notePhoneState(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteScanWifiLockAcquired(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteScanWifiLockReleased(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteScreenBrightness(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteScreenOff();
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteScreenOn();
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteStartGps(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteStartSensor(int,int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteStartWakelock(int,java.lang.String,int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteStopGps(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteStopSensor(int,int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteStopWakelock(int,java.lang.String,int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteUserActivity(int,int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteWifiMulticastDisabled(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteWifiMulticastEnabled(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteWifiOff(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteWifiOn(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteWifiRunning();
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteWifiStopped();
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public recordCurrentLevel(int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public setOnBattery(boolean,int);
}

class IUsageStats$Stub$Proxy {
	@RequiredPremissions("android.permission.PACKAGE_USAGE_STATS") public getAllPkgUsageStats();
	@RequiredPremissions("android.permission.PACKAGE_USAGE_STATS") public getPkgUsageStats(ComponentName);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteLaunchTime(ComponentName, int);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public notePauseComponent(ComponentName);
	@RequiredPremissions("android.permission.UPDATE_DEVICE_STATS") public noteResumeComponent(ComponentName);
}

package com.android.internal.appwidget;

class IAppWidgetService$Stub$Proxy {
	@RequiredPremissions("android.permission.BIND_APPWIDGET") public bindAppWidgetId(int,ComponentName);
}

package com.android.internal.os;

class IDropBoxManagerService$Stub$Proxy {
	@RequiredPremissions("android.permission.READ_LOGS") public getNextEntry(java.lang.String,long);
}

package com.android.internal.telephony;

class CallerInfo {
	@RequiredPremissions("android.permission.READ_CONTACTS") public getCallerId(android.content.Context,java.lang.String);
	@RequiredPremissions("android.permission.READ_CONTACTS") public getCallerInfo(android.content.Context,java.lang.String);
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public markAsVoiceMail();
}

class IccPhoneBookInterfaceManager$Stub$Proxy {
	@RequiredPremissions("android.permission.READ_CONTACTS") public getAdnRecordsInEf(int);
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

class IIccPhoneBook$Stub$Proxy {
	@RequiredPremissions("android.permission.READ_CONTACTS") public getAdnRecordsInEf(int);
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,java.lang.String);
	@RequiredPremissions("android.permission.WRITE_CONTACTS") public updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String);
}

class IPhoneSubInfo$Stub$Proxy {
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getDeviceId();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getDeviceSvn();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getIccSerialNumber();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getLine1AlphaTag();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getLine1Number();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getSubscriberId();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getVoiceMailAlphaTag();
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public getVoiceMailNumber();
}

class ISms$Stub$Proxy {
	@RequiredPremissions("android.permission.RECEIVE_SMS") public copyMessageToIccEf(int,byte[],byte[]);
	@RequiredPremissions("android.permission.RECEIVE_SMS") public getAllMessagesFromIccEf();
	@RequiredPremissions("android.permission.SEND_SMS") public sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent);
	@RequiredPremissions("android.permission.SEND_SMS") public sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List);
	@RequiredPremissions("android.permission.SEND_SMS") public sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent);
	@RequiredPremissions("android.permission.RECEIVE_SMS") public updateMessageOnIccEf(int,int,byte[]);
}

class ITelephony$Stub$Proxy {
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public answerRingingCall();
	@RequiredPremissions("android.permission.CALL_PHONE") public call(java.lang.String);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public cancelMissedCallsNotification();
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public disableApnType(java.lang.String);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public disableDataConnectivity();
	@RequiredPremissions("android.permission.CONTROL_LOCATION_UPDATES") public disableLocationUpdates();
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public enableApnType(java.lang.String);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public enableDataConnectivity();
	@RequiredPremissions("android.permission.CONTROL_LOCATION_UPDATES") public enableLocationUpdates();
	@RequiredPremissions("android.permission.CALL_PHONE") public endCall();
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getCellLocation();
	@RequiredPremissions("android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_COARSE_LOCATION") public getNeighboringCellInfo();
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public handlePinMmi(java.lang.String);
	@RequiredPremissions("android.permission.READ_PHONE_STATE") public isSimPinEnabled();
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public setRadio(boolean);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public silenceRinger();
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public supplyPin(java.lang.String);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public toggleRadioOnOff();
}

class ITelephonyRegistry$Stub$Proxy {
	@RequiredPremissions("android.permission.READ_PHONE_STATE, android.permission.ACCESS_COARSE_LOCATION, NONE") public listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public notifyCallForwardingChanged(boolean);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public notifyCallState(int,java.lang.String);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public notifyCellLocation(android.os.Bundle);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public notifyDataActivity(int);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE, android.permission.BROADCAST_STICKY") public notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE, android.permission.BROADCAST_STICKY") public notifyDataConnectionFailed(java.lang.String);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public notifyMessageWaitingChanged(boolean);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public notifyServiceState(android.telephony.ServiceState);
	@RequiredPremissions("android.permission.MODIFY_PHONE_STATE") public notifySignalStrength(android.telephony.SignalStrength);
}

package com.android.server;

class WallpaperManagerService {
	@RequiredPremissions("android.permission.BIND_WALLPAPER, android.permission.MANAGE_APP_TOKENS") public bindWallpaperComponentLocked(android.content.ComponentName);
	@RequiredPremissions("android.permission.DUMP") public dump(java.io.FileDescriptor,java.io.PrintWriter,[Ljava.lang.String);
}

package java.lang;

class Runtime {
	@RequiredPremissions("android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE") public exec(java.lang.String);
	@RequiredPremissions("android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE") public exec(java.lang.String[]);
	@RequiredPremissions("android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE") public exec(java.lang.String[],java.lang.String[]);
	@RequiredPremissions("android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE") public exec(java.lang.String[],java.lang.String[],java.io.File);
	@RequiredPremissions("android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE") public exec(java.lang.String,java.lang.String[]);
	@RequiredPremissions("android.permission.READ_LOGS, android.permission.DUMP, android.permission.INSTALL_PACKAGES, NONE") public exec(java.lang.String,java.lang.String[],java.io.File);
}

package java.net;

class DatagramSocket {
	@RequiredPremissions("android.permission.INTERNET") public <init>();
	@RequiredPremissions("android.permission.INTERNET") public <init>(int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(int,java.net.InetAddress);
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.net.SocketAddress);
}

class HttpURLConnection {
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.net.URL);
	@RequiredPremissions("android.permission.INTERNET") public connect();
}

class MulticastSocket {
	@RequiredPremissions("android.permission.INTERNET") public <init>();
	@RequiredPremissions("android.permission.INTERNET") public <init>(int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.net.SocketAddress);
}

class NetworkInterface {
	@RequiredPremissions("android.permission.INTERNET") public <init>();
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.lang.String,int,java.net.InetAddress);
}

class ServerSocket {
	@RequiredPremissions("android.permission.INTERNET") public <init>();
	@RequiredPremissions("android.permission.INTERNET") public <init>(int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(int,int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(int,int,java.net.InetAddress);
	@RequiredPremissions("android.permission.INTERNET") public bind(java.net.SocketAddress);
	@RequiredPremissions("android.permission.INTERNET") public bind(java.net.SocketAddress,int);
}

class Socket {
	@RequiredPremissions("android.permission.INTERNET") public <init>();
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.lang.String,int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.lang.String,int,java.net.InetAddress,int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.lang.String,int,boolean);
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.net.InetAddress,int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.net.InetAddress,int,java.net.InetAddress,int);
	@RequiredPremissions("android.permission.INTERNET") public <init>(java.net.InetAddress,int,boolean);
}

class URL {
	@RequiredPremissions("android.permission.INTERNET") public getContent(java.lang.Class[]);
	@RequiredPremissions("android.permission.INTERNET") public getContent();
	@RequiredPremissions("android.permission.INTERNET") public openConnection(java.net.Proxy);
	@RequiredPremissions("android.permission.INTERNET") public openConnection();
	@RequiredPremissions("android.permission.INTERNET") public openStream();
}

class URLConnection {
	@RequiredPremissions("android.permission.INTERNET") public connect();
	@RequiredPremissions("android.permission.INTERNET") public getInputStream();
}

package org.apache.http.impl.client;

class DefaultHttpClient {
	@RequiredPremissions("android.permission.INTERNET") public <init>();
	@RequiredPremissions("android.permission.INTERNET") public <init>(org.apache.http.params.HttpParams);
	@RequiredPremissions("android.permission.INTERNET") public <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.client.methods.HttpUriRequest);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext);
}

class HttpClient {
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.client.methods.HttpUriRequest);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest);
	@RequiredPremissions("android.permission.INTERNET") public execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext);
}
