unsatisfied.permissions=\nCall requires permission(s) %s, but caller only provides %s!
may.required.permissions=\nCall may additionally require permission(s) %s, but caller only provides %s! \nNotes: %s
condition.flow=sensitive source information found in a conditional. \nfound: %s
forbidden.flow=\nflow forbidden by flow-policy  \nfound: %s \nforbidden flows:\n %s\n
dependent.permissions=\nIf the constant %s is passed to an intent it will require the following permission(s): %s! 
intent.key.notfound=\nKey %s missing from @IntentMap annotation of %s!
intent.type.incompatible=\nThe @IntentMap annotation of %s contains an element with Key %s that is incompatible with the type it is receiving. Expected a subtype of: Source: %s. Sink: %s. Received: Source: %s. Sink: %s.
send.intent=\nForbidden communication. \n Intent type found: %s. \n Intent type required: %s. \n
getintent.not.found=\nCould not find the receiver component: %s or it has not overridden the getIntent() method.
intent.key.variable=\nKey %s cannot be resolved at compile time.
