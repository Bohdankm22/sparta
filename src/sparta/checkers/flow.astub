import sparta.checkers.quals.*;
import sparta.checkers.quals.FlowSources.FlowSource;
import sparta.checkers.quals.FlowSinks.FlowSink;

@ConservativeFlow
package android;

@ConservativeFlow
package com.android;



@ConservativeFlow
package org.apache.http;

@ConservativeFlow
package java;

/* Is using all of java.* too conservative? At least the following
   packages should be conservative:
package java.io;
package java.net;
package java.sql;
package java.util;
*/

// We might want to use NoFlow here.
package java.lang;



class Thread {
	@NoFlow
	static void sleep(long time);
}

@ConservativeFlow
package java.lang.reflect;


package android.accessibilityservice;

class AccessibilityService {
    //TODO: Are intents/broadcasts information flow? Is our system capable of tracking these?
    @NoFlow
    @RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void clearWallpaper(); //Removes current wallpaper, which returns to the default.
    @NoFlow
    @RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void removeStickyBroadcast(android.content.Intent p0); //Removes data previously sent with sendStickyBroadCast(Intent).
    @NoFlow
    @RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyBroadcast(android.content.Intent p0);
    @NoFlow
    @RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
    @NoFlow
    @RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(android.graphics.Bitmap p0);
    @NoFlow
    @RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(java.io.InputStream p0);
}

package android.accounts;

class AbstractAccountAuthenticator {
    @RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
    @FlowSources(FlowSource.ACCOUNTS) Bundle addAccount(
    	@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
    	@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] requiredFeatures,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options);
	//TODO: checkBinderPermission() is a private method, accessed through Java reflection.
	//@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object checkBinderPermission();
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle confirmCredentials(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle editProperties(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle getAccountRemovalAllowed(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle getAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) String getAuthTokenLabel(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle hasFeatures(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] features);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle updateCredentials(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options);
}

//TODO: AbstractAccountAuthenticator.Transport class is private.
/*class AbstractAccountAuthenticator$Transport {
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object addAccount(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,android.os.Bundle p4);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object confirmCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object editProperties(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object getAuthToken(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object hasFeatures(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object updateCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
}*/

class AccountAuthenticatorActivity {
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void clearWallpaper();
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void removeStickyBroadcast(android.content.Intent p0);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyBroadcast(android.content.Intent p0);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	//setPersistent() is a private method
	//@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(boolean p0);
	@NoFlow
	void setResult(int resultCode, Intent data);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(android.graphics.Bitmap p0);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(java.io.InputStream p0);
}

class AccountManager {
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> addAccount(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] requiredFeatures,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle addAccountOptions,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) boolean addAccountExplicitly(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String password,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle userdata);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) void addOnAccountsUpdatedListener(OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS)
	@FlowSources(FlowSource.ACCOUNTS) String blockingGetAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) boolean notifyAuthFailure);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	void clearPassword(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> confirmCredentials(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	AccountManagerFuture<Bundle> editProperties(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) Account[] getAccounts();
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) Account[] getAccountsByType(
		@FlowSinks(FlowSink.ACCOUNTS) String type);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String type,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] features,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Account[]> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> getAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> getAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) boolean notifyAuthFailure,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> getAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) boolean notifyAuthFailure,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> getAuthTokenByFeatures(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] features,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle addAccountOptions,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle getAuthTokenOptions,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) 
	@FlowSources(FlowSource.ACCOUNTS) String getPassword(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) 
	@FlowSources(FlowSource.ACCOUNTS) String getUserData(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String key);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) 
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Boolean> hasFeatures(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] features,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Boolean> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS, android.Manifest.permission.USE_CREDENTIALS})
	void invalidateAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authToken);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) String peekAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Boolean> removeAccount(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Boolean> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS)
	void setAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authToken);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) 
	void setPassword(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String password);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) 
	void setUserData(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String key,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String value);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> updateCredentials(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
}

//AccountManager$AmsTask is a private class.
/*class AccountManager$AmsTask {
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS, android.Manifest.permission.MANAGE_ACCOUNTS}) Object doWork();
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS, android.Manifest.permission.MANAGE_ACCOUNTS}) Object start();
}*/

//AccountManager$GetAuthTokenByTypeAndFeaturesTask is a private class.
/*class AccountManager$GetAuthTokenByTypeAndFeaturesTask {
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS, android.Manifest.permission.MANAGE_ACCOUNTS}) Object doWork();
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS, android.Manifest.permission.MANAGE_ACCOUNTS}) Object start();
}*/

//AccountManagerService is a hidden class.
/*class AccountManagerService {
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object addAccount(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object addAcount(android.accounts.IAccountManagerResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,boolean p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object checkAuthenticateAccountsPermission(android.accounts.Account p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object checkManageAccountsOrUseCredentialsPermissions();
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object checkManageAccountsPermission();
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object checkReadAccountsPermission();
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object clearPassword(android.accounts.Account p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object confirmCredentials(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,android.os.Bundle p2,boolean p3);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object editProperties(android.accounts.IAccountManagerResponse p0,java.lang.String p1,boolean p2);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object getAccounts(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object getAccountsByFeatures(android.accounts.IAccountManagerResponse p0,java.lang.String p1,java.lang.String [] p2);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS) Object getAuthToken(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String p2,boolean p3,boolean p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object getPassword(android.accounts.Account p0);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object getUserData(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object hasFeatures(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS, android.Manifest.permission.USE_CREDENTIALS}) Object invalidateAuthToken(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object peekAuthToken(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object removeAccount(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object setAuthToken(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object setPassword(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object setUserData(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object updateCredentials(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String p2,boolean p3,android.os.Bundle p4);
}*/

//AccountManagerService$SimWatcher is a private class.
/*class AccountManagerService$SimWatcher {
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object onReceive(android.content.Context p0,android.content.Intent p1);
}*/

//GrantCredentialsPermissionActivity is a hidden class.
/*class GrantCredentialsPermissionActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(boolean p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}*/

//IAccountAuthenticator$Stub$Proxy is a private class.
/*class IAccountAuthenticator$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object addAccount(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,android.os.Bundle p4);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object confirmCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object editProperties(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object getAuthToken(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object hasFeatures(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER) Object updateCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
}*/

//IAccountManager$Stub$Proxy is a private class.
/*class IAccountManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object addAccount(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object addAcount(android.accounts.IAccountManagerResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,boolean p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object clearPassword(android.accounts.Account p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object confirmCredentials(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,android.os.Bundle p2,boolean p3);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object editProperties(android.accounts.IAccountManagerResponse p0,java.lang.String p1,boolean p2);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object getAccounts(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object getAccountsByFeatures(android.accounts.IAccountManagerResponse p0,java.lang.String p1,java.lang.String [] p2);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS) Object getAuthToken(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String p2,boolean p3,boolean p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object getPassword(android.accounts.Account p0);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object getUserData(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object hasFeatures(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS, android.Manifest.permission.USE_CREDENTIALS}) Object invalidateAuthToken(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object peekAuthToken(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object removeAccount(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object setAuthToken(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object setPassword(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) Object setUserData(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS) Object updateCredentials(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String p2,boolean p3,android.os.Bundle p4);
}*/

package android.app;

class Activity {
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void clearWallpaper();
	@NoFlow
	View findViewById(int id);
	@NoFlow
	Context getApplicationContext();
	@NoFlow
	Intent getIntent();
    @NoFlow
    MenuInflater getMenuInflater();                                   
	@NoFlow
	Object getSystemService(String name);
	@NoFlow
	WindowManager getWindowManager();
	@NoFlow
	Window getWindow();
	@NoFlow
	Cursor managedQuery(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder);
	@NoFlow
	void moveTaskToBack(boolean nonRoot);
	@NoFlow
	void onCreate(Bundle savedInstanceState);
	@NoFlow
	boolean onCreateOptionsMenu(Menu menu);
	@NoFlow
	boolean onOptionsItemSelected(MenuItem item);
	@NoFlow
	void onSaveInstanceState(Bundle outState);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void removeStickyBroadcast(Intent intent);
	@NoFlow
	final boolean requestWindowFeature(int featureId);
	@NoFlow
	void sendBroadcast(Intent intent);
	@NoFlow
	void sendOrderedBroadcast(Intent intent, String receiverPermission);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyBroadcast(Intent intent);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.INTERNET) void setContentView(int layoutResID);
	@NoFlow
	void setContentView(View v);
	//setPersistent() is a hidden method.
	//@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(boolean p0);
	@NoFlow
	void setProgressBarIndeterminateVisibility(boolean visible);
    @NoFlow
    void setResult(int resultCode, Intent data);
    @NoFlow
    void setTitle(CharSequence title);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(Bitmap bitmap);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(InputStream data);
	@NoFlow
	@RequiredPermissions({}) void startActivity(Intent intent);
	@NoFlow
	@RequiredPermissions({}) void startActivityForResult(Intent intent, int requestCode);
	@NoFlow
	@RequiredPermissions({}) void startActivityFromChild(Activity child, Intent intent, int requestCode);
	@NoFlow
	@RequiredPermissions({}) boolean startActivityIfNeeded(Intent intent, int requestCode);
}

class ActivityGroup {
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void clearWallpaper();
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void removeStickyBroadcast(Intent intent);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyBroadcast(Intent intent);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras);
	//setPersistent() is a hidden method.
	//@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(boolean p0);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(Bitmap bitmap);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(InputStream data);
}

class ActivityManager {
	//clearApplicationUserData() is a private method.
	//@RequiredPermissions(android.Manifest.permission.CLEAR_APP_USER_DATA) Object clearApplicationUserData(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	//forceStopPackage() is a private method.
	//@RequiredPermissions(android.Manifest.permission.FORCE_STOP_PACKAGES) Object forceStopPackage(java.lang.String p0);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.GET_TASKS) List<ActivityManager.ProcessErrorStateInfo> getRecentTasks(int maxNum, int flags);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.GET_TASKS) List<ActivityManager.RunningTaskInfo> getRunningTasks(int maxNum);
	@NoFlow
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) void killBackgroundProcesses(String packageName);
	@NoFlow
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) void restartPackage(String packageName);
}

/*class ActivityManagerNative {
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_USER_DATA) Object clearApplicationUserData(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.FORCE_STOP_PACKAGES) Object forceStopPackage(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.GET_TASKS) Object getRecentTasks(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.GET_TASKS) Object getRunningTasks(int p0);
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) Object killBackgroundProcesses(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) Object restartPackage(java.lang.String p0);
}*/

package android.app.admin;

class DevicePolicyManager {
	//@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object getRemoveWarning(android.content.ComponentName p0,android.os.RemoteCallback p1);
	//@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object reportFailedPasswordAttempt();
	//@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object reportSuccessfulPasswordAttempt();
	//@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object setActiveAdmin(android.content.ComponentName p0);
	//@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object setActivePasswordState(int p0,int p1);
}

/*class IDevicePolicyManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object getRemoveWarning(android.content.ComponentName p0,android.os.RemoteCallback p1);
	@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object reportFailedPasswordAttempt();
	@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object reportSuccessfulPasswordAttempt();
	@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object setActiveAdmin(android.content.ComponentName p0);
	@RequiredPermissions(android.Manifest.permission.BIND_DEVICE_ADMIN) Object setActivePasswordState(int p0,int p1);
}*/

package android.app;

class AlarmManager {
	void set(@FlowSinks({}) int type, @FlowSources(FlowSource.TIME) long triggerAtMillis, @FlowSources(FlowSource.ANY) PendingIntent operation) @FlowSources(FlowSource.ANY);
	void set(@FlowSinks({}) int type, @PolyFlowSources @PolyFlowSinks long triggerAtMillis, @PolyFlowSources @PolyFlowSinks PendingIntent operation);
	@RequiredPermissions(android.Manifest.permission.SET_TIME) Object setTime(long p0);
	@RequiredPermissions(android.Manifest.permission.SET_TIME_ZONE) Object setTimeZone(java.lang.String p0);
}

class AlertDialog$Builder {
	@NoFlow
	AlertDialog create();
	@PolyFlowSources @PolyFlowSinks Builder setMessage(@PolyFlowSources @PolyFlowSinks CharSequence message);
}
	
class AliasActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	//@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(boolean p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class Application {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.app.backup;

class BackupAgent {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class BackupAgentHelper {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

// android.Manifest.permission.BACKUP is a hidden attribute and not contained in android.jar
// Use the String literal instead. Better solutions?
/*class BackupManager {
	@RequiredPermissions("android.permission.BACKUP") Object beginRestoreSession();
	@RequiredPermissions("android.permission.BACKUP") Object dataChanged(java.lang.String p0);
	@RequiredPermissions("android.permission.BACKUP") Object requestRestore(android.app.backup.RestoreObserver p0);
}*/

/*class IBackupManager$Stub$Proxy {
	@RequiredPermissions("android.permission.BACKUP") Object backupNow();
	@RequiredPermissions("android.permission.BACKUP") Object beginRestoreSession(java.lang.String p0);
	@RequiredPermissions("android.permission.BACKUP") Object clearBackupData(java.lang.String p0);
	@RequiredPermissions("android.permission.BACKUP") Object dataChanged(java.lang.String p0);
	@RequiredPermissions("android.permission.BACKUP") Object getCurrentTransport();
	@RequiredPermissions("android.permission.BACKUP") Object isBackupEnabled();
	@RequiredPermissions("android.permission.BACKUP") Object listAllTransports();
	@RequiredPermissions("android.permission.BACKUP") Object selectBackupTransport(java.lang.String p0);
	@RequiredPermissions({"android.permission.BACKUP", android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object setAutoRestore(boolean p0);
	@RequiredPermissions({"android.permission.BACKUP", android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object setBackupEnabled(boolean p0);
}*/

package android.app;

/*class ContextImpl {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}*/

/*class ContextImpl$ApplicationContentResolver {
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getCurrentSync();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getMasterSyncAutomatically();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getSyncStatus(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openFileDescriptor(android.net.Uri p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openInputStream(android.net.Uri p0);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openOutputStream(android.net.Uri p0);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object query(android.net.Uri p0,java.lang.String [] p1,java.lang.String p2,java.lang.String [] p3,java.lang.String p4);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
}
/**/
//TODO: For some reason the permission map has doubled this class, and it doesn't crash the stub parser.
package android.app;


/*class ContextImpl$ApplicationPackageManager {
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object addPreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_USER_DATA) Object clearApplicationUserData(java.lang.String p0,IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object clearPackagePreferredActivities(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.DELETE_CACHE_FILES) Object deleteApplicationCacheFiles(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.DELETE_PACKAGES) Object deletePackage(java.lang.String p0,IPackageDeleteObserver p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_CACHE) Object freeStorage(long p0,android.content.IntentSender p1);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_CACHE) Object freeStorageAndNotify(long p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.GET_PACKAGE_SIZE) Object getPackageSizeInfo(java.lang.String p0,android.content.pm.IPackageStatsObserver p1);
	@RequiredPermissions(android.Manifest.permission.INSTALL_PACKAGES) Object installPackage(Uri p0,IPackageInstallObserver p1,int p2,java.lang.String p3);
	@RequiredPermissions(android.Manifest.permission.MOVE_PACKAGE) Object movePackage(java.lang.String p0,IPackageMoveObserver p1,int p2);
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object replacePreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setApplicationEnabledSetting(java.lang.String p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setComponentEnabledSetting(android.content.ComponentName p0,int p1,int p2);
}
*/

/*class ContextImpl$ApplicationPackageManager {
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object addPreferredActivity(IntentFilter p0,int p1,ComponentName[] p2,ComponentName p3);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_USER_DATA) Object clearApplicationUserData(String p0,IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object clearPackagePreferredActivities(String p0);
	@RequiredPermissions(android.Manifest.permission.DELETE_CACHE_FILES) Object deleteApplicationCacheFiles(String p0,IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.DELETE_PACKAGES) Object deletePackage(String p0,IPackageDeleteObserver p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_CACHE) Object freeStorage(long p0,IntentSender p1);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_CACHE) Object freeStorageAndNotify(long p0,IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.GET_PACKAGE_SIZE) Object getPackageSizeInfo(String p0,IPackageStatsObserver p1);
	@RequiredPermissions(android.Manifest.permission.INSTALL_PACKAGES) Object installPackage(Uri p0,IPackageInstallObserver p1,int p2,String p3);
	@RequiredPermissions(android.Manifest.permission.MOVE_PACKAGE) Object movePackage(String p0,IPackageMoveObserver p1,int p2);
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object replacePreferredActivity(IntentFilter p0,int p1,ComponentName[] p2,ComponentName p3);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setApplicationEnabledSetting(String p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setComponentEnabledSetting(ComponentName p0,int p1,int p2);
}*/

class Dialog {
	@NoFlow
	void show();
}

class ExpandableListActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	//@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(boolean p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

/*class FullBackupAgent {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}*/

/*class IActivityManager$Stub$Proxy {
	@RequiredPermissions("android.permission.BACKUP") Object bindBackupAgent(android.content.pm.ApplicationInfo p0,int p1);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_USER_DATA) Object clearApplicationUserData(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.FORCE_STOP_PACKAGES) Object forceStopPackage(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.GET_TASKS) Object getRecentTasks(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.GET_TASKS) Object getTasks(int p0,int p1,android.app.IThumbnailReceiver p2);
	@RequiredPermissions({android.Manifest.permission.KILL_BACKGROUND_PROCESSES, android.Manifest.permission.RESTART_PACKAGES}) Object killBackgroundProcesses(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.REORDER_TASKS) Object moveTaskBackwards(int p0);
	@RequiredPermissions(android.Manifest.permission.REORDER_TASKS) Object moveTaskToBack(int p0);
	@RequiredPermissions(android.Manifest.permission.REORDER_TASKS) Object moveTaskToFront(int p0);
	@RequiredPermissions(android.Manifest.permission.SET_ACTIVITY_WATCHER) Object profileControl(java.lang.String p0,boolean p1,java.lang.String p2,android.os.ParcelFileDescriptor p3);
	@RequiredPermissions(android.Manifest.permission.STOP_APP_SWITCHES) Object resumeAppSwitches();
	@RequiredPermissions(android.Manifest.permission.SET_ACTIVITY_WATCHER) Object setActivityController(android.app.IActivityController p0);
	@RequiredPermissions(android.Manifest.permission.SET_ALWAYS_FINISH) Object setAlwaysFinish(boolean p0);
	@RequiredPermissions(android.Manifest.permission.SET_DEBUG_APP) Object setDebugApp(java.lang.String p0,boolean p1,boolean p2);
	@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(android.os.IBinder p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.SET_PROCESS_LIMIT) Object setProcessForeground(android.os.IBinder p0,int p1,boolean p2);
	@RequiredPermissions(android.Manifest.permission.SET_PROCESS_LIMIT) Object setProcessLimit(int p0);
	@RequiredPermissions(android.Manifest.permission.SHUTDOWN) Object shutdown(int p0);
	@RequiredPermissions(android.Manifest.permission.SIGNAL_PERSISTENT_PROCESSES) Object signalPersistentProcesses(int p0);
	@RequiredPermissions(android.Manifest.permission.STOP_APP_SWITCHES) Object stopAppSwitches();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object unbroadcastIntent(android.app.IApplicationThread p0,android.content.Intent p1);
	@RequiredPermissions(android.Manifest.permission.FORCE_BACK) Object unhandledBack(int p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_CONFIGURATION) Object updateConfiguration(android.content.res.Configuration p0);
}*/

/*class IAlarmManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.SET_TIME) Object setTime(long p0);
	@RequiredPermissions(android.Manifest.permission.SET_TIME_ZONE) Object setTimeZone(java.lang.String p0);
}*/

class Instrumentation {
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object invokeContextMenuAction(android.app.Activity p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendCharacterSync(int p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendKeyDownUpSync(int p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendKeySync(android.view.KeyEvent p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendPointerSync(android.view.MotionEvent p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendStringSync(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendTrackballEventSync(android.view.MotionEvent p0);
}

class IntentService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

/*class IStatusBar$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.EXPAND_STATUS_BAR) Object activate();
	@RequiredPermissions(android.Manifest.permission.STATUS_BAR) Object addIcon(java.lang.String p0,java.lang.String p1,int p2,int p3);
	@RequiredPermissions(android.Manifest.permission.EXPAND_STATUS_BAR) Object deactivate();
	@RequiredPermissions(android.Manifest.permission.STATUS_BAR) Object disable(int p0,android.os.IBinder p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.STATUS_BAR) Object removeIcon(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.EXPAND_STATUS_BAR) Object toggle();
	@RequiredPermissions(android.Manifest.permission.STATUS_BAR) Object updateIcon(android.os.IBinder p0,java.lang.String p1,java.lang.String p2,int p3,int p4);
}*/

/*class IWallpaperManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER_HINTS) Object setDimensionHints(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER_COMPONENT) Object setWallpaperComponent(android.content.ComponentName p0);
}*/

class KeyguardManager {
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object exitKeyguardSecurely(android.app.KeyguardManager.OnKeyguardExitResult p0);
}

class KeyguardManager$KeyguardLock {
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object disableKeyguard();
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object reenableKeyguard();
}

class ListActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@NoFlow
	void setListAdapter(ListAdapter adapter);
	//@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(boolean p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class NotificationManager {
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object notify(int p0,android.app.Notification p1);
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object notify(java.lang.String p0,int p1,android.app.Notification p2);
}

class PendingIntent {
    @NoFlow
    static PendingIntent getActivity(Context context, int requestCode, Intent intent, int flags);
    @NoFlow
    static PendingIntent getService(Context context, int requestCode, Intent intent, int flags);
}

@NoFlow
class ProgressDialog {
	static ProgressDialog show(Context context, CharSequence title, CharSequence message, boolean indeterminate, boolean cancelable);
}

class Service {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@NoFlow
	void onStart(Intent intent, int startId);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
	@NoFlow
	@RequiredPermissions({}) void startActivity(Intent intent);
	@RequiredPermissions({}) Object startService(android.content.Intent p0);
}

/*class StatusBarManager {
	@RequiredPermissions(android.Manifest.permission.STATUS_BAR) Object addIcon(java.lang.String p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.EXPAND_STATUS_BAR) Object collapse();
	@RequiredPermissions(android.Manifest.permission.STATUS_BAR) Object disable(int p0);
	@RequiredPermissions(android.Manifest.permission.EXPAND_STATUS_BAR) Object expand();
	@RequiredPermissions(android.Manifest.permission.STATUS_BAR) Object removeIcon(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.EXPAND_STATUS_BAR) Object toggle();
	@RequiredPermissions(android.Manifest.permission.STATUS_BAR) Object updateIcon(android.os.IBinder p0,java.lang.String p1,int p2,int p3);
}*/

class TabActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	//@RequiredPermissions(android.Manifest.permission.PERSISTENT_ACTIVITY) Object setPersistent(boolean p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class WallpaperManager {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clear();
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setBitmap(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setResource(int p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setStream(java.io.InputStream p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER_HINTS) Object suggestDesiredDimensions(int p0,int p1);
}

package android.appwidget;

class AppWidgetManager {
	@RequiredPermissions(android.Manifest.permission.BIND_APPWIDGET) Object bindAppWidgetId(int p0,android.content.ComponentName p1);
	@NoFlow
	int [] getAppWidgetIds(ComponentName cn);
	@NoFlow
	AppWidgetProviderInfo getAppWidgetInfo(int appWidgetId);
	@NoFlow
	AppWidgetManager getInstance(Context c);
	@NoFlow
	void updateAppWidget(int appWidgetId, RemoteViews views);
	
}

package android.bluetooth;

class BluetoothA2dp {
	//@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object connectSink(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object disconnectSink(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getConnectedSinks();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getNonDisconnectedSinks();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getSinkPriority(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getSinkState(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isSinkConnected(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object resumeSink(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object setSinkPriority(android.bluetooth.BluetoothDevice p0,int p1);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object suspendSink(android.bluetooth.BluetoothDevice p0);
}

class BluetoothAdapter {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelDiscovery();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disable();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object enable();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getAddress();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBondedDevices();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getDiscoverableTimeout();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getName();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getScanMode();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isDiscovering();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isEnabled();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object listenUsingRfcommWithServiceRecord(java.lang.String p0,java.util.UUID p1);
	//@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object setDiscoverableTimeout(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object setName(java.lang.String p0);
	//@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BLUETOOTH}) Object setScanMode(int p0,int p1);
	//@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BLUETOOTH}) Object setScanMode(int p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object startDiscovery();
}

class BluetoothDevice {
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelBondProcess();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelPairingUserInput();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object createBond();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object createRfcommSocketToServiceRecord(java.util.UUID p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object fetchUuidsWithSdp();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBondState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getName();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getServiceChannel(android.os.ParcelUuid p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getUuids();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object removeBond();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPairingConfirmation(boolean p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPasskey(int p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPin(boolean[] p0);
}

class BluetoothHeadset {
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object connectHeadset(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disconnectHeadset();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBatteryUsageHint();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getCurrentHeadset();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getPriority(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getState();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isConnected(android.bluetooth.BluetoothDevice p0);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPriority(android.bluetooth.BluetoothDevice p0,int p1);
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object startVoiceRecognition();
	//@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object stopVoiceRecognition();
}

/*class BluetoothPbap {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disconnect();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getClient();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isConnected(android.bluetooth.BluetoothDevice p0);
}*/

class BluetoothSocket {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object connect();
}

/*class HeadsetBase {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquireWakeLock();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object finalize();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object handleInput(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object releaseWakeLock();
}*/

/*class IBluetooth$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object addRfcommServiceRecord(java.lang.String p0,android.os.ParcelUuid p1,int p2,android.os.IBinder p3);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelBondProcess(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelDiscovery();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelPairingUserInput(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object createBond(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disable(boolean p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object enable();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object fetchRemoteUuids(java.lang.String p0,android.os.ParcelUuid p1,android.bluetooth.IBluetoothCallback p2);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getAddress();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBluetoothState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBondState(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getDiscoverableTimeout();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getName();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getRemoteClass(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getRemoteName(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getRemoteServiceChannel(java.lang.String p0,android.os.ParcelUuid p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getRemoteUuids(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getScanMode();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getTrustState(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isDiscovering();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isEnabled();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object listBonds();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object removeBond(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object removeServiceRecord(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object setDiscoverableTimeout(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object setName(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPairingConfirmation(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPasskey(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPin(java.lang.String p0,boolean[] p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BLUETOOTH}) Object setScanMode(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setTrust(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object startDiscovery();
}*/

/*class IBluetoothA2dp$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object connectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object disconnectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getConnectedSinks();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getNonDisconnectedSinks();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getSinkPriority(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getSinkState(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) Object resumeSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS}) Object setSinkPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) Object suspendSink(android.bluetooth.BluetoothDevice p0);
}*/

/*class IBluetoothHeadset$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object connectHeadset(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disconnectHeadset();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBatteryUsageHint();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getCurrentHeadset();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getPriority(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isConnected(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object startVoiceRecognition();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object stopVoiceRecognition();
}*/

/*class IBluetoothPbap$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object connect(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disconnect();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getClient();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isConnected(android.bluetooth.BluetoothDevice p0);
}*/

/*class ScoSocket {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquireWakeLock();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object close();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object finalize();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object releaseWakeLock();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object releaseWakeLockNow();
}*/

package android.content;

class ComponentName {
    @PolyFlowSources @PolyFlowSinks ComponentName(@PolyFlowSources @PolyFlowSinks String pkg, @PolyFlowSources @PolyFlowSinks String path);	
	@NoFlow
	String getClassName();
}

class ContentProvider {
	@NoFlow Context getContext();
}

class ContentResolver {
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@PolyFlowSources @PolyFlowSinks int delete(@PolyFlowSources @PolyFlowSinks Uri url, @PolyFlowSources @PolyFlowSinks String where, @FlowSinks({}) String @FlowSinks({}) [] selectionArgs);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getCurrentSync();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getMasterSyncAutomatically();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	//@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getSyncStatus(android.accounts.Account p0,java.lang.String p1);
	@PolyFlowSources @PolyFlowSinks Uri insert(@PolyFlowSources @PolyFlowSinks Uri url, @PolyFlowSources @PolyFlowSinks ContentValues value);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openFileDescriptor(android.net.Uri p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openInputStream(android.net.Uri p0);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openOutputStream(android.net.Uri p0);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS)
	@PolyFlowSources @PolyFlowSinks	Cursor query(@PolyFlowSources @PolyFlowSinks Uri uri, @PolyFlowSources @PolyFlowSinks String @PolyFlowSources @PolyFlowSinks [] projection, String selection, String[] selectionArgs, String sortOrder);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
	int update(@PolyFlowSources @PolyFlowSinks Uri uri, @PolyFlowSources @PolyFlowSinks ContentValues values, @FlowSinks({}) String where, @FlowSinks({}) String @FlowSinks({}) [] selectionArgs);
}

/*class ContentService {
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object ContentService(android.content.Context p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@RequiredPermissions(android.Manifest.permission.DUMP) Object dump(java.io.FileDescriptor p0,java.io.PrintWriter p1,java.lang.String [] p2);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getCurrentSync();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getMasterSyncAutomatically();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getSyncStatus(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) Object main(android.content.Context p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
}*/

class ContentValues {
	void put(@FlowSinks({}) String key, @FlowSources(FlowSource.ANY) @FlowSinks Double value);
	void put(@FlowSinks({}) String key, @FlowSources(FlowSource.ANY) @FlowSinks Integer value);
	void put(@FlowSinks({}) String key, @FlowSources(FlowSource.ANY) @FlowSinks Long value);
	void put(@FlowSinks({}) String key, @FlowSources(FlowSource.ANY) @FlowSinks String value);
	//TODO: Add the rest of the put methods
}

class ContentUris {
 	static @PolyFlowSources @PolyFlowSinks Uri withAppendedId(@PolyFlowSources @PolyFlowSinks Uri contentUri, @PolyFlowSources @PolyFlowSinks long id);
}
	
class Context {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@NoFlow ContentResolver getContentResolver();
	@FlowSinks(FlowSink.FILESYSTEM) File getDir(@FlowSinks(FlowSink.FILESYSTEM) String name, int mode);
	@NoFlow String getPackageName();
	@NoFlow Resources getResources();
	@NoFlow String getString(@FlowSinks({}) int i, @FlowSources(FlowSource.ANY) Object... objs);
	@NoFlow String getString(@FlowSinks({}) int i);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
	@RequiredPermissions({}) Object startActivity(android.content.Intent p0);
	@NoFlow
	@RequiredPermissions({}) Object startService(Intent service);
}

class ContextWrapper {
    @FlowSinks(FlowSink.FILESYSTEM) @FlowSources File getDir(@FlowSinks(FlowSink.FILESYSTEM) @FlowSources String name, int mode);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@NoFlow
	Context getBaseContext();
	@NoFlow
	ContentResolver getContentResolver();
	@NoFlow
	Resources getResources();
	// getSystemService() returns handles for various flow-sensitive classes. This method doesn't need to be annotated,
	// but the methods on those objects do require annotation.
	@NoFlow
	Object getSystemService(@FlowSinks({}) String name);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
	@NoFlow
	@RequiredPermissions({}) void startActivity(Intent intent);
	@NoFlow
	@RequiredPermissions({}) ComponentName startService(Intent service);
}

/*class IContentService$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getCurrentSync();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getMasterSyncAutomatically();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getSyncStatus(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
}*/

class Intent {
	@FlowSources(FlowSource.ANY) String getAction();
	@FlowSources(FlowSource.ANY) Uri getData();
	@FlowSources(FlowSource.ANY) Bundle getExtras();
	@FlowSources(FlowSource.ANY) int getIntExtra(@FlowSinks({}) String name, @FlowSinks({}) int defaultValue);
	@FlowSources(FlowSource.ANY) String getStringExtra(@FlowSinks({}) String name);
	@PolyFlowSources @PolyFlowSinks Intent putExtra(@PolyFlowSources @PolyFlowSinks String name, @PolyFlowSources @PolyFlowSinks int value);
	@PolyFlowSources @PolyFlowSinks Intent putExtra(@PolyFlowSources @PolyFlowSinks String name, @PolyFlowSources @PolyFlowSinks String value);
    @PolyFlowSources @PolyFlowSinks Intent setComponent(@PolyFlowSources @PolyFlowSinks ComponentName name);
	@NoFlow
	Intent setClass(Context packageContext, Class<?> cls);
	@FlowSources(FlowSource.ANY) Intent setData(@FlowSources(FlowSource.ANY) @FlowSinks({}) Uri data);
	@NoFlow
	Intent setFlags(int flags);	
}

class MutableContextWrapper {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.content.pm;

/*class IPackageManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object addPreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName [] p2,android.content.ComponentName p3);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_USER_DATA) Object clearApplicationUserData(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object clearPackagePreferredActivities(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.DELETE_CACHE_FILES) Object deleteApplicationCacheFiles(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.DELETE_PACKAGES) Object deletePackage(java.lang.String p0,android.content.pm.IPackageDeleteObserver p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_CACHE) Object freeStorage(long p0,android.content.IntentSender p1);
	@RequiredPermissions(android.Manifest.permission.CLEAR_APP_CACHE) Object freeStorageAndNotify(long p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.INSTALL_PACKAGES) Object installPackage(android.net.Uri p0,android.content.pm.IPackageInstallObserver p1,int p2,java.lang.String p3);
	@RequiredPermissions(android.Manifest.permission.MOVE_PACKAGE) Object movePackage(java.lang.String p0,android.content.pm.IPackageMoveObserver p1,int p2);
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object replacePreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName [] p2,android.content.ComponentName p3);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setApplicationEnabledSetting(java.lang.String p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setComponentEnabledSetting(android.content.ComponentName p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SECURE_SETTINGS) Object setInstallLocation(int p0);
	@RequiredPermissions({}) Object updateExternalMediaStatus(boolean p0,boolean p1);
}*/

class PackageManager {
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object addPreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	//@RequiredPermissions(android.Manifest.permission.CLEAR_APP_USER_DATA) Object clearApplicationUserData(java.lang.String p0,IPackageDataObserver p1);
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object clearPackagePreferredActivities(java.lang.String p0);
	//@RequiredPermissions(android.Manifest.permission.DELETE_CACHE_FILES) Object deleteApplicationCacheFiles(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	//@RequiredPermissions(android.Manifest.permission.DELETE_PACKAGES) Object deletePackage(java.lang.String p0,IPackageDeleteObserver p1,int p2);
	//@RequiredPermissions(android.Manifest.permission.CLEAR_APP_CACHE) Object freeStorage(long p0,android.content.IntentSender p1);
	//@RequiredPermissions(android.Manifest.permission.CLEAR_APP_CACHE) Object freeStorageAndNotify(long p0,android.content.pm.IPackageDataObserver p1);
	//@RequiredPermissions(android.Manifest.permission.GET_PACKAGE_SIZE) Object getPackageSizeInfo(java.lang.String p0,android.content.pm.IPackageStatsObserver p1);
	//@RequiredPermissions(android.Manifest.permission.INSTALL_PACKAGES) Object installPackage(Uri p0,IPackageInstallObserver p1,int p2,java.lang.String p3);
	//@RequiredPermissions(android.Manifest.permission.MOVE_PACKAGE) Object movePackage(java.lang.String p0,IPackageMoveObserver p1,int p2);
	//@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object replacePreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setApplicationEnabledSetting(java.lang.String p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setComponentEnabledSetting(android.content.ComponentName p0,int p1,int p2);
}

package android.content;

class UriMatcher {
    void addURI(@PolyFlowSources @PolyFlowSinks String authority,
        @PolyFlowSources @PolyFlowSinks String path,
        @PolyFlowSources @PolyFlowSinks int code) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int match(@PolyFlowSources @PolyFlowSinks Uri uri) @PolyFlowSources @PolyFlowSinks;
	@NoFlow
	UriMatcher(int code);
}

package android.content.res;

class ColorStateList {
	@NoFlow
	int getDefaultColor();
}

class Resources {
	@NoFlow
	float getDimension(int id);
	@NoFlow
	Drawable getDrawable(int id);
	@NoFlow
	String getString(int id);
	@PolyFlowSources @PolyFlowSinks String getString(@FlowSinks int id, @PolyFlowSources @PolyFlowSinks Object... objs);
	@NoFlow
	CharSequence getText(int id);
}

package android.database;

class ContentObserver {
    @NoFlow void onChange(boolean selfChange);
}

class Cursor {
	@NoFlow void close() @FlowSources(FlowSource.ANY);
	@FlowSources(FlowSource.ANY) double getDouble(@FlowSinks({}) int columnIndex) @FlowSources(FlowSource.ANY);
	@FlowSources(FlowSource.ANY) long getLong(@FlowSinks({}) int columnIndex) @FlowSources(FlowSource.ANY);
	@PolyFlowSources @PolyFlowSinks String getString(@FlowSources(FlowSource.ANY) @FlowSinks({}) int columnIndex) @PolyFlowSources @PolyFlowSinks;
	@FlowSources(FlowSource.ANY) int getInt(@FlowSinks({}) int columnIndex) @FlowSources(FlowSource.ANY);
	@NoFlow boolean moveToFirst() @FlowSources(FlowSource.ANY);
	@NoFlow boolean moveToNext() @FlowSources(FlowSource.ANY);
	@NoFlow boolean isAfterLast() @FlowSources(FlowSource.ANY);
	@FlowSources({}) @FlowSinks({}) int getColumnIndex(String name) @FlowSources(FlowSource.ANY);	
	 
	//TODO: Add the rest of the get methods
	//Note: Must manually cast the results from the cursor if the cursor comes from Context.getContentResolver()
}

package android.database.sqlite;

class SQLiteOpenHelper {
	@NoFlow SQLiteDatabase getWritableDatabase();
}

class SQLiteDatabase {
	@NoFlow
	int delete(String p1, String p2, String[] p3);
	@NoFlow
	void execSQL(String sql);
	@NoFlow
	long insert(String table, String nullColumnHack, ContentValues values);
	//@FlowSources({}) int insert(String p1, String p2, @PolyFlowSources ContentValues p3) @PolyFlowSources;
	@FlowSources({}) int update(
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String table,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) ContentValues values,
        @FlowSources(FlowSource.ANY) @FlowSinks({}) String whereClause,
        @FlowSources(FlowSource.ANY) @FlowSinks({}) String @FlowSinks({}) [] whereArgs);
}

class SQLiteQueryBuilder {
	@NoFlow
	void appendWhere(CharSequence inWhere);
	@FlowSources(FlowSource.ANY) Cursor query(
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) SQLiteDatabase db,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String @FlowSinks({}) [] projectionIn,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String selection,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String @FlowSinks({}) [] selectionArgs,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String groupBy,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String having,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String sortOrder,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String limit); 
    @NoFlow
    void setTables(String inTables);
}

package android.graphics;

class Bitmap {
	boolean compress(@FlowSinks({}) CompressFormat format, @FlowSinks({}) int quality, @PolyFlowSinks @PolyFlowSources OutputStream stream) @PolyFlowSinks @PolyFlowSources;
}
//TODO: Maybe should be android.graphics.drawable.BitmapDrawable
class BitmapDrawable {
	BitmapDrawable(@PolyFlowSources @PolyFlowSinks String filepath) @PolyFlowSources @PolyFlowSinks;
}

class BitmapFactory {
	@PolyFlowSources @PolyFlowSinks Bitmap decodeByteArray(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] data,
		@FlowSinks({}) int offset, @FlowSinks({}) int length);
}

class Color {
    static @PolyFlowSources @PolyFlowSinks int parseColor(@PolyFlowSources @PolyFlowSinks String color);
}
	
package android.hardware;

class Camera {
	@NoFlow
	Parameters getParameters();
	//@RequiredPermissions(android.Manifest.permission.CAMERA) Object native_setup(java.lang.Object p0);
	@NoFlow 
	@RequiredPermissions(android.Manifest.permission.CAMERA) Camera open();
	@NoFlow
	void setParameters(Parameters params);
	@NoFlow
	void setPreviewDisplay(SurfaceHolder holder);
	void takePicture(@FlowSinks({}) ShutterCallback shutter, @FlowSources(FlowSource.CAMERA) PictureCallback raw, @FlowSources(FlowSource.CAMERA) @FlowSinks({}) PictureCallback jpeg);
}


interface Camera$PictureCallback {
	void onPictureTaken(@FlowSources(FlowSource.CAMERA) byte[] data, Camera camera);
}


class Sensor {
	  @FlowSources(FlowSource.ACCELEROMETER) int TYPE_ACCELEROMETER;
}

class SensorManager {
	 @PolyFlowSources @PolyFlowSinks android.hardware.Sensor getDefaultSensor(@PolyFlowSources @PolyFlowSinks int type);
}

class SensorEvent {
	@FlowSources(FlowSource.ACCELEROMETER) @FlowSinks float[] values;
}

package android.inputmethodservice;

class AbstractInputMethodService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.location;
class Address {
	@FlowSources(FlowSource.LOCATION) String getAdminArea() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) String getCountryName() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) String getFeatureName() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) double getLatitude() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) String getLocality() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) double getLongitude() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) String getPostalCode() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) boolean hasLatitude() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) boolean hasLongitude() @FlowSources(FlowSource.LOCATION);
}

class Geocoder {
	@FlowSources({}) List<@FlowSources(FlowSource.LOCATION) Address> 
		getFromLocation(@FlowSources(FlowSource.LOCATION) @FlowSinks({}) double latitude, 
		@FlowSources(FlowSource.LOCATION) @FlowSinks({}) double longitude, @FlowSinks({}) int maxResults);
		
	@FlowSources({}) List<@FlowSources(FlowSource.LOCATION) Address> 
	    getFromLocationName(@FlowSources(FlowSource.LOCATION) @FlowSinks({}) String locationName, @FlowSinks({}) int maxResults);
}

/*class ILocationManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object addGpsStatusListener(android.location.IGpsStatusListener p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object addProximityAlert(double p0,double p1,float p2,long p3,android.app.PendingIntent p4);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object addTestProvider(java.lang.String p0,boolean p1,boolean p2,boolean p3,boolean p4,boolean p5,boolean p6,boolean p7,int p8,int p9);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderEnabled(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderLocation(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderStatus(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getLastKnownLocation(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getProviderInfo(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getProviders(boolean p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object isProviderEnabled(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object removeTestProvider(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.INSTALL_LOCATION_PROVIDER) Object reportLocation(android.location.Location p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.ILocationListener p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object requestLocationUpdatesPI(java.lang.String p0,long p1,float p2,android.app.PendingIntent p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_LOCATION_EXTRA_COMMANDS}) Object sendExtraCommand(java.lang.String p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderEnabled(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderLocation(java.lang.String p0,android.location.Location p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderStatus(java.lang.String p0,int p1,android.os.Bundle p2,long p3);
}*/

class Location {
	@FlowSources(FlowSource.LOCATION) float bearingTo(@FlowSources(FlowSource.LOCATION) Location dest) @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) int describeContents() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) float distanceTo(@FlowSources({FlowSource.LOCATION, FlowSource.TIME}) Location dest) @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void dump(@FlowSources(FlowSource.LOCATION) Printer pw, String prefix) @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) float getAccuracy() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) double getAltitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) float getBearing() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) Bundle getExtras() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) double getLatitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) double getLongitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) String getProvider() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) float getSpeed() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.TIME) long getTime() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) boolean hasAccuracy() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) boolean hasAltitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) boolean hasBearing() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) boolean hasSpeed() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	
	void removeAccuracy() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void removeAltitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void removeBearing() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void removeSpeed() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void reset() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	
	void set(@PolyFlowSources @PolyFlowSinks Location l) @PolyFlowSources @PolyFlowSinks;
	void setAccuracy(@PolyFlowSources @PolyFlowsinks float accuracy) @PolyFlowSources @PolyFlowSinks;
	void setAltitude(@PolyFlowSources @PolyFlowsinks double altitude) @PolyFlowSources @PolyFlowSinks;
	void setBearing(@PolyFlowSources @PolyFlowsinks float bearing) @PolyFlowSources @PolyFlowSinks;
	void setExtras(@PolyFlowSources @PolyFlowsinks Bundle extras) @PolyFlowSources @PolyFlowSinks;
	void setLongitude(@PolyFlowSources @PolyFlowsinks double longitude) @PolyFlowSources @PolyFlowSinks;
	void setProvider(@PolyFlowSources @PolyFlowsinks String provider) @PolyFlowSources @PolyFlowSinks;
	void setSpeed(@PolyFlowSources @PolyFlowsinks float speed) @PolyFlowSources @PolyFlowSinks;
	void setTime(@PolyFlowSources @PolyFlowsinks long time) @PolyFlowSources @PolyFlowSinks;
}

interface LocationListener {
	void onLocationChanged(@FlowSources(FlowSource.LOCATION) Location location);
}

class LocationManager {
	//@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object _requestLocationUpdates(java.lang.String p0,long p1,float p2,android.app.PendingIntent p3);
	//@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object _requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.LocationListener p3,android.os.Looper p4);
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object addGpsStatusListener(android.location.GpsStatus.Listener p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object addNmeaListener(android.location.GpsStatus.NmeaListener p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object addProximityAlert(double p0,double p1,float p2,long p3,android.app.PendingIntent p4);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object addTestProvider(java.lang.String p0,boolean p1,boolean p2,boolean p3,boolean p4,boolean p5,boolean p6,boolean p7,int p8,int p9);
	//@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object best(java.util.List p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderEnabled(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderLocation(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderStatus(java.lang.String p0);
	@NoFlow 
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION})
	String getBestProvider(Criteria criteria, boolean enabledOnly);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION})
	@FlowSources({FlowSource.LOCATION, FlowSource.TIME}) Location getLastKnownLocation(@FlowSinks({}) String provider);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getProvider(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getProviders(android.location.Criteria p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getProviders(boolean p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object isProviderEnabled(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object removeTestProvider(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object requestLocationUpdates(java.lang.String p0,long p1,float p2,android.app.PendingIntent p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.LocationListener p3,android.os.Looper p4);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.LocationListener p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_LOCATION_EXTRA_COMMANDS}) Object sendExtraCommand(java.lang.String p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderEnabled(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderLocation(java.lang.String p0,android.location.Location p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderStatus(java.lang.String p0,int p1,android.os.Bundle p2,long p3);
}
	
package android.media;

class AsyncPlayer {
	//@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquireWakeLock();
	//@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object enqueueLocked(android.media.AsyncPlayer.Command p0);
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object play(android.content.Context p0,android.net.Uri p1,boolean p2,int p3);
	//@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object releaseWakeLock();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object stop();
}

class AudioManager {
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object isBluetoothA2dpOn();
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object isWiredHeadsetOn();
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setBluetoothScoOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setMicrophoneMute(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setMode(int p0);
	//@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setParameter(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setParameters(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setSpeakerphoneOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object startBluetoothSco();
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object stopBluetoothSco();
}

class AudioRecord {
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) AudioRecord(int p0,int p1,int p2,int p3,int p4);
}

/*class AudioService {
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setBluetoothScoOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setMode(int p0,android.os.IBinder p1);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setSpeakerphoneOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object startBluetoothSco(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object stopBluetoothSco(android.os.IBinder p0);
}*/

/*class IAudioService$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setBluetoothScoOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setMode(int p0,android.os.IBinder p1);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setSpeakerphoneOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object startBluetoothSco(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object stopBluetoothSco(android.os.IBinder p0);
}*/

class MediaPlayer {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object start();
	//@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object stayAwake(boolean p0);
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object stop();
}

class MediaRecorder {
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object setAudioSource(int p0);
	@RequiredPermissions(android.Manifest.permission.CAMERA) Object setVideoSource(int p0);
}

class RingtoneManager {
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object setActualDefaultRingtoneUri(android.content.Context p0,int p1,android.net.Uri p2);
}

package android.net;

class ConnectivityManager {
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getActiveNetworkInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getAllNetworkInfo();
//	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getLastTetherError(java.lang.String p0);
//	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getMobileDataEnabled();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getNetworkInfo(int p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getNetworkPreference();
//	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetherableIfaces();
//	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetherableUsbRegexs();
//	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetherableWifiRegexs();
//	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetheredIfaces();
//	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetheringErroredIfaces();
//	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object isTetheringSupported();
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object requestRouteToHost(int p0,int p1);
//	@RequiredPermissions(android.Manifest.permission.CHANGE_BACKGROUND_DATA_SETTING) Object setBackgroundDataSetting(boolean p0);
//	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, "android.permission.BACKUP"}) Object setMobileDataEnabled(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, "android.permission.BACKUP"}) Object setNetworkPreference(int p0);
//	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) Object setRadio(int p0,boolean p1);
//	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) Object setRadios(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) Object startUsingNetworkFeature(int p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object stopUsingNetworkFeature(int p0,java.lang.String p1);
//	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) Object tether(java.lang.String p0);
//	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) Object untether(java.lang.String p0);
}

/*class Downloads$ById {
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object deleteDownload(android.content.Context p0,long p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object getMimeTypeForId(android.content.Context p0,long p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object getStatus(android.content.Context p0,long p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object openDownload(android.content.Context p0,long p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object openDownloadStream(android.content.Context p0,long p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object startDownloadByUri(android.content.Context p0,java.lang.String p1,java.lang.String p2,boolean p3,int p4,boolean p5,boolean p6,java.lang.String p7,java.lang.String p8,java.lang.String p9,java.lang.String p10);
}*/

/*class Downloads$ByUri {
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object getCurrentOtaDownloads(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object getProgressCursor(android.content.Context p0,long p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object getStatus(android.content.Context p0,java.lang.String p1,long p2);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object removeAllDownloadsByPackage(android.content.Context p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object startDownloadByUri(android.content.Context p0,java.lang.String p1,java.lang.String p2,boolean p3,int p4,boolean p5,boolean p6,java.lang.String p7,java.lang.String p8,java.lang.String p9,java.lang.String p10);
}*/

/*class Downloads$DownloadBase {
	@RequiredPermissions(android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER) Object startDownloadByUri(android.content.Context p0,java.lang.String p1,java.lang.String p2,boolean p3,int p4,boolean p5,boolean p6,java.lang.String p7,java.lang.String p8,java.lang.String p9,java.lang.String p10);
}*/

//package android.net.http;

/*class RequestQueue {
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object enablePlatformNotifications();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object setProxyConfig();
}*/

package android.net;

/*class IConnectivityManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getActiveNetworkInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getAllNetworkInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getLastTetherError(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getMobileDataEnabled();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getNetworkInfo(int p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getNetworkPreference();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetherableIfaces();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetherableUsbRegexs();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetherableWifiRegexs();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetheredIfaces();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getTetheringErroredIfaces();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object isTetheringSupported();
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object requestRouteToHost(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.CHANGE_BACKGROUND_DATA_SETTING) Object setBackgroundDataSetting(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, "android.permission.BACKUP"}) Object setMobileDataEnabled(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, "android.permission.BACKUP"}) Object setNetworkPreference(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) Object setRadio(int p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) Object setRadios(boolean p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE, android.Manifest.permission.CHANGE_NETWORK_STATE}) Object startUsingNetworkFeature(int p0,java.lang.String p1,android.os.IBinder p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object stopUsingNetworkFeature(int p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) Object tether(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) Object untether(java.lang.String p0);
}*/

/*class IThrottleManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getByteCount(java.lang.String p0,int p1,int p2,int p3);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getCliffLevel(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getCliffThreshold(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getHelpUri();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getPeriodStartTime(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getResetTime(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getThrottle(java.lang.String p0);
}*/

/*class MobileDataStateTracker {
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object reconnect();
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object setRadio(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object teardown();
}*/

class NetworkInfo {
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object isConnectedOrConnecting();
}

/*class ThrottleManager {
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getByteCount(java.lang.String p0,int p1,int p2,int p3);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getCliffLevel(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getCliffThreshold(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getHelpUri();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getPeriodStartTime(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getResetTime(java.lang.String p0);
}*/

class Uri {
	@FlowSources({}) List<@PolyFlowSources @PolyFlowSinks String> getPathSegments() @PolyFlowSources @PolyFlowSinks;
	static @PolyFlowSources @PolyFlowSinks Uri parse(@PolyFlowSources @PolyFlowSinks String uriString);
	static @PolyFlowSources @PolyFlowSinks Uri withAppendedPath(@PolyFlowSources @PolyFlowSinks Uri baseUri, @PolyFlowSources @PolyFlowSinks String pathSegment);
}
	
package android.net.wifi;

/*class IWifiManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object acquireMulticastLock(android.os.IBinder p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquireWifiLock(android.os.IBinder p0,int p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object addOrUpdateNetwork(android.net.wifi.WifiConfiguration p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object disableNetwork(int p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object disconnect();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object enableNetwork(int p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getConfiguredNetworks();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getConnectionInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getDhcpInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getNumAllowedChannels();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getScanResults();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getValidChannelCounts();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getWifiApEnabledState();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getWifiEnabledState();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object initializeMulticastFiltering();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object isMulticastEnabled();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object pingSupplicant();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object reassociate();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object reconnect();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object releaseMulticastLock();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object releaseWifiLock(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object removeNetwork(int p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object saveConfiguration();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object setNumAllowedChannels(int p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object setWifiApEnabled(android.net.wifi.WifiConfiguration p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object setWifiEnabled(boolean p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object startScan(boolean p0);
}*/

class WifiManager {
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object addNetwork(android.net.wifi.WifiConfiguration p0);
	//@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object addOrUpdateNetwork(android.net.wifi.WifiConfiguration p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object disableNetwork(int p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object disconnect();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object enableNetwork(int p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getConfiguredNetworks();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getConnectionInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getDhcpInfo();
	//@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getNumAllowedChannels();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getScanResults();
	//@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getValidChannelCounts();
	//@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getWifiApState();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getWifiState();
	//@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object initializeMulticastFiltering();
	//@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object isMulticastEnabled();
	//@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object isWifiApEnabled();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object isWifiEnabled();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object pingSupplicant();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object reassociate();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object reconnect();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object removeNetwork(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE, "android.permission.BACKUP"}) Object saveConfiguration();
	//@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object setNumAllowedChannels(int p0,boolean p1);
	//@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object setWifiApEnabled(android.net.wifi.WifiConfiguration p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object setWifiEnabled(boolean p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object startScan();
	//@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object startScanActive();
}

class WifiManager$MulticastLock {
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object acquire();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object finalize();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object release();
}

class WifiManager$WifiLock {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquire();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object finalize();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object release();
}

package android.opengl;

class GLSurfaceView {
	@NoFlow
	void setRenderer(Renderer r);
}

package android.os;

class AsyncTask {
    abstract @FlowSources(FlowSource.ANY) Result doInBackground(@FlowSinks({}) Params... params);
}

class Bundle {
	@PolyFlowSources @PolyFlowSinks boolean getBoolean(@FlowSinks({}) String key, @FlowSinks({}) boolean defaultValue) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks double getDouble(@FlowSinks({}) String key) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getInt(@FlowSinks({}) String key) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getString(@FlowSinks({}) String key) @PolyFlowSources @PolyFlowSinks;
	void putDouble(@PolyFlowSources @PolyFlowSinks String key, @PolyFlowSources @PolyFlowSinks double value) @PolyFlowSources @PolyFlowSinks;
	void putInt(@PolyFlowSources @PolyFlowSinks String key, @PolyFlowSources @PolyFlowSinks int value) @PolyFlowSources @PolyFlowSinks;
}
	
class DropBoxManager {
	@RequiredPermissions(android.Manifest.permission.READ_LOGS) Object getNextEntry(java.lang.String p0,long p1);
}

class Environment {
	@RequiredPermissions({android.Manifest.permission.WRITE_EXTERNAL_STORAGE, /*OR*/ android.Manifest.permission.READ_EXTERNAL_STORAGE})
	static @FlowSources(FlowSource.EXTERNAL_STORAGE) File getExternalStorageDirectory();
	@RequiredPermissions({android.Manifest.permission.WRITE_EXTERNAL_STORAGE, /*OR*/ android.Manifest.permission.READ_EXTERNAL_STORAGE})
	static @FlowSources(FlowSource.EXTERNAL_STORAGE) File getExternalStoragePublicDirectory(@FlowSources @FlowSinks String type);
}

class Handler {
	@NoFlow
	boolean sendMessageDelayed(Message m, long delay);
    @NoFlow
    boolean postDelayed(Runnable r, long delay);
    @NoFlow
    Message obtainMessage(int what, Object obj);
}

//class IHardwareService$Stub$Proxy {
//	@RequiredPermissions({android.Manifest.permission.FLASHLIGHT, /*OR*/ android.Manifest.permission.HARDWARE_TEST}) Object setFlashlightEnabled(boolean p0);
//}

/*class INetworkManagementService$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object attachPppd(java.lang.String p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.String p4);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object detachPppd(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object disableNat(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object enableNat(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getDnsForwarders();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getInterfaceRxCounter(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getInterfaceRxThrottle(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getInterfaceTxCounter(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getInterfaceTxThrottle(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getIpForwardingEnabled();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object isTetheringStarted();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object isUsbRNDISStarted();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object listInterfaces();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object listTetheredInterfaces();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object listTtys();
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object setAccessPoint(android.net.wifi.WifiConfiguration p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object setInterfaceThrottle(java.lang.String p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object setIpForwardingEnabled(boolean p0);
	@RequiredPermissions(android.Manifest.permission.SHUTDOWN) Object shutdown();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) Object startAccessPoint(android.net.wifi.WifiConfiguration p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object startUsbRNDIS();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) Object stopAccessPoint();
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object stopTethering();
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object stopUsbRNDIS();
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object tetherInterface(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object unregisterObserver(android.net.INetworkManagementEventObserver p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object untetherInterface(java.lang.String p0);
}*/

/*class IPowerManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquireWakeLock(int p0,android.os.IBinder p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object clearUserActivityTimeout(long p0,long p1);
	@RequiredPermissions(android.Manifest.permission.REBOOT) Object crash(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object goToSleep(long p0);
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object goToSleepWithReason(long p0,int p1);
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object preventScreenOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.REBOOT) Object reboot(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object releaseWakeLock(android.os.IBinder p0,int p1);
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object setAttentionLight(boolean p0,int p1);
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object setBacklightBrightness(int p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_SECURE_SETTINGS) Object setMaximumScreenOffTimeount(int p0);
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object setPokeLock(int p0,android.os.IBinder p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object setStayOnSetting(int p0);
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object userActivityWithForce(long p0,boolean p1,boolean p2);
}*/

/*class IVibratorService$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object cancelVibrate(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object vibrate(long p0,android.os.IBinder p1);
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object vibratePattern(long[] p0,int p1,android.os.IBinder p2);
}*/

class Parcel {
	void writeString(@PolyFlowSources @PolyFlowSinks String val) @PolyFlowSources @PolyFlowSinks;
}
	
class PowerManager {
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object goToSleep(long p0);
	@RequiredPermissions(android.Manifest.permission.REBOOT) Object reboot(java.lang.String p0);
	//@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object setBacklightBrightness(int p0);
}

class PowerManager$WakeLock {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquire();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquire(long p0);
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object release();
	//@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object release(int p0);
}

class RecoverySystem {
	//@RequiredPermissions(android.Manifest.permission.REBOOT) Object bootCommand(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.REBOOT) Object installPackage(android.content.Context p0,java.io.File p1);
	@RequiredPermissions(android.Manifest.permission.REBOOT) Object rebootWipeUserData(android.content.Context p0);
}

package android.os.storage;

/*class IMountService$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.ASEC_CREATE) Object createSecureContainer(java.lang.String p0,int p1,java.lang.String p2,java.lang.String p3,int p4);
	@RequiredPermissions(android.Manifest.permission.ASEC_DESTROY) Object destroySecureContainer(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.ASEC_CREATE) Object finalizeSecureContainer(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MOUNT_FORMAT_FILESYSTEMS) Object formatVolume(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ASEC_ACCESS) Object getSecureContainerList();
	@RequiredPermissions(android.Manifest.permission.ASEC_ACCESS) Object getSecureContainerPath(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS) Object getStorageUsers(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ASEC_ACCESS) Object isSecureContainerMounted(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ASEC_MOUNT_UNMOUNT) Object mountSecureContainer(java.lang.String p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS) Object mountVolume(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ASEC_RENAME) Object renameSecureContainer(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS) Object setUsbMassStorageEnabled(boolean p0);
	@RequiredPermissions(android.Manifest.permission.SHUTDOWN) Object shutdown(android.os.storage.IMountShutdownObserver p0);
	@RequiredPermissions(android.Manifest.permission.ASEC_MOUNT_UNMOUNT) Object unmountSecureContainer(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS) Object unmountVolume(java.lang.String p0,boolean p1);
}*/

class StorageManager {
//	@RequiredPermissions(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS) Object disableUsbMassStorage();
//	@RequiredPermissions(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS) Object enableUsbMassStorage();
}

package android.os;

class Vibrator {
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object cancel();
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object vibrate(long[] p0,int p1);
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object vibrate(long p0);
}

package android.preference;

class EditTextPreference {
	void setText(@PolyFlowSources @PolyFlowSinks String text) @PolyFlowSources @PolyFlowSinks;
}

class PreferenceActivity{
    @NoFlow
    void onCreate(Bundle savedInstanceState);
}

//package android.pim.vcard;

/*class VCardComposer {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object createOneEntry();
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object createOneEntry(java.lang.reflect.Method p0);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object createOneEntryInternal(java.lang.String p0,java.lang.reflect.Method p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object init();
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object init(java.lang.String p0,java.lang.String [] p1);
}*/

/*class VCardComposer$HandlerForOutputStream {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object onInit(android.content.Context p0);
}*/

/*class VCardComposer$OneEntryHandler {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object onInit(android.content.Context p0);
}*/

/*class VCardEntry {
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object pushIntoContentResolver(android.content.ContentResolver p0);
}*/

/*class VCardEntryCommitter {
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object onEntryCreated(android.pim.vcard.VCardEntry p0);
}*/

/*class VCardEntryHandler {
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object onEntryCreated(android.pim.vcard.VCardEntry p0);
}*/

package android.provider;

class Browser {
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object addSearchUrl(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object canClearHistory(android.content.ContentResolver p0);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object clearHistory(android.content.ContentResolver p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_HISTORY_BOOKMARKS) Object clearSearches(android.content.ContentResolver p0);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object deleteFromHistory(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object deleteHistoryTimeFrame(android.content.ContentResolver p0,long p1,long p2);
	//@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object deleteHistoryWhere(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object getAllBookmarks(android.content.ContentResolver p0);
	@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object getAllVisitedUrls(android.content.ContentResolver p0);
	//@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object getVisitedHistory(android.content.ContentResolver p0);
	//@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object getVisitedLike(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object requestAllIcons(android.content.ContentResolver p0,java.lang.String p1,android.webkit.WebIconDatabase.IconListener p2);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object truncateHistory(android.content.ContentResolver p0);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object updateVisitedHistory(android.content.ContentResolver p0,java.lang.String p1,boolean p2);
}
//TODO: Maybe CalendarContract$CalendarAlerts
class Calendar$CalendarAlerts {
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object alarmExists(android.content.ContentResolver p0,long p1,long p2,long p3);
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object findNextAlarmTime(android.content.ContentResolver p0,long p1);
	@RequiredPermissions(android.Manifest.permission.WRITE_CALENDAR) Object insert(android.content.ContentResolver p0,long p1,long p2,long p3,long p4,int p5);
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String [] p3,java.lang.String p4);
}
//TODO: Maybe CalendarContract$Calendars
class Calendar$Calendars {
	@RequiredPermissions(android.Manifest.permission.WRITE_CALENDAR) Object delete(android.content.ContentResolver p0,java.lang.String p1,java.lang.String [] p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_CALENDAR) Object deleteCalendarsForAccount(android.content.ContentResolver p0,android.accounts.Account p1);
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String p3);
}
//TODO: Maybe CalendarContract$...
class Calendar$EventDays {
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object query(android.content.ContentResolver p0,int p1,int p2);
}

//TODO: Maybe CalendarContract$...
class Calendar$Events {
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object query(android.content.ContentResolver p0,java.lang.String [] p1);
}

//TODO: Maybe CalendarContract$...
class Calendar$Instances {
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object query(android.content.ContentResolver p0,java.lang.String [] p1,long p2,long p3,java.lang.String p4,java.lang.String p5);
	@RequiredPermissions(android.Manifest.permission.READ_CALENDAR) Object query(android.content.ContentResolver p0,java.lang.String [] p1,long p2,long p3);
}

class CallLog$Calls {
	//@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) Object addCall(com.android.internal.telephony.CallerInfo p0,android.content.Context p1,java.lang.String p2,int p3,int p4,long p5,int p6);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getLastOutgoingCall(android.content.Context p0);
	//@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object removeExpiredEntries(android.content.Context p0);
}

class Contacts$People {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) Object addToGroup(android.content.ContentResolver p0,long p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object addToGroup(android.content.ContentResolver p0,long p1,long p2);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object addToMyContactsGroup(android.content.ContentResolver p0,long p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) Object createPersonInMyContactsGroup(android.content.ContentResolver p0,android.content.ContentValues p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object loadContactPhoto(android.content.Context p0,android.net.Uri p1,int p2,android.graphics.BitmapFactory.Options p3);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) Object markAsContacted(android.content.ContentResolver p0,long p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openContactPhotoInputStream(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object queryGroups(android.content.ContentResolver p0,long p1);
	//@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) Object setPhotoData(android.content.ContentResolver p0,android.net.Uri p1,boolean[] p2);
	//@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object tryGetMyContactsGroupId(android.content.ContentResolver p0);
}

class Contacts$Settings {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getSetting(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object setSetting(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3);
}

class ContactsContract$Contacts {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object lookupContact(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object markAsContacted(android.content.ContentResolver p0,long p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openContactPhotoInputStream(android.content.ContentResolver p0,android.net.Uri p1);
}

class ContactsContract$Data {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getContactLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
}

class ContactsContract$RawContacts {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getContactLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
}

/*class DrmStore {
	@RequiredPermissions(android.Manifest.permission.ACCESS_DRM) Object enforceAccessDrmPermission(android.content.Context p0);
}*/

/*class Settings$Bookmarks {
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object add(android.content.ContentResolver p0,android.content.Intent p1,java.lang.String p2,java.lang.String p3,char p4,int p5);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object getIntentForShortcut(android.content.ContentResolver p0,char p1);
}*/

class Settings$Secure {
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object putFloat(android.content.ContentResolver p0,java.lang.String p1,float p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object putInt(android.content.ContentResolver p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object putLong(android.content.ContentResolver p0,java.lang.String p1,long p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object putString(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object setLocationProviderEnabled(android.content.ContentResolver p0,java.lang.String p1,boolean p2);
}

class Settings$System {
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putConfiguration(android.content.ContentResolver p0,android.content.res.Configuration p1);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putFloat(android.content.ContentResolver p0,java.lang.String p1,float p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putInt(android.content.ContentResolver p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putLong(android.content.ContentResolver p0,java.lang.String p1,long p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putString(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object setShowGTalkServiceStatus(android.content.ContentResolver p0,boolean p1);
}

/*class Telephony$Mms {
	@RequiredPermissions(android.Manifest.permission.READ_SMS) Object query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions(android.Manifest.permission.READ_SMS) Object query(android.content.ContentResolver p0,java.lang.String [] p1);
}*/

/*class Telephony$Sms {
	@RequiredPermissions({android.Manifest.permission.WRITE_SMS, android.Manifest.permission.READ_SMS}) Object addMessageToUri(android.content.ContentResolver p0,android.net.Uri p1,java.lang.String p2,java.lang.String p3,java.lang.String p4,java.lang.Long p5,boolean p6,boolean p7,long p8);
	@RequiredPermissions({android.Manifest.permission.WRITE_SMS, android.Manifest.permission.READ_SMS}) Object addMessageToUri(android.content.ContentResolver p0,android.net.Uri p1,java.lang.String p2,java.lang.String p3,java.lang.String p4,java.lang.Long p5,boolean p6,boolean p7);
	@RequiredPermissions(android.Manifest.permission.WRITE_SMS) Object moveMessageToFolder(android.content.Context p0,android.net.Uri p1,int p2,int p3);
	@RequiredPermissions(android.Manifest.permission.READ_SMS) Object query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions(android.Manifest.permission.READ_SMS) Object query(android.content.ContentResolver p0,java.lang.String [] p1);
}*/

/*class Telephony$Sms$Draft {
	@RequiredPermissions({android.Manifest.permission.READ_SMS, android.Manifest.permission.WRITE_SMS}) Object addMessage(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.Long p4);
	@RequiredPermissions(android.Manifest.permission.WRITE_SMS) Object saveMessage(android.content.ContentResolver p0,android.net.Uri p1,java.lang.String p2);
}*/

/*class Telephony$Sms$Inbox {
	@RequiredPermissions({android.Manifest.permission.READ_SMS, android.Manifest.permission.WRITE_SMS}) Object addMessage(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.Long p4,boolean p5);
}*/

/*class Telephony$Sms$Outbox {
	@RequiredPermissions(android.Manifest.permission.WRITE_SMS) Object addMessage(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.Long p4,boolean p5,long p6);
}*/

/*class Telephony$Sms$Sent {
	@RequiredPermissions({android.Manifest.permission.READ_SMS, android.Manifest.permission.WRITE_SMS}) Object addMessage(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.Long p4);
}*/

/*class Telephony$Threads {
	@RequiredPermissions(android.Manifest.permission.READ_SMS) Object getOrCreateThreadId(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SMS) Object getOrCreateThreadId(android.content.Context p0,java.util.Set p1);
}*/

//TODO: Field WRITE_USER_DICTIONARY not found in type android.Manifest.permission
class UserDictionary$Words {
	@RequiredPermissions(android.Manifest.permission.WRITE_USER_DICTIONARY) Object addWord(android.content.Context p0,java.lang.String p1,int p2,int p3);
}

/*package android.server;

class BluetoothA2dpService {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) BluetoothA2dpService(android.content.Context p0,android.server.BluetoothService p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object addAudioSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object checkSinkSuspendState(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object connectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object disconnectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getConnectedSinks();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getNonDisconnectedSinks();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getSinkPriority(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getSinkState(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS}) Object handleSinkStateChange(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isSinkDevice(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object lookupSinksMatchingStates(int[] p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS, android.Manifest.permission.BLUETOOTH}) Object onBluetoothDisable();
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object onBluetoothEnable();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object onConnectSinkResult(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object onSinkPropertyChanged(java.lang.String p0,java.lang.String [] p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) Object resumeSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object setSinkPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS}) Object setSinkPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) Object suspendSink(android.bluetooth.BluetoothDevice p0);
}

class BluetoothService {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object addRemoteDeviceProperties(java.lang.String p0,java.lang.String [] p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object addRfcommServiceRecord(java.lang.String p0,android.os.ParcelUuid p1,int p2,android.os.IBinder p3);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelBondProcess(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelDiscovery();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelPairingUserInput(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object createBond(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disable();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disable(boolean p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object enable();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object enable(boolean p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object fetchRemoteUuids(java.lang.String p0,android.os.ParcelUuid p1,android.bluetooth.IBluetoothCallback p2);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getAddress();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getAddressFromObjectPath(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getAllProperties();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBluetoothState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBondState(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getDiscoverableTimeout();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getName();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getObjectPathFromAddress(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getProperty(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getPropertyInternal(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getRemoteClass(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getRemoteName(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getRemoteServiceChannel(java.lang.String p0,android.os.ParcelUuid p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getRemoteUuids(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getScanMode();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getTrustState(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isDiscovering();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isEnabled();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object listBonds();
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object persistBluetoothOnSetting(boolean p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object removeBond(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object removeServiceRecord(int p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object sendUuidIntent(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object setDiscoverableTimeout(int p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object setLinkTimeout(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object setName(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPairingConfirmation(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPasskey(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setPin(java.lang.String p0,boolean[] p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object setPropertyBoolean(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object setPropertyInteger(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object setPropertyString(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BLUETOOTH}) Object setScanMode(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object setTrust(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object startDiscovery();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object updateDeviceServiceChannelCache(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object updateRemoteDevicePropertiesCache(java.lang.String p0);
}

package android.server.search;

class Searchables {
	@RequiredPermissions(android.Manifest.permission.GLOBAL_SEARCH) Object buildSearchableList();
	@RequiredPermissions(android.Manifest.permission.GLOBAL_SEARCH) Object findGlobalSearchActivity();
}
*/
/*
package android.service.urlrenderer;

class UrlRendererService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}
*/

package android.service.wallpaper;

class WallpaperService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.speech;

class RecognitionService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class SpeechRecognizer {
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object cancel();
//	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object handleCancelMessage();
//	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object handleStartListening(android.content.Intent p0);
//	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object handleStopMessage();
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object startListening(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object stopListening();
}

package android.telephony.gsm;

class SmsManager {
	//@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) Object copyMessageToSim(boolean[] p0,boolean[] p1,int p2);
	//@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) Object deleteMessageFromSim(int p0);
	//@RequiredPermissions(android.Manifest.permission.RECEIVE_SMS) Object getAllMessagesFromSim();
	//@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendDataMessage(java.lang.String p0,java.lang.String p1,short p2,boolean[] p3,android.app.PendingIntent p4,android.app.PendingIntent p5);
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendMultipartTextMessage(java.lang.String p0,java.lang.String p1,java.util.ArrayList p2,java.util.ArrayList p3,java.util.ArrayList p4);
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendTextMessage(java.lang.String p0,java.lang.String p1,java.lang.String p2,android.app.PendingIntent p3,android.app.PendingIntent p4);
	//@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) Object updateMessageOnSim(int p0,int p1,boolean[] p2);
}

package android.telephony;

class PhoneNumberUtils {
	@RequiredPermissions({android.Manifest.permission.CALL_PRIVILEGED, android.Manifest.permission.READ_CONTACTS}) Object getNumberFromIntent(android.content.Intent p0,android.content.Context p1);
	//@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object isVoiceMailNumber(java.lang.String p0);
}

class SmsManager {
	//@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) Object copyMessageToIcc(boolean[] p0,boolean[] p1,int p2);
	//@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) Object deleteMessageFromIcc(int p0);
	//@RequiredPermissions(android.Manifest.permission.RECEIVE_SMS) Object getAllMessagesFromIcc();
	//@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendDataMessage(java.lang.String p0,java.lang.String p1,short p2,boolean[] p3,android.app.PendingIntent p4,android.app.PendingIntent p5);
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendMultipartTextMessage(java.lang.String p0,java.lang.String p1,java.util.ArrayList p2,java.util.ArrayList p3,java.util.ArrayList p4);
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendTextMessage(java.lang.String p0,java.lang.String p1,java.lang.String p2,android.app.PendingIntent p3,android.app.PendingIntent p4);
	//@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) Object updateMessageOnIcc(int p0,int p1,boolean[] p2);
}

class SmsMessage {
	@FlowSources(FlowSource.SMS) SmsMessage createFromPdu(byte @FlowSinks []  pdu);
	@PolyFlowSources @PolyFlowSinks String getMessageBody() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getOriginatingAddress() @PolyFlowSources @PolyFlowSinks;
}

class TelephonyManager {
	//@RequiredPermissions(android.Manifest.permission.CONTROL_LOCATION_UPDATES) Object disableLocationUpdates();
	//@RequiredPermissions(android.Manifest.permission.CONTROL_LOCATION_UPDATES) Object enableLocationUpdates();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION})
	@FlowSources(FlowSource.LOCATION) CellLocation getCellLocation();
	//@RequiredPermissions(android.Manifest.permission.CALL_PRIVILEGED) Object getCompleteVoiceMailNumber();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE)
	@FlowSources(FlowSource.IMEI) String getDeviceId();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getDeviceSoftwareVersion();
	//@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getLine1AlphaTag();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE)
	@FlowSources(FlowSource.PHONE_NUMBER) String getLine1Number();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getNeighboringCellInfo();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getSimSerialNumber();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getSubscriberId();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getVoiceMailAlphaTag();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE)
	@FlowSources(FlowSource.PHONE_NUMBER) String getVoiceMailNumber();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object listen(android.telephony.PhoneStateListener p0,int p1);
}

package android.text;

class Editable {
    @PolyFlowSources @PolyFlowSinks Editable append(@PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
    @NoFlow
    void clear();
   // @PolyFlowSources @PolyFlowSinks boolean equals(@PolyFlowSources @PolyFlowSinks Object o) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks Editable insert(@FlowSinks({}) int where, @PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class TextUtils {
	@PolyFlowSources @PolyFlowSinks boolean isEmpty(@PolyFlowSources @PolyFlowSinks CharSequence str);
}

package android.text.format;

class DateUtils {
	@PolyFlowSources @PolyFlowSinks String getDayOfWeekString(@PolyFlowSources @PolyFlowSinks int dayOfWeek, @FlowSinks({}) int abbrev);
}

class Time {
	//TODO: This should probably be double checked later:
	boolean parse3339(@PolyFlowSources @PolyFlowSinks String s) @PolyFlowSources @PolyFlowSinks;
	void set(@PolyFlowSources @PolyFlowSinks long l1) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks long toMillis(@FlowSinks({}) boolean b) @PolyFlowSources @PolyFlowSinks;
}

package android.util;

class FloatMath {
    static @PolyFlowSources @PolyFlowSinks float ceil(@PolyFlowSources @PolyFlowSinks float value);
    static @PolyFlowSources @PolyFlowSinks float cos(@PolyFlowSources @PolyFlowSinks float angle);
    static @PolyFlowSources @PolyFlowSinks float floor(@PolyFlowSources @PolyFlowSinks float value);
    static @PolyFlowSources @PolyFlowSinks float sin(@PolyFlowSources @PolyFlowSinks float angle);
    static @PolyFlowSources @PolyFlowSinks float sqrt(@PolyFlowSources @PolyFlowSinks float value);
}

class Log {
    static int d(@FlowSources(FlowSource.ANY) @FlowSinks({}) String tag, @FlowSources(FlowSource.ANY) @FlowSinks({}) String msg);
    static int e(@FlowSources(FlowSource.ANY) @FlowSinks({}) String tag, @FlowSources(FlowSource.ANY) @FlowSinks({}) String msg);
    static int e(@FlowSources(FlowSource.ANY) @FlowSinks({}) String tag,
        @FlowSources(FlowSource.ANY) @FlowSinks({}) String msg,
        @FlowSources(FlowSource.ANY) @FlowSinks({}) Throwable tr);
    static int w(@FlowSources(FlowSource.ANY) @FlowSinks({}) String tag, @FlowSources(FlowSource.ANY) @FlowSinks({}) String msg);
}

package android.view;

class ContextThemeWrapper {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@NoFlow
	void setTheme(int resid);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class Display {
    @NoFlow
    void getMetrics(DisplayMetrics outMetrics);
}

/*class IWindowManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object addAppToken(int p0,android.view.IApplicationToken p1,int p2,int p3,boolean p4);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object addWindowToken(android.os.IBinder p0,int p1);
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object disableKeyguard(android.os.IBinder p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object executeAppTransition();
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object exitKeyguardSecurely(android.view.IOnKeyguardExitResult p0);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getDPadKeycodeState(int p0);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getDPadScancodeState(int p0);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getKeycodeState(int p0);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getKeycodeStateForDevice(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getScancodeState(int p0);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getScancodeStateForDevice(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getSwitchState(int p0);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getSwitchStateForDevice(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getTrackballKeycodeState(int p0);
	@RequiredPermissions(android.Manifest.permission.READ_INPUT_STATE) Object getTrackballScancodeState(int p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object injectKeyEvent(android.view.KeyEvent p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object injectPointerEvent(android.view.MotionEvent p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object injectTrackballEvent(android.view.MotionEvent p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.DUMP) Object isViewServerRunning();
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object moveAppToken(int p0,android.os.IBinder p1);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object moveAppTokensToBottom(java.util.List p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object moveAppTokensToTop(java.util.List p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object pauseKeyDispatching(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object prepareAppTransition(int p0);
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object reenableKeyguard(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object removeAppToken(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object removeWindowToken(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object resumeKeyDispatching(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.SET_ANIMATION_SCALE) Object setAnimationScale(int p0,float p1);
	@RequiredPermissions(android.Manifest.permission.SET_ANIMATION_SCALE) Object setAnimationScales(float[] p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object setAppGroupId(android.os.IBinder p0,int p1);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object setAppOrientation(android.view.IApplicationToken p0,int p1);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object setAppStartingWindow(android.os.IBinder p0,java.lang.String p1,int p2,java.lang.CharSequence p3,int p4,int p5,android.os.IBinder p6,boolean p7);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object setAppVisibility(android.os.IBinder p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object setAppWillBeHidden(android.os.IBinder p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object setEventDispatching(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object setFocusedApp(android.os.IBinder p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS, android.Manifest.permission.DEVICE_POWER}) Object setNewConfiguration(android.content.res.Configuration p0);
	@RequiredPermissions(android.Manifest.permission.SET_ORIENTATION) Object setRotation(int p0,boolean p1,int p2);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object startAppFreezingScreen(android.os.IBinder p0,int p1);
	@RequiredPermissions(android.Manifest.permission.DUMP) Object startViewServer(int p0);
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object stopAppFreezingScreen(android.os.IBinder p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.DUMP) Object stopViewServer();
	@RequiredPermissions(android.Manifest.permission.MANAGE_APP_TOKENS) Object updateOrientationFromAppTokens(android.content.res.Configuration p0,android.os.IBinder p1);
}*/

/*class IWindowSession$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.SYSTEM_ALERT_WINDOW, android.Manifest.permission.INTERNAL_SYSTEM_WINDOW}) Object add(android.view.IWindow p0,android.view.WindowManager.LayoutParams p1,int p2,android.graphics.Rect p3);
}*/

class KeyEvent {
    @NoFlow
    int getAction();
    @FlowSources(FlowSource.USER_INPUT) int getKeyCode();
}

class Menu {
    @NoFlow
    MenuItem add(int groupId, int itemId, int order, CharSequence title);
}

class MenuInflater {                                                  
    @NoFlow                                                           
    void inflate(int menuRes, Menu menu);                             
}

class MenuItem {
    @NoFlow
    int getItemId();
}

class Surface {
//	@RequiredPermissions(android.Manifest.permission.ACCESS_SURFACE_FLINGER) Object closeTransaction();
//	@RequiredPermissions(android.Manifest.permission.ACCESS_SURFACE_FLINGER) Object freezeDisplay(int p0);
//	@RequiredPermissions(android.Manifest.permission.ACCESS_SURFACE_FLINGER) Object setOrientation(int p0,int p1,int p2);
//	@RequiredPermissions(android.Manifest.permission.ACCESS_SURFACE_FLINGER) Object setOrientation(int p0,int p1);
//	@RequiredPermissions(android.Manifest.permission.ACCESS_SURFACE_FLINGER) Object unfreezeDisplay(int p0);
}

class SurfaceHolder {
	@NoFlow
	void addCallback(Callback callback);
	@NoFlow
	void setType(int type);
}

/*class SurfaceSession {
	@RequiredPermissions(android.Manifest.permission.ACCESS_SURFACE_FLINGER) SurfaceSession();
}*/

class SurfaceView {
	@NoFlow
	SurfaceHolder getHolder();
}

class View {
	@NoFlow
	View findViewById(int id);
	@PolyFlowSources @PolyFlowSinks Context getContext() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getId() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks Object getTag() @PolyFlowSources @PolyFlowSinks;
	@NoFlow
	void setOnClickListener(OnClickListener l);
	@NoFlow
	void setOnKeyListener(OnKeyListener l);
	@NoFlow
	void setVisibility(int visibility);
}

class Window {
	void setFlags(@FlowSinks({}) int flags, @FlowSinks({}) int mask) @FlowSources({FlowSource.ANY});
	@NoFlow
	void addFlags(int flags);
        @NoFlow
        void setAttributes(@FlowSources({FlowSource.ANY}) android.view.WindowManager.LayoutParams a);
}

class WindowManager {
    @NoFlow
    Display getDefaultDisplay();
}

package android.webkit;

/*class GeolocationService {
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object registerForLocationUpdates();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object setEnableGps(boolean p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object start();
}*/

class WebChromeClient {
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object onGeolocationPermissionsShowPrompt(java.lang.String p0,android.webkit.GeolocationPermissions.Callback p1);
}

class WebIconDatabase {
	//@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object bulkRequestIconForPageUrl(android.content.ContentResolver p0,java.lang.String p1,android.webkit.WebIconDatabase.IconListener p2);
}

class WebSettings {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object setBlockNetworkLoads(boolean p0);
	//@RequiredPermissions(android.Manifest.permission.INTERNET) Object verifyNetworkAccess();
}

class WebView {
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.INTERNET) WebView(android.content.Context p0,android.util.AttributeSet p1,int p2);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.INTERNET) WebView(android.content.Context p0,android.util.AttributeSet p1);
	@NoFlow
	@RequiredPermissions(android.Manifest.permission.INTERNET) WebView(android.content.Context p0);
}

/*class WebViewCore {
	@RequiredPermissions(android.Manifest.permission.INTERNET) WebViewCore(android.content.Context p0,android.webkit.WebView p1,android.webkit.CallbackProxy p2,java.util.Map p3);
}*/

package android.widget;

class AdapterView {
	@PolyFlowSources @PolyFlowSinks Object getItemAtPosition(@FlowSinks({}) int position) @PolyFlowSources @PolyFlowSinks;
	@NoFlow void setOnItemClickListener(AdapterView.OnItemClickListener listener) @PolyFlowSources @PolyFlowSinks;
    @NoFlow void setOnItemSelectedListener(AdapterView.OnItemSelectedListener listener) @PolyFlowSources @PolyFlowSinks;
}

class ArrayAdapter<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
}

class EditText {
	@PolyFlowSources @PolyFlowSinks Editable getText() @PolyFlowSources @PolyFlowSinks;
	void setSelection(@PolyFlowSources @PolyFlowSinks int index) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class ImageView {
	void setImageBitmap(@PolyFlowSources @PolyFlowSinks Bitmap bm) @PolyFlowSources @PolyFlowSinks;
	void setImageDrawable(@PolyFlowSources @PolyFlowSinks Drawable drawable) @PolyFlowSources @PolyFlowSinks;
	void setImageResource(@PolyFlowSources @FlowSinks(FlowSink.DISPLAY) int i) @PolyFlowSources @PolyFlowSinks;
}
	
class QuickContactBadge {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object assignContactFromEmail(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object assignContactFromPhone(java.lang.String p0,boolean p1);
	//@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object trigger(android.net.Uri p0);
}

class RadioGroup {
    @NoFlow
    void setOnCheckedChangeListener(OnCheckedChangeListener listener);
}

class TextView {
    void append(@PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
	@NoFlow
	ColorStateList getTextColors();
	@NoFlow
	void setCompoundDrawablePadding(int pad);
	@NoFlow
	void setCompoundDrawablesWithIntrinsicBounds(int left, int top, int right, int bottom);
	@NoFlow
	void setEllipsize(TruncateAt where);
	@NoFlow
	void setEnabled(boolean enabled);
	@NoFlow
	void setGravity(int gravity);
	@NoFlow
	void setPadding(int left, int top, int right, int bottom);
	@NoFlow
	void setSelected(boolean selected);
	@NoFlow
	void setSingleLine();
	void setText(@PolyFlowSources @FlowSinks(FlowSink.DISPLAY) CharSequence text) @PolyFlowSources @PolyFlowSinks;
	void setText(@PolyFlowSources @FlowSinks(FlowSink.DISPLAY) int resid) @PolyFlowSources @PolyFlowSinks;
	@NoFlow
	void setTextColor(int color);
	@NoFlow
	void setTextSize(float size);
}

class Toast {
	@NoFlow
	void show();
	@NoFlow
	static Toast makeText(Context context, CharSequence text, int duration);
}

class RemoteViews {
	@NoFlow
	void setOnClickPendingIntent(int i, @FlowSources(FlowSource.ANY) PendingIntent pi);
	void setImageViewResource(@FlowSinks({}) int viewId, @PolyFlowSources @PolyFlowSinks int srcId) @PolyFlowSources @PolyFlowSinks;
	void setTextViewText(@FlowSinks({}) int viewId, @PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
	@NoFlow
	void setViewVisibility(int viewId, int visibility);
}
	
/*package com.android.http.multipart;

class FilePart {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object sendData(java.io.OutputStream p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object sendDispositionHeader(java.io.OutputStream p0);
}

class Part {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object send(java.io.OutputStream p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object sendParts(java.io.OutputStream p0,com.android.http.multipart.Part[] p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object sendParts(java.io.OutputStream p0,com.android.http.multipart.Part[] p1,byte[] p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object sendStart(java.io.OutputStream p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object sendTransferEncodingHeader(java.io.OutputStream p0);
}

class StringPart {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object sendData(java.io.OuputStream p0);
}
*/
/*
package com.android.internal.app;

class IBatteryStats$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.BATTERY_STATS) Object getAwakeTimeBattery();
	@RequiredPermissions(android.Manifest.permission.BATTERY_STATS) Object getAwakeTimePlugged();
	@RequiredPermissions(android.Manifest.permission.BATTERY_STATS) Object getStatistics();
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteFullWifiLockAcquired(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteFullWifiLockReleased(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteInputEvent();
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object notePhoneDataConnectionState(int p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object notePhoneOff();
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object notePhoneOn();
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object notePhoneSignalStrength(SignalStrength p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object notePhoneState(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteScanWifiLockAcquired(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteScanWifiLockReleased(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteScreenBrightness(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteScreenOff();
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteScreenOn();
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteStartGps(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteStartSensor(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteStartWakelock(int p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteStopGps(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteStopSensor(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteStopWakelock(int p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteUserActivity(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteWifiMulticastDisabled(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteWifiMulticastEnabled(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteWifiOff(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteWifiOn(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteWifiRunning();
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteWifiStopped();
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object recordCurrentLevel(int p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object setOnBattery(boolean p0,int p1);
}

class IUsageStats$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.PACKAGE_USAGE_STATS) Object getAllPkgUsageStats();
	@RequiredPermissions(android.Manifest.permission.PACKAGE_USAGE_STATS) Object getPkgUsageStats(ComponentName p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteLaunchTime(ComponentName p0, int p1);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object notePauseComponent(ComponentName p0);
	@RequiredPermissions(android.Manifest.permission.UPDATE_DEVICE_STATS) Object noteResumeComponent(ComponentName p0);
}

package com.android.internal.appwidget;

class IAppWidgetService$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.BIND_APPWIDGET) Object bindAppWidgetId(int p0,ComponentName p1);
}
*/
/*
package com.android.internal.os;

class IDropBoxManagerService$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.READ_LOGS) Object getNextEntry(java.lang.String p0,long p1);
}

package com.android.internal.telephony;

class CallerInfo {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getCallerId(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getCallerInfo(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object markAsVoiceMail();
}

class IccPhoneBookInterfaceManager$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getAdnRecordsInEf(int p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object updateAdnRecordsInEfByIndex(int p0,java.lang.String p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object updateAdnRecordsInEfBySearch(int p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.String p4,java.lang.String p5);
}

class IIccPhoneBook$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getAdnRecordsInEf(int p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object updateAdnRecordsInEfByIndex(int p0,java.lang.String p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object updateAdnRecordsInEfBySearch(int p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.String p4,java.lang.String p5);
}

class IPhoneSubInfo$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getDeviceId();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getDeviceSvn();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getIccSerialNumber();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getLine1AlphaTag();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getLine1Number();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getSubscriberId();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getVoiceMailAlphaTag();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getVoiceMailNumber();
}

class ISms$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.RECEIVE_SMS) Object copyMessageToIccEf(int p0,byte[] p1,byte[] p2);
	@RequiredPermissions(android.Manifest.permission.RECEIVE_SMS) Object getAllMessagesFromIccEf();
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendData(java.lang.String p0,java.lang.String p1,int p2,byte[] p3,android.app.PendingIntent p4,android.app.PendingIntent p5);
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendMultipartText(java.lang.String p0,java.lang.String p1,java.util.List p2,java.util.List p3,java.util.List p4);
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendText(java.lang.String p0,java.lang.String p1,java.lang.String p2,android.app.PendingIntent p3,android.app.PendingIntent p4);
	@RequiredPermissions(android.Manifest.permission.RECEIVE_SMS) Object updateMessageOnIccEf(int p0,int p1,byte[] p2);
}

class ITelephony$Stub$Proxy {
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object answerRingingCall();
	@RequiredPermissions(android.Manifest.permission.CALL_PHONE) Object call(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object cancelMissedCallsNotification();
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object disableApnType(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object disableDataConnectivity();
	@RequiredPermissions(android.Manifest.permission.CONTROL_LOCATION_UPDATES) Object disableLocationUpdates();
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object enableApnType(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object enableDataConnectivity();
	@RequiredPermissions(android.Manifest.permission.CONTROL_LOCATION_UPDATES) Object enableLocationUpdates();
	@RequiredPermissions(android.Manifest.permission.CALL_PHONE) Object endCall();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getCellLocation();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getNeighboringCellInfo();
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object handlePinMmi(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object isSimPinEnabled();
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object setRadio(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object silenceRinger();
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object supplyPin(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object toggleRadioOnOff();
}

class ITelephonyRegistry$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object listen(java.lang.String p0,com.android.internal.telephony.IPhoneStateListener p1,int p2,boolean p3);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object notifyCallForwardingChanged(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object notifyCallState(int p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object notifyCellLocation(android.os.Bundle p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object notifyDataActivity(int p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE, android.Manifest.permission.BROADCAST_STICKY}) Object notifyDataConnection(int p0,boolean p1,java.lang.String p2,java.lang.String p3,java.lang.String[] p4,java.lang.String p5,int p6);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE, android.Manifest.permission.BROADCAST_STICKY}) Object notifyDataConnectionFailed(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object notifyMessageWaitingChanged(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object notifyServiceState(android.telephony.ServiceState p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_PHONE_STATE) Object notifySignalStrength(android.telephony.SignalStrength p0);
}
*/
/*
package com.android.server;

class WallpaperManagerService {
	@RequiredPermissions({android.Manifest.permission.BIND_WALLPAPER, android.Manifest.permission.MANAGE_APP_TOKENS}) Object bindWallpaperComponentLocked(android.content.ComponentName p0);
	@RequiredPermissions(android.Manifest.permission.DUMP) Object dump(java.io.FileDescriptor p0,java.io.PrintWriter p1,java.lang.String[] p2);
}
*/



/* JAVA PACKAGES BELOW */

package java.io;

class BufferedInputStream {
	@PolyFlowSources @PolyFlowSinks BufferedInputStream(@PolyFlowSources @PolyFlowSinks InputStream in);
	//@FlowSources({}) int read(@PolyFlowSources @PolyFlowSinks byte @PolyFlowSources @PolyFlowSinks [] buffer) @PolyFlowSources @PolyFlowSinks;
}

class BufferedReader {
	@PolyFlowSources @PolyFlowSinks BufferedReader(@PolyFlowSources @PolyFlowSinks Reader in, @PolyFlowSources @PolyFlowSinks int size);
	@NoFlow
	void close() @FlowSources(FlowSource.ANY);
	@PolyFlowSources @PolyFlowSinks String readLine() @PolyFlowSources @PolyFlowSinks;
}

class ByteArrayInputStream {
	@PolyFlowSources @PolyFlowSinks ByteArrayInputStream(@PolyFlowSources @PolyFlowSinks byte[] buf);
}

class ByteArrayOutputStream {
	void close() @FlowSources(FlowSource.ANY); //@FlowSinks(FlowSink.FILESYSTEM) @FlowSources(FlowSource.ANY);
	@PolyFlowSources @PolyFlowSinks byte @FlowSources [] toByteArray() @PolyFlowSources @PolyFlowSinks;
	void write(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) [] buffer, int offset, int len) @PolyFlowSources @PolyFlowSinks;
}

class DataInputStream{
    @PolyFlowSources @PolyFlowSinks int read(@PolyFlowSources @PolyFlowSinks byte @PolyFlowSources @PolyFlowSinks [] buffer, @PolyFlowSources @PolyFlowSinks int offset, @PolyFlowSources @PolyFlowSinks int length) @PolyFlowSources @PolyFlowSinks;
}

class File {
	@PolyFlowSources @PolyFlowSinks boolean createNewFile() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean exists() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks File(@PolyFlowSources @PolyFlowSinks String path);
	@PolyFlowSources @PolyFlowSinks File(@PolyFlowSources @PolyFlowSinks File dir, @PolyFlowSources @PolyFlowSinks String name);
	@PolyFlowSources @PolyFlowSinks String getAbsolutePath() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getPath() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean isDirectory() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean mkdirs() @PolyFlowSources @PolyFlowSinks;
	@FlowSinks(FlowSink.ANY) String separator;
	@PolyFlowSources @PolyFlowSinks boolean delete() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks File[] listFiles() @PolyFlowSources @PolyFlowSinks ;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks ;
	
}

class FileOutputStream {
	void close() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks FileOutputStream(@PolyFlowSources @PolyFlowSinks File file);
	@PolyFlowSources @PolyFlowSinks FileOutputStream(@PolyFlowSources @PolyFlowSinks String filename);
	//void write(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @PolyFlowSinks;
	// Workaround: Require FlowSink.FILESYSTEM for every write on a FileOutputStream
    void write(@PolyFlowSources @FlowSinks(FlowSink.FILESYSTEM) byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @FlowSinks(FlowSink.FILESYSTEM);
}

class FileReader {
	@PolyFlowSources @PolyFlowSinks FileReader(@PolyFlowSources @PolyFlowSinks File file) @PolyFlowSources @PolyFlowSinks ;
}

class FileWriter {
	@PolyFlowSources @PolyFlowSinks FileWriter(@PolyFlowSources @PolyFlowSinks File file);
	void write (@PolyFlowSources @PolyFlowSinks String str) @PolyFlowSources @PolyFlowSinks ;
}

class FilterInputStream {
	int read(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] b) @PolyFlowSources @PolyFlowSinks;
}

class InputStream {
	void close() @PolyFlowSources @PolyFlowSinks; 
	int read(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @PolyFlowSinks;
}

class InputStreamReader {
	void close() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks InputStreamReader(@PolyFlowSources @PolyFlowSinks InputStream in);
	@PolyFlowSources @PolyFlowSinks InputStreamReader(@PolyFlowSources @PolyFlowSinks InputStream in, String enc);
}

class OutputStream {
	void close() @PolyFlowSources @PolyFlowSinks;
	void flush() @PolyFlowSources @PolyFlowSinks;
	void write(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @PolyFlowSinks;
}

class OutputStreamWriter {
	void close() @PolyFlowSources @PolyFlowSinks;
	void flush() @PolyFlowSources @PolyFlowSinks;
}

class PrintStream {
	void println(@FlowSources(FlowSource.ANY) @FlowSinks({}) Object x);
}

class Reader {
	void close() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int read(@PolyFlowSources @PolyFlowSinks char @FlowSources({}) @FlowSinks({}) [] buf) @PolyFlowSources @PolyFlowSinks;
}

class Writer {
	void close() @PolyFlowSources @PolyFlowSinks;
	void write(@PolyFlowSources @PolyFlowSinks char @FlowSources({}) @FlowSinks({}) [] buf,
		@PolyFlowSources @PolyFlowSinks int offset,	@PolyFlowSources @PolyFlowSinks int count) @PolyFlowSources @PolyFlowSinks;
}

package java.lang;

class Character {
	static @PolyFlowSources @PolyFlowSinks char toLowerCase(@PolyFlowSources @PolyFlowSinks char c);
	static @PolyFlowSources @PolyFlowSinks char toUpperCase(@PolyFlowSources @PolyFlowSinks char c);
}
	
class Double {
    static @PolyFlowSources @PolyFlowSinks long doubleToLongBits(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks boolean isNaN(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks double parseDouble(@PolyFlowSources @PolyFlowSinks String string);
	static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks double d);
}

class CharSequence {
    @PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class Class {
	@NoFlow
	String getName();
}

class Enum {
    @PolyFlowSources @PolyFlowSinks boolean equals(@PolyFlowSources @PolyFlowSinks Object other) @PolyFlowSources @PolyFlowSinks;
}

class Float {
	static @PolyFlowSources @PolyFlowSinks int floatToIntBits(@PolyFlowSources @PolyFlowSinks float value);
}

class Integer {
	static @PolyFlowSources @PolyFlowSinks int parseInt(@PolyFlowSources @PolyFlowSinks String s);
	static @PolyFlowSources @PolyFlowSinks int parseInt(@PolyFlowSources @PolyFlowSinks String s, @FlowSinks({}) int radix);
	static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks int i);
	static @PolyFlowSources @PolyFlowSinks String toHexString(@PolyFlowSources @PolyFlowSinks int i);
}

class Long {
	static @PolyFlowSources @PolyFlowSinks long parseLong(@PolyFlowSources @PolyFlowSinks String string);
	static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks long l1);
}

class Math {
	static @PolyFlowSources @PolyFlowSinks float abs(@PolyFlowSources @PolyFlowSinks float f);
	static @PolyFlowSources @PolyFlowSinks long abs(@PolyFlowSources @PolyFlowSinks long l);
	static @PolyFlowSources @PolyFlowSinks double acos(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks double asin(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks double atan(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks double atan2(@PolyFlowSources @PolyFlowSinks double y, @PolyFlowSources @PolyFlowSinks double x);
	static @PolyFlowSources @PolyFlowSinks double log10(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks int min(@PolyFlowSources @PolyFlowSinks int i1, @PolyFlowSources @PolyFlowSinks int i2);
	static @PolyFlowSources @PolyFlowSinks long min(@PolyFlowSources @PolyFlowSinks long l1, @PolyFlowSources @PolyFlowSinks long l2);
	static @PolyFlowSources @PolyFlowSinks double pow(@PolyFlowSources @PolyFlowSinks double x, @PolyFlowSources @PolyFlowSinks double y);
}

	
class Object {
	@FlowSources(FlowSource.ANY) boolean equals(Object object);
	@NoFlow
	Class getClass();
	@PolyFlowSources @PolyFlowSinks int hashCode() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}
	
class Runtime {
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String[] p0);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String[] p0,java.lang.String[] p1);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String[] p0,java.lang.String[] p1,java.io.File p2);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String p0,java.lang.String[] p1);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String p0,java.lang.String[] p1,java.io.File p2);
}

class String {
	@PolyFlowSources @PolyFlowSinks char charAt(@PolyFlowSources @PolyFlowSinks int index) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks boolean contains(@PolyFlowSources @PolyFlowSinks CharSequence cs) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean equals(@PolyFlowSources @PolyFlowSinks Object object) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean equalsIgnoreCase(@PolyFlowSources @PolyFlowSinks String string) @PolyFlowSources @PolyFlowSinks;
	static @PolyFlowSources @PolyFlowSinks String format(Locale l, @PolyFlowSources @PolyFlowSinks String format, @PolyFlowSources @PolyFlowSinks Object... args);
	static @PolyFlowSources @PolyFlowSinks String format(@PolyFlowSources @PolyFlowSinks String format, @PolyFlowSources @PolyFlowSinks Object... args);
	@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] getBytes() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int length() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String trim() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String replace(@FlowSinks({}) char target, @PolyFlowSources @PolyFlowSinks char replacement) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String replace(@FlowSinks({}) CharSequence target,
		@PolyFlowSources @PolyFlowSinks CharSequence replacement) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String substring(@PolyFlowSources @PolyFlowSinks int start, @PolyFlowSources @PolyFlowSinks int end) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String substring(@PolyFlowSources @PolyFlowSinks int start) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
	
}

class StringBuilder {
	@PolyFlowSources @PolyFlowSinks StringBuilder append(@PolyFlowSources @PolyFlowSinks char c) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}
	
class StringBuffer {
	@PolyFlowSources @PolyFlowSinks StringBuffer append(@PolyFlowSources @PolyFlowSinks String string) @PolyFlowSources @PolyFlowSinks;
}

class System {
	@FlowSources(FlowSource.TIME) long currentTimeMillis();
}

class Throwable {
	@NoFlow
	Throwable initCause(Throwable throwable);
}

package java.net;

class DatagramSocket {
	@RequiredPermissions(android.Manifest.permission.INTERNET) DatagramSocket();
	@RequiredPermissions(android.Manifest.permission.INTERNET) DatagramSocket(int p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) DatagramSocket(int p0,java.net.InetAddress p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) DatagramSocket(java.net.SocketAddress p0);
}

class HttpURLConnection {
	@RequiredPermissions(android.Manifest.permission.INTERNET) HttpURLConnection(java.net.URL p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object connect();
}

class MulticastSocket {
	@RequiredPermissions(android.Manifest.permission.INTERNET) MulticastSocket();
	@RequiredPermissions(android.Manifest.permission.INTERNET) MulticastSocket(int p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) MulticastSocket(java.net.SocketAddress p0);
}

class NetworkInterface {
	@RequiredPermissions(android.Manifest.permission.INTERNET) NetworkInterface();
	//TODO:This is a constructor in Java 7, but not Android 
	@RequiredPermissions(android.Manifest.permission.INTERNET) NetworkInterface(java.lang.String p0,int p1,java.net.InetAddress p2);
}

class ServerSocket {
	@RequiredPermissions(android.Manifest.permission.INTERNET) ServerSocket();
	@RequiredPermissions(android.Manifest.permission.INTERNET) ServerSocket(int p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) ServerSocket(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) ServerSocket(int p0,int p1,java.net.InetAddress p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object bind(java.net.SocketAddress p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object bind(java.net.SocketAddress p0,int p1);
}

class Socket {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket();
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.lang.String p0,int p1,java.net.InetAddress p2,int p3);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.lang.String p0,int p1,boolean p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.net.InetAddress p0,int p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.net.InetAddress p0,int p1,java.net.InetAddress p2,int p3);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.net.InetAddress p0,int p1,boolean p2);
}

class URI {
	static @PolyFlowSources @PolyFlowSinks URI create(@PolyFlowSources @PolyFlowSinks String uri);
	@PolyFlowSources @PolyFlowSinks String getScheme() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getPort() @PolyFlowSources @PolyFlowSinks;
}

class URL {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object getContent(java.lang.Class[] p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object getContent();
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object openConnection(java.net.Proxy p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET)
	@PolyFlowSources @PolyFlowSinks URLConnection openConnection() @PolyFlowSources @PolyFlowSinks;
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object openStream();
	@PolyFlowSources @PolyFlowSinks String toExternalForm() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks URI toURI() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks URL(@PolyFlowSources @PolyFlowSinks String spec);
}

class URLConnection {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object connect();
	@FlowSources({FlowSource.NETWORK}) @PolyFlowSinks InputStream getInputStream() @PolyFlowSinks;
}

package java.security;

class MessageDigest {
	@NoFlow
	static MessageDigest getInstance(String algorithm);
	void update(@PolyFlowSources @PolyFlowSinks byte[] input) @PolyFlowSources @PolyFlowSinks;
}

package java.sql;

class Time {
	@PolyFlowSources @PolyFlowSinks Time(@PolyFlowSources @PolyFlowSinks long theTime); 
}

package java.text;

class DecimalFormat {
    @NoFlow
    void setMaximumIntegerDigits(int value);
}

class NumberFormat {
    @PolyFlowSources @PolyFlowSinks String format(@PolyFlowSources @PolyFlowSinks double value);
}

package java.util;

class Arrays{
    @PolyFlowSources @PolyFlowSinks List<T> asList (T... array) @PolyFlowSources @PolyFlowSinks;
}

class ArrayList<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	@PolyFlowSources @PolyFlowSinks T get(int index) @PolyFlowSources @PolyFlowSinks;
}

class Calendar {
	@PolyFlowSources @PolyFlowSinks boolean after(@PolyFlowSources @PolyFlowSinks Object calendar) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks Calendar getInstance() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks Calendar getInstance(@FlowSinks({}) TimeZone timezone) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int get(@FlowSinks({}) int field) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks Date getTime() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks long getTimeInMillis() @PolyFlowSources @PolyFlowSinks;
	void set(int field, @PolyFlowSources @PolyFlowSinks int value) @PolyFlowSources @PolyFlowSinks;
	void setTime(@PolyFlowSources @PolyFlowSinks Date date) @PolyFlowSources @PolyFlowSinks;
	void setTimeInMillis(@PolyFlowSources @PolyFlowSinks long milliseconds) @PolyFlowSources @PolyFlowSinks;
}

class Collection {
	@NoFlow boolean isEmpty();
}
	
class Collections {
	<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> void sort(@FlowSinks({}) List<T> list, @FlowSinks({}) Comparator<? super T> comparator);
	//Unsure:
	static @PolyFlowSources @PolyFlowSinks Map<K,V> synchronizedMap(@PolyFlowSources @PolyFlowSinks Map<K,V> map); 
}
	
interface Comparator<T extends @FlowSources(FlowSource.ANY) Object> {
	@PolyFlowSources @PolyFlowSinks int compare(@PolyFlowSources @PolyFlowSinks T lhs, @PolyFlowSources @PolyFlowSinks T rhs);
}
	
class Date {
	@FlowSources(FlowSource.TIME) Date();
	@PolyFlowSources @PolyFlowSinks long getTime() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}
@FlowSources(FlowSource.TIME) 
class GregorianCalendar {
    @FlowSources(FlowSource.TIME) GregorianCalendar();
}

class HashMap<K extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object,
	V extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	@PolyFlowSources @PolyFlowSinks V get(@PolyFlowSources @PolyFlowSinks Object key) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String put(@PolyFlowSources @PolyFlowSinks K key, @PolyFlowSources @PolyFlowSinks V value) @PolyFlowSources @PolyFlowSinks;
	@NoFlow
	int size();
}

class LinkedList<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	
}

class List<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	@NoFlow boolean add(T object) @FlowSources(FlowSource.ANY);
    T get(@FlowSinks({}) int index);
	@NoFlow int size() @FlowSources(FlowSource.ANY);
	//How to annotate this: Object[] toArray();
}

class Map<K extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object,
	V extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	@FlowSinks({}) @FlowSources(FlowSource.ANY) boolean containsKey(
		@FlowSinks({}) @FlowSources(FlowSource.ANY) Object key);
	V get(@FlowSinks({}) @FlowSources(FlowSource.ANY) Object key);
	V put(K key, V value);
}

class Queue<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	T peek();
	T poll();
}

class Random {
    @FlowSources(FlowSource.RANDOM) protected int next(@FlowSinks(FlowSink.RANDOM) int bits);
    @FlowSources(FlowSource.RANDOM) boolean nextBoolean();
    void nextBytes(byte @FlowSources(FlowSource.RANDOM) @FlowSinks({}) [] bytes);
    @FlowSources(FlowSource.RANDOM) double nextDouble();
    @FlowSources(FlowSource.RANDOM) float nextFloat();
    @FlowSources(FlowSource.RANDOM) double nextGaussian();
    @FlowSources(FlowSource.RANDOM) int nextInt();
    @FlowSources(FlowSource.RANDOM) int nextInt(@FlowSinks(FlowSink.RANDOM)  int n);
    @FlowSources(FlowSource.RANDOM) long nextLong();
    void setSeed(@FlowSinks(FlowSink.RANDOM) long seed);
}

class Scanner {
	@PolyFlowSources @PolyFlowSinks Scanner (@PolyFlowSources @PolyFlowSinks Readable src);
	boolean hasNext() @FlowSources(FlowSource.ANY);
}

package java.util.concurrent;

class TimeUnit {
	@PolyFlowSources @PolyFlowSinks long toHours(@PolyFlowSources @PolyFlowSinks long duration);
	@PolyFlowSources @PolyFlowSinks long toMinutes(@PolyFlowSources @PolyFlowSinks long duration);
	@PolyFlowSources @PolyFlowSinks long toSeconds(@PolyFlowSources @PolyFlowSinks long duration);
}

package java.util.regex;

class Matcher {
	@PolyFlowSources @PolyFlowSinks boolean find() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String group(int group) @PolyFlowSources @PolyFlowSinks;
}

class Pattern {
	static @PolyFlowSources @PolyFlowSinks Pattern compile(@PolyFlowSources @PolyFlowSinks String str, @FlowSinks({}) int i);
	@PolyFlowSources @PolyFlowSinks Matcher matcher(@PolyFlowSources @PolyFlowSinks CharSequence input) @PolyFlowSources @PolyFlowSinks;
}

/* Android HTTP components */

package org.apache.http;

class HttpEntity {
	@PolyFlowSources @PolyFlowSinks InputStream getContent() @PolyFlowSources @PolyFlowSinks;
}
	
class HttpResponse {
	@PolyFlowSources @PolyFlowSinks HttpEntity getEntity() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks StatusLine getStatusLine() @PolyFlowSources @PolyFlowSinks;
}

class StatusLine {
	@PolyFlowSources @PolyFlowSinks String getReasonPhrase() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getStatusCode() @PolyFlowSources @PolyFlowSinks;
}

package org.apache.http.auth;

class UsernamePasswordCredentials {
	@PolyFlowSources @PolyFlowSinks UsernamePasswordCredentials(@PolyFlowSources @PolyFlowSinks String username, @PolyFlowSources @PolyFlowSinks String password);
}

package org.apache.http.client;

class HttpClient {
	@FlowSources(FlowSource.NETWORK) HttpResponse execute(@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.NETWORK) HttpUriRequest request);
}
	
package org.apache.http.client.methods;

class HttpEntityEnclosingRequestBase {
	void setEntity(@PolyFlowSources @PolyFlowSinks HttpEntity entity) @PolyFlowSources @PolyFlowSinks;
}

class HttpGet {
    @FlowSinks(FlowSink.NETWORK) HttpGet(@FlowSinks(FlowSink.NETWORK) String uri);
    @FlowSinks(FlowSink.NETWORK) HttpGet(@FlowSinks(FlowSink.NETWORK) URI uri);
}

class HttpPost {
	void addHeader(@PolyFlowSources @PolyFlowSinks String name, @PolyFlowSources @PolyFlowSinks String value) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks HttpPost(@PolyFlowSources @PolyFlowSinks String uri);
    @PolyFlowSources @PolyFlowSinks HttpPost(@PolyFlowSources @PolyFlowSinks URI uri);
    void setEntity(@PolyFlowSources @FlowSinks(FlowSink.NETWORK) HttpEntity entity) @PolyFlowSources @FlowSinks(FlowSink.NETWORK);
}

package org.apache.http.entity;

class BufferedHttpEntity {
	@PolyFlowSources @PolyFlowSinks BufferedHttpEntity(@PolyFlowSources @PolyFlowSinks HttpEntity entity);
	@PolyFlowSources @PolyFlowSinks InputStream getContent() @PolyFlowSources @PolyFlowSinks;
}

class FileEntity {
	@PolyFlowSources @PolyFlowSinks FileEntity(@PolyFlowSources @PolyFlowSinks File file, @PolyFlowSources @PolyFlowSinks String contentType);
	void setContentType(@PolyFlowSources @PolyFlowSinks String ctString) @PolyFlowSources @PolyFlowSinks;
}

package org.apache.http.entity.mime.content;

class StringBody {
	StringBody(@FlowSinks(FlowSink.NETWORK) String str);
}

package org.apache.http.impl.client;

class AbstractHttpClient {
	@FlowSources(FlowSource.NETWORK) HttpResponse execute(@FlowSinks(FlowSink.NETWORK) HttpUriRequest request);
	@PolyFlowSources @PolyFlowSinks HttpParams getParams() @PolyFlowSources @PolyFlowSinks;
}

class DefaultHttpClient {
	@RequiredPermissions(android.Manifest.permission.INTERNET) DefaultHttpClient();
	@RequiredPermissions(android.Manifest.permission.INTERNET) DefaultHttpClient(org.apache.http.params.HttpParams p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) DefaultHttpClient(org.apache.http.conn.ClientConnectionManager p0,org.apache.http.params.HttpParams p1);
	// @RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0);
	@FlowSources(FlowSource.NETWORK) HttpResponse execute(@FlowSinks(FlowSink.NETWORK) HttpUriRequest request);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1,org.apache.http.protocol.HttpContext p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.client.ResponseHandler p2,org.apache.http.protocol.HttpContext p3);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.protocol.HttpContext p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.client.ResponseHandler p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.protocol.HttpContext p2);
}

class HttpClient {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET)
	@FlowSources(FlowSource.NETWORK) HttpResponse execute(@FlowSinks(FlowSink.NETWORK) HttpUriRequest request);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1,org.apache.http.protocol.HttpContext p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.client.ResponseHandler p2,org.apache.http.protocol.HttpContext p3);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.protocol.HttpContext p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.client.ResponseHandler p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.protocol.HttpContext p2);
}

package org.apache.http.message;

class AbstractHttpMessage {
	void addHeader(@PolyFlowSources @PolyFlowSinks String name, @PolyFlowSources @PolyFlowSinks String value) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks HttpParams getParams() @PolyFlowSources @PolyFlowSinks;
}

package org.apache.http.params;

class HttpParams {
	@PolyFlowSources @PolyFlowSinks HttpParams setParameter(String name, @PolyFlowSources @PolyFlowSinks Object value) @PolyFlowSources @PolyFlowSinks; 
}

class HttpProtocolParams {
	void setUseExpectContinue(@PolyFlowSources @PolyFlowSinks HttpParams params, boolean b) @PolyFlowSources @PolyFlowSinks;
}

package org.apache.http.util;

class EntityUtils {
    static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks HttpEntity entity);
}

package org.xmlpull.v1;

class XmlPullParser {
	@PolyFlowSources @PolyFlowSinks int getAttributeCount() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getAttributeName(int index) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getAttributeValue(int index) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getEventType() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getName() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int next() @PolyFlowSources @PolyFlowSinks;
	void setInput(@PolyFlowSources @PolyFlowSinks InputStream inputStream, String inputEncoding) @PolyFlowSources @PolyFlowSinks;
}

class XmlSerializer {
	@PolyFlowSources @PolyFlowSinks XmlSerializer endTag(@PolyFlowSources @PolyFlowSinks String nameSpace, @PolyFlowSources @PolyFlowSinks String name) @PolyFlowSources @PolyFlowSinks;
	void setOutput(@PolyFlowSources @PolyFlowSinks Writer writer) @PolyFlowSources @PolyFlowSinks;
	void startDocument(String encoding, Boolean standalone) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks XmlSerializer startTag(@PolyFlowSources @PolyFlowSinks String namespace, @PolyFlowSources @PolyFlowSinks String name) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks XmlSerializer text(@PolyFlowSources @PolyFlowSinks String text) @PolyFlowSources @PolyFlowSinks;
}

/* FROM EXTERNAL JARS */

package uk.me.jstott.coordconv;

class LatitudeLongitude {
	void setLatitude(@PolyFlowSources @PolyFlowSinks double latitude) @PolyFlowSources @PolyFlowSinks;
	void setLongitude(@PolyFlowSources @PolyFlowSinks double longitude) @PolyFlowSources @PolyFlowSinks;
}

package com.commonsware.cwac.bus; //A library of Wordpress

class SimpleBus {
	@PolyFlowSources @PolyFlowSinks Bundle createMessage(@PolyFlowSources @PolyFlowSinks String key);
}

package com.commonsware.cwac.task; //A library of Wordpress

class AsyncTaskEx {
	Result doInBackground(@FlowSinks(FlowSink.FILESYSTEM) Params... params);
}
