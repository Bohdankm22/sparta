import sparta.checkers.quals.*;
import sparta.checkers.quals.FlowSources.FlowSource;
import sparta.checkers.quals.FlowSinks.FlowSink;

@ConservativeFlow
package android;

@ConservativeFlow
package com.android;



@ConservativeFlow
package org.apache.http;

@ConservativeFlow
package java;

/* Is using all of java.* too conservative? At least the following
   packages should be conservative:
package java.io;
package java.net;
package java.sql;
package java.util;
*/

// We might want to use DefaultFlow here.
package java.lang;



class Thread {
	@PolyFlow
	static void sleep(long time);
}

@ConservativeFlow
package java.lang.reflect;

class Method {
    @PolyFlow
    Object invoke(Object obj, Object[] args);
}


package android.accessibilityservice;

class AccessibilityService {
    //TODO: Are intents/broadcasts information flow? Is our system capable of tracking these?
    @PolyFlow
    @RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void clearWallpaper(); //Removes current wallpaper, which returns to the default.
    @PolyFlow
    @RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void removeStickyBroadcast(android.content.Intent p0); //Removes data previously sent with sendStickyBroadCast(Intent).
    @PolyFlow
    @RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyBroadcast(android.content.Intent p0);
    @PolyFlow
    @RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
    @PolyFlow
    @RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(android.graphics.Bitmap p0);
    @PolyFlow
    @RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(java.io.InputStream p0);
}

package android.accounts;

class AbstractAccountAuthenticator {
    @RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
    @FlowSources(FlowSource.ACCOUNTS) Bundle addAccount(
    	@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
    	@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] requiredFeatures,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle confirmCredentials(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle editProperties(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle getAccountRemovalAllowed(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle getAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) String getAuthTokenLabel(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle hasFeatures(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] features);
	@RequiredPermissions(android.Manifest.permission.ACCOUNT_MANAGER)
	@FlowSources(FlowSource.ACCOUNTS) Bundle updateCredentials(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountAuthenticatorResponse response,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options);
}


class AccountAuthenticatorActivity {
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void clearWallpaper();
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void removeStickyBroadcast(android.content.Intent p0);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyBroadcast(android.content.Intent p0);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@PolyFlow
	void setResult(int resultCode, Intent data);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(android.graphics.Bitmap p0);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(java.io.InputStream p0);
}

class AccountManager {
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> addAccount(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] requiredFeatures,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle addAccountOptions,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) boolean addAccountExplicitly(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String password,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle userdata);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) void addOnAccountsUpdatedListener(OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS)
	@FlowSources(FlowSource.ACCOUNTS) String blockingGetAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) boolean notifyAuthFailure);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	void clearPassword(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> confirmCredentials(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	AccountManagerFuture<Bundle> editProperties(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) Account[] getAccounts();
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) Account[] getAccountsByType(
		@FlowSinks(FlowSink.ACCOUNTS) String type);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String type,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] features,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Account[]> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> getAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> getAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) boolean notifyAuthFailure,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.USE_CREDENTIALS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> getAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) boolean notifyAuthFailure,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> getAuthTokenByFeatures(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] features,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle addAccountOptions,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle getAuthTokenOptions,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) 
	@FlowSources(FlowSource.ACCOUNTS) String getPassword(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) 
	@FlowSources(FlowSource.ACCOUNTS) String getUserData(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String key);
	@RequiredPermissions(android.Manifest.permission.GET_ACCOUNTS) 
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Boolean> hasFeatures(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String[] features,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Boolean> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS, android.Manifest.permission.USE_CREDENTIALS})
	void invalidateAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String accountType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authToken);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) String peekAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Boolean> removeAccount(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Boolean> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS)
	void setAuthToken(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authToken);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) 
	void setPassword(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String password);
	@RequiredPermissions(android.Manifest.permission.AUTHENTICATE_ACCOUNTS) 
	void setUserData(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String key,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String value);
	@RequiredPermissions(android.Manifest.permission.MANAGE_ACCOUNTS)
	@FlowSources(FlowSource.ACCOUNTS) AccountManagerFuture<Bundle> updateCredentials(
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Account account,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) String authTokenType,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Bundle options,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Activity activity,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) AccountManagerCallback<Bundle> callback,
		@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.ACCOUNTS) Handler handler);
}

package android.app;

 @FlowSinks({FlowSink.CONDITIONAL, FlowSink.DISPLAY}) @FlowSources(FlowSource.LITERAL)
 class Activity {
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void clearWallpaper();
	@PolyFlow
	View findViewById(int id);
	@PolyFlow
	Context getApplicationContext();
	@PolyFlow
	Intent getIntent();
    
    @FlowSinks({FlowSink.DISPLAY, FlowSink.CONDITIONAL})@PolyFlowSources MenuInflater getMenuInflater() @PolyFlowSources;                                   
	@PolyFlow
	Object getSystemService(String name);
	@PolyFlow
	WindowManager getWindowManager();
	@PolyFlow
	Window getWindow();
	@PolyFlow
	Cursor managedQuery(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder);
	@PolyFlow
	void moveTaskToBack(boolean nonRoot);
	@DefaultFlow
	void onCreate(Bundle savedInstanceState);
	@DefaultFlow
	boolean onCreateOptionsMenu( @FlowSinks({FlowSink.DISPLAY, FlowSink.CONDITIONAL}) Menu menu);
    @DefaultFlow
    void onNewIntent(Intent intent);
	@DefaultFLow
	boolean onOptionsItemSelected(MenuItem item);
	@PolyFlow
	void onSaveInstanceState(Bundle outState);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void removeStickyBroadcast(Intent intent);
	@PolyFlow
	final boolean requestWindowFeature(int featureId);
	@PolyFlow
	void sendBroadcast(Intent intent);
	@PolyFlow
	void sendOrderedBroadcast(Intent intent, String receiverPermission);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyBroadcast(Intent intent);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.INTERNET) void setContentView(int layoutResID);
	@PolyFlow
	void setContentView(View v);
    @PolyFlow
    void setIntent(Intent i);
	@PolyFlow
	void setProgressBarIndeterminateVisibility(boolean visible);
    @PolyFlow
    void setResult(int resultCode, Intent data);
    @PolyFlow
    void setTitle(CharSequence title);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(Bitmap bitmap);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(InputStream data);
	@PolyFlow
	@RequiredPermissions({}) void startActivity(Intent intent);
	@PolyFlow
	@RequiredPermissions({}) void startActivityForResult(Intent intent, int requestCode);
	@PolyFlow
	@RequiredPermissions({}) void startActivityFromChild(Activity child, Intent intent, int requestCode);
	@PolyFlow
	@RequiredPermissions({}) boolean startActivityIfNeeded(Intent intent, int requestCode);

    @FlowSources(FlowSource.FILESYSTEM) @FlowSinks() FileInputStream openFileInput(@FlowSources() @FlowSinks() String name);
}

class ActivityGroup {
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void clearWallpaper();
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void removeStickyBroadcast(Intent intent);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyBroadcast(Intent intent);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(Bitmap bitmap);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) void setWallpaper(InputStream data);
}

class ActivityManager {
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.GET_TASKS) List<ActivityManager.ProcessErrorStateInfo> getRecentTasks(int maxNum, int flags);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.GET_TASKS) List<ActivityManager.RunningTaskInfo> getRunningTasks(int maxNum);
	@PolyFlow
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) void killBackgroundProcesses(String packageName);
	@PolyFlow
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) void restartPackage(String packageName);
}

package android.app.admin;

class DevicePolicyManager {

}


package android.app;

class AlarmManager {
	void set(@FlowSinks({}) int type, @FlowSources(FlowSource.TIME) long triggerAtMillis, @FlowSources(FlowSource.ANY) PendingIntent operation) @FlowSources(FlowSource.ANY);
	void set(@FlowSinks({}) int type, @PolyFlowSources @PolyFlowSinks long triggerAtMillis, @PolyFlowSources @PolyFlowSinks PendingIntent operation);
	@RequiredPermissions(android.Manifest.permission.SET_TIME) Object setTime(long p0);
	@RequiredPermissions(android.Manifest.permission.SET_TIME_ZONE) Object setTimeZone(java.lang.String p0);
}

class AlertDialog$Builder {
	@PolyFlow
	AlertDialog create();
	@PolyFlowSources @PolyFlowSinks Builder setMessage(@PolyFlowSources @PolyFlowSinks CharSequence message);
}
	
class AliasActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class Application {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.app.backup;

class BackupAgent {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class BackupAgentHelper {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.app;


@DefaultFlow
class Dialog {
	@PolyFlow
	void show();
}

class ExpandableListActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class Instrumentation {
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object invokeContextMenuAction(android.app.Activity p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendCharacterSync(int p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendKeyDownUpSync(int p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendKeySync(android.view.KeyEvent p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendPointerSync(android.view.MotionEvent p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendStringSync(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.INJECT_EVENTS) Object sendTrackballEventSync(android.view.MotionEvent p0);
}

class IntentService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}


class KeyguardManager {
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object exitKeyguardSecurely(android.app.KeyguardManager.OnKeyguardExitResult p0);
}

class KeyguardManager$KeyguardLock {
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object disableKeyguard();
	@RequiredPermissions(android.Manifest.permission.DISABLE_KEYGUARD) Object reenableKeyguard();
}

class ListActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@PolyFlow
	void setListAdapter(ListAdapter adapter);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class NotificationManager {
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object notify(int p0,android.app.Notification p1);
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object notify(java.lang.String p0,int p1,android.app.Notification p2);
}

class PendingIntent {
    @PolyFlow
    static PendingIntent getActivity(Context context, int requestCode, Intent intent, int flags);
    @PolyFlow
    static PendingIntent getService(Context context, int requestCode, Intent intent, int flags);
}

@PolyFlow
class ProgressDialog {
	static ProgressDialog show(Context context, CharSequence title, CharSequence message, boolean indeterminate, boolean cancelable);
}

class Service {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@PolyFlow
	void onStart(Intent intent, int startId);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
	@PolyFlow
	@RequiredPermissions({}) void startActivity(Intent intent);
	@RequiredPermissions({}) Object startService(android.content.Intent p0);
}


class TabActivity {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class WallpaperManager {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clear();
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setBitmap(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setResource(int p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setStream(java.io.InputStream p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER_HINTS) Object suggestDesiredDimensions(int p0,int p1);
}

package android.appwidget;

class AppWidgetManager {
	@RequiredPermissions(android.Manifest.permission.BIND_APPWIDGET) Object bindAppWidgetId(int p0,android.content.ComponentName p1);
	@PolyFlow
	int [] getAppWidgetIds(ComponentName cn);
	@PolyFlow
	AppWidgetProviderInfo getAppWidgetInfo(int appWidgetId);
	@PolyFlow
	AppWidgetManager getInstance(Context c);
	@PolyFlow
	void updateAppWidget(int appWidgetId, RemoteViews views);
	
}

package android.bluetooth;

class BluetoothA2dp {

}

class BluetoothAdapter {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object cancelDiscovery();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object disable();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object enable();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getAddress();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBondedDevices();

	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getName();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getScanMode();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isDiscovering();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object isEnabled();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object listenUsingRfcommWithServiceRecord(java.lang.String p0,java.util.UUID p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) Object setName(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH_ADMIN) Object startDiscovery();
}

class BluetoothDevice {

	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object createRfcommSocketToServiceRecord(java.util.UUID p0);
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object fetchUuidsWithSdp();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getBondState();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getName();
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object getUuids();

}

class BluetoothHeadset {

}



class BluetoothSocket {
	@RequiredPermissions(android.Manifest.permission.BLUETOOTH) Object connect();
}


package android.content;

class ComponentName {
    @PolyFlowSources @PolyFlowSinks ComponentName(@PolyFlowSources @PolyFlowSinks String pkg, @PolyFlowSources @PolyFlowSinks String path);	
	@PolyFlow
	String getClassName();
}

class ContentProvider {
	@PolyFlow Context getContext();
}

class ContentResolver {
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@PolyFlowSources @PolyFlowSinks int delete(@PolyFlowSources @PolyFlowSinks Uri url, @PolyFlowSources @PolyFlowSinks String where, @FlowSinks({}) String @FlowSinks({}) [] selectionArgs);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object getCurrentSync();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getMasterSyncAutomatically();
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_SETTINGS) Object getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	@PolyFlowSources @PolyFlowSinks Uri insert(@PolyFlowSources @PolyFlowSinks Uri url, @PolyFlowSources @PolyFlowSinks ContentValues value);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_SYNC_STATS) Object isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openFileDescriptor(android.net.Uri p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openInputStream(android.net.Uri p0);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openOutputStream(android.net.Uri p0);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS)
	@PolyFlowSources @PolyFlowSinks	Cursor query(@PolyFlowSources @PolyFlowSinks Uri uri, @PolyFlowSources @PolyFlowSinks String @PolyFlowSources @PolyFlowSinks [] projection, String selection, String[] selectionArgs, String sortOrder);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_SYNC_SETTINGS) Object setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
	int update(@PolyFlowSources @PolyFlowSinks Uri uri, @PolyFlowSources @PolyFlowSinks ContentValues values, @FlowSinks({}) String where, @FlowSinks({}) String @FlowSinks({}) [] selectionArgs);
}

class ContentValues {
	void put(@FlowSinks({}) String key, @FlowSources(FlowSource.ANY) @FlowSinks Double value);
	void put(@FlowSinks({}) String key, @FlowSources(FlowSource.ANY) @FlowSinks Integer value);
	void put(@FlowSinks({}) String key, @FlowSources(FlowSource.ANY) @FlowSinks Long value);
	void put(@FlowSinks({}) String key, @FlowSources(FlowSource.ANY) @FlowSinks String value);
	//TODO: Add the rest of the put methods
}

class ContentUris {
 	static @PolyFlowSources @PolyFlowSinks Uri withAppendedId(@PolyFlowSources @PolyFlowSinks Uri contentUri, @PolyFlowSources @PolyFlowSinks long id);
}
	
class Context {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@PolyFlow ContentResolver getContentResolver();
	@FlowSinks(FlowSink.FILESYSTEM) File getDir(@FlowSinks(FlowSink.FILESYSTEM) String name, int mode);
	@PolyFlow String getPackageName();
	@PolyFlow Resources getResources();
	@PolyFlow 
	String getString( int i,Object... objs);
	@PolyFlow String getString(@FlowSinks({}) int i);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
	@RequiredPermissions({}) Object startActivity(android.content.Intent p0);
	@PolyFlow
	@RequiredPermissions({}) Object startService(Intent service);
    @FlowSources(FlowSource.FILESYSTEM) @FlowSinks() FileInputStream openFileInput(@FlowSources() @FlowSinks() String name);
}

class ContextWrapper {
    @FlowSinks(FlowSink.FILESYSTEM) @FlowSources File getDir(@FlowSinks(FlowSink.FILESYSTEM) @FlowSources String name, int mode);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@PolyFlow
	Context getBaseContext();
	@PolyFlow
	ContentResolver getContentResolver();
	@PolyFlow
	Resources getResources();
	//TODO getSystemService() returns handles for various flow-sensitive classes. This method doesn't need to be annotated,
	// but the methods on those objects do require annotation.
	@PolyFlow
	Object getSystemService(@FlowSinks({}) String name);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) Object sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
	@PolyFlow
	@RequiredPermissions({}) void startActivity(Intent intent);
	@PolyFlow
	@RequiredPermissions({}) ComponentName startService(Intent service);
}


class Intent {
	@FlowSources(FlowSource.ANY) String getAction();
	@FlowSources(FlowSource.ANY) Uri getData();
	@FlowSources(FlowSource.ANY) Bundle getExtras();
	@FlowSources(FlowSource.ANY) int getIntExtra(@FlowSinks({}) String name, @FlowSinks({}) int defaultValue);
	@FlowSources(FlowSource.ANY) String getStringExtra(@FlowSinks({}) String name);
	@PolyFlowSources @PolyFlowSinks Intent putExtra(@PolyFlowSources @PolyFlowSinks String name, @PolyFlowSources @PolyFlowSinks int value);
	@PolyFlowSources @PolyFlowSinks Intent putExtra(@PolyFlowSources @PolyFlowSinks String name, @PolyFlowSources @PolyFlowSinks String value);
    @PolyFlowSources @PolyFlowSinks Intent setComponent(@PolyFlowSources @PolyFlowSinks ComponentName name);
	@PolyFlow
	Intent setClass(Context packageContext, Class<?> cls);
	@FlowSources(FlowSource.ANY) Intent setData(@FlowSources(FlowSource.ANY) @FlowSinks({}) Uri data);
	@PolyFlow
	Intent setFlags(int flags);	
}

class MutableContextWrapper {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.content.pm;

class PackageManager {
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object addPreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	@RequiredPermissions(android.Manifest.permission.SET_PREFERRED_APPLICATIONS) Object clearPackagePreferredActivities(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setApplicationEnabledSetting(java.lang.String p0,int p1,int p2);
	@RequiredPermissions(android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE) Object setComponentEnabledSetting(android.content.ComponentName p0,int p1,int p2);
}

package android.content;

class UriMatcher {
    void addURI(@PolyFlowSources @PolyFlowSinks String authority,
        @PolyFlowSources @PolyFlowSinks String path,
        @PolyFlowSources @PolyFlowSinks int code) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int match(@PolyFlowSources @PolyFlowSinks Uri uri) @PolyFlowSources @PolyFlowSinks;
	@PolyFlow
	UriMatcher(int code);
}

package android.content.res;

class ColorStateList {
	@PolyFlow
	int getDefaultColor();
}

class Resources {
	@PolyFlow
	float getDimension(int id);
	@PolyFlow
	Drawable getDrawable(int id);
	@PolyFlow
	String getString(int id);
	@PolyFlowSources @PolyFlowSinks String getString(@FlowSinks int id, @PolyFlowSources @PolyFlowSinks Object... objs);
	@PolyFlow
	CharSequence getText(int id);
}

package android.database;

class ContentObserver {
    @PolyFlow void onChange(boolean selfChange);
}

class Cursor {
	@PolyFlow void close() @FlowSources(FlowSource.ANY);
	@FlowSources(FlowSource.ANY) double getDouble(@FlowSinks({}) int columnIndex) @FlowSources(FlowSource.ANY);
	@FlowSources(FlowSource.ANY) long getLong(@FlowSinks({}) int columnIndex) @FlowSources(FlowSource.ANY);
	@PolyFlowSources @PolyFlowSinks String getString(@FlowSources(FlowSource.ANY) @FlowSinks({}) int columnIndex) @PolyFlowSources @PolyFlowSinks;
	@FlowSources(FlowSource.ANY) int getInt(@FlowSinks({}) int columnIndex) @FlowSources(FlowSource.ANY);
	@PolyFlow boolean moveToFirst() @FlowSources(FlowSource.ANY);
	@PolyFlow boolean moveToNext() @FlowSources(FlowSource.ANY);
	@PolyFlow boolean isAfterLast() @FlowSources(FlowSource.ANY);
	@FlowSources({}) @FlowSinks({}) int getColumnIndex(String name) @FlowSources(FlowSource.ANY);	
	 
	//TODO: Add the rest of the get methods
	//Note: Must manually cast the results from the cursor if the cursor comes from Context.getContentResolver()
}

package android.database.sqlite;

class SQLiteOpenHelper {
	@PolyFlow SQLiteDatabase getWritableDatabase();
}

class SQLiteDatabase {
	@PolyFlow
	int delete(String p1, String p2, String[] p3);
	@PolyFlow
	void execSQL(String sql);
	@PolyFlow
	long insert(String table, String nullColumnHack, ContentValues values);
	//@FlowSources({}) int insert(String p1, String p2, @PolyFlowSources ContentValues p3) @PolyFlowSources;
	@FlowSources({}) int update(
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String table,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) ContentValues values,
        @FlowSources(FlowSource.ANY) @FlowSinks({}) String whereClause,
        @FlowSources(FlowSource.ANY) @FlowSinks({}) String @FlowSinks({}) [] whereArgs);
}

class SQLiteQueryBuilder {
	@PolyFlow
	void appendWhere(CharSequence inWhere);
	@FlowSources(FlowSource.ANY) Cursor query(
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) SQLiteDatabase db,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String @FlowSinks({}) [] projectionIn,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String selection,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String @FlowSinks({}) [] selectionArgs,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String groupBy,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String having,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String sortOrder,
	    @FlowSources(FlowSource.ANY) @FlowSinks({}) String limit); 
    @PolyFlow
    void setTables(String inTables);
}

package android.graphics;

class Bitmap {
	boolean compress(@FlowSinks({}) CompressFormat format, @FlowSinks({}) int quality, @PolyFlowSinks @PolyFlowSources OutputStream stream) @PolyFlowSinks @PolyFlowSources;
}
//TODO: Maybe should be android.graphics.drawable.BitmapDrawable
/*class BitmapDrawable {
	BitmapDrawable(@PolyFlowSources @PolyFlowSinks String filepath) @PolyFlowSources @PolyFlowSinks;
}*/

class BitmapFactory {
	@PolyFlowSources @PolyFlowSinks Bitmap decodeByteArray(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] data,
		@FlowSinks({}) int offset, @FlowSinks({}) int length);
}

class Color {
    static @PolyFlowSources @PolyFlowSinks int parseColor(@PolyFlowSources @PolyFlowSinks String color);
}
	
package android.hardware;

class Camera {
	@PolyFlow
	Parameters getParameters();
	@PolyFlow 
	@RequiredPermissions(android.Manifest.permission.CAMERA) Camera open();
	@PolyFlow
	void setParameters(Parameters params);
	@PolyFlow
	void setPreviewDisplay(SurfaceHolder holder);
	void takePicture(@FlowSinks({}) ShutterCallback shutter, @FlowSources(FlowSource.CAMERA) PictureCallback raw, @FlowSources(FlowSource.CAMERA) @FlowSinks({}) PictureCallback jpeg);
}


interface Camera$PictureCallback {
	void onPictureTaken(@FlowSources(FlowSource.CAMERA) byte[] data, Camera camera);
}


class Sensor {
	  @FlowSources(FlowSource.ACCELEROMETER) int TYPE_ACCELEROMETER;
}

class SensorManager {
	 @PolyFlowSources @PolyFlowSinks android.hardware.Sensor getDefaultSensor(@PolyFlowSources @PolyFlowSinks int type);
}

class SensorEvent {
	@FlowSources(FlowSource.ACCELEROMETER) @FlowSinks float[] values;
}

package android.inputmethodservice;

class AbstractInputMethodService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.location;
class Address {
	@FlowSources(FlowSource.LOCATION) String getAdminArea() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) String getCountryName() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) String getFeatureName() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) double getLatitude() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) String getLocality() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) double getLongitude() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) String getPostalCode() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) boolean hasLatitude() @FlowSources(FlowSource.LOCATION);
	@FlowSources(FlowSource.LOCATION) boolean hasLongitude() @FlowSources(FlowSource.LOCATION);
}

class Geocoder {
	@FlowSources({}) List<@FlowSources(FlowSource.LOCATION) Address> 
		getFromLocation(@FlowSources(FlowSource.LOCATION) @FlowSinks({}) double latitude, 
		@FlowSources(FlowSource.LOCATION) @FlowSinks({}) double longitude, @FlowSinks({}) int maxResults);
		
	@FlowSources({}) List<@FlowSources(FlowSource.LOCATION) Address> 
	    getFromLocationName(@FlowSources(FlowSource.LOCATION) @FlowSinks({}) String locationName, @FlowSinks({}) int maxResults);
}


class Location {
	@FlowSources(FlowSource.LOCATION) float bearingTo(@FlowSources(FlowSource.LOCATION) Location dest) @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) int describeContents() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) float distanceTo(@FlowSources({FlowSource.LOCATION, FlowSource.TIME}) Location dest) @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void dump(@FlowSources(FlowSource.LOCATION) Printer pw, String prefix) @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) float getAccuracy() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) double getAltitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) float getBearing() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) Bundle getExtras() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) double getLatitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) double getLongitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) String getProvider() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) float getSpeed() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.TIME) long getTime() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) boolean hasAccuracy() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) boolean hasAltitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) boolean hasBearing() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	@FlowSources(FlowSource.LOCATION) boolean hasSpeed() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	
	void removeAccuracy() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void removeAltitude() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void removeBearing() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void removeSpeed() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	void reset() @FlowSources({FlowSource.LOCATION, FlowSource.TIME});
	
	void set(@PolyFlowSources @PolyFlowSinks Location l) @PolyFlowSources @PolyFlowSinks;
	void setAccuracy(@PolyFlowSources @PolyFlowsinks float accuracy) @PolyFlowSources @PolyFlowSinks;
	void setAltitude(@PolyFlowSources @PolyFlowsinks double altitude) @PolyFlowSources @PolyFlowSinks;
	void setBearing(@PolyFlowSources @PolyFlowsinks float bearing) @PolyFlowSources @PolyFlowSinks;
	void setExtras(@PolyFlowSources @PolyFlowsinks Bundle extras) @PolyFlowSources @PolyFlowSinks;
	void setLongitude(@PolyFlowSources @PolyFlowsinks double longitude) @PolyFlowSources @PolyFlowSinks;
	void setProvider(@PolyFlowSources @PolyFlowsinks String provider) @PolyFlowSources @PolyFlowSinks;
	void setSpeed(@PolyFlowSources @PolyFlowsinks float speed) @PolyFlowSources @PolyFlowSinks;
	void setTime(@PolyFlowSources @PolyFlowsinks long time) @PolyFlowSources @PolyFlowSinks;
}

interface LocationListener {
	void onLocationChanged(@FlowSources(FlowSource.LOCATION) Location location);
}

class LocationManager {

	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object addGpsStatusListener(android.location.GpsStatus.Listener p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object addNmeaListener(android.location.GpsStatus.NmeaListener p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_FINE_LOCATION) Object addProximityAlert(double p0,double p1,float p2,long p3,android.app.PendingIntent p4);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object addTestProvider(java.lang.String p0,boolean p1,boolean p2,boolean p3,boolean p4,boolean p5,boolean p6,boolean p7,int p8,int p9);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderEnabled(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderLocation(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object clearTestProviderStatus(java.lang.String p0);
	@PolyFlow 
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION})
	String getBestProvider(Criteria criteria, boolean enabledOnly);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION})
	@FlowSources({FlowSource.LOCATION, FlowSource.TIME}) Location getLastKnownLocation(@FlowSinks({}) String provider);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getProvider(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getProviders(android.location.Criteria p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getProviders(boolean p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object isProviderEnabled(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object removeTestProvider(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object requestLocationUpdates(java.lang.String p0,long p1,float p2,android.app.PendingIntent p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.LocationListener p3,android.os.Looper p4);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.LocationListener p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_LOCATION_EXTRA_COMMANDS}) Object sendExtraCommand(java.lang.String p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderEnabled(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderLocation(java.lang.String p0,android.location.Location p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_MOCK_LOCATION) Object setTestProviderStatus(java.lang.String p0,int p1,android.os.Bundle p2,long p3);
}
	
package android.media;

class AsyncPlayer {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object play(android.content.Context p0,android.net.Uri p1,boolean p2,int p3);
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object stop();
}

class AudioManager {
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object isBluetoothA2dpOn();
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object isWiredHeadsetOn();
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setBluetoothScoOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setMicrophoneMute(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setMode(int p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setParameters(java.lang.String p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object setSpeakerphoneOn(boolean p0);
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object startBluetoothSco();
	@RequiredPermissions(android.Manifest.permission.MODIFY_AUDIO_SETTINGS) Object stopBluetoothSco();
}

class AudioRecord {
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) AudioRecord(int p0,int p1,int p2,int p3,int p4);
}

class ExifInterface{
 public ExifInterface(@FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources String filename);

@FlowSources({FlowSource.LOCATION,FlowSource.FILESYSTEM}) @PolyFlowSinks double  getAltitude(@FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources double defaultValue);

@FlowSources(FlowSource.FILESYSTEM) @PolyFlowSinks String        getAttribute(@FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources String tag);

@FlowSources({FlowSource.FILESYSTEM}) @PolyFlowSinks double      getAttributeDouble(@FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources String tag, @FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources double defaultValue);

@FlowSources({FlowSource.FILESYSTEM}) @PolyFlowSinks int         getAttributeInt(@FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources String tag,@FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources int defaultValue);

@FlowSources({FlowSource.FILESYSTEM}) @PolyFlowSinks boolean     getLatLong(@FlowSources({FlowSource.LOCATION,FlowSource.FILESYSTEM})@PolyFlowSinks  float[] output);

@FlowSources({FlowSource.FILESYSTEM}) @PolyFlowSinks byte[]      getThumbnail();

@FlowSources({FlowSource.FILESYSTEM}) @PolyFlowSinks boolean     hasThumbnail();

void     saveAttributes();

void     setAttribute(@FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources String tag, @FlowSinks(FlowSink.FILESYSTEM) @PolyFlowSources String value);
}



class MediaPlayer {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object start();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object stop();
}

class MediaRecorder {
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object setAudioSource(int p0);
	@RequiredPermissions(android.Manifest.permission.CAMERA) Object setVideoSource(int p0);
}

class RingtoneManager {
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object setActualDefaultRingtoneUri(android.content.Context p0,int p1,android.net.Uri p2);
}

package android.net;

class ConnectivityManager {
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getActiveNetworkInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getAllNetworkInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getNetworkInfo(int p0);
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object getNetworkPreference();
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object requestRouteToHost(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, "android.permission.BACKUP"}) Object setNetworkPreference(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) Object startUsingNetworkFeature(int p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.CHANGE_NETWORK_STATE) Object stopUsingNetworkFeature(int p0,java.lang.String p1);
}

package android.net;

class NetworkInfo {
	@RequiredPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE) Object isConnectedOrConnecting();
}

class Uri {
	@FlowSources({}) List<@PolyFlowSources @PolyFlowSinks String> getPathSegments() @PolyFlowSources @PolyFlowSinks;
	static @PolyFlowSources @PolyFlowSinks Uri parse(@PolyFlowSources @PolyFlowSinks String uriString);
	static @PolyFlowSources @PolyFlowSinks Uri withAppendedPath(@PolyFlowSources @PolyFlowSinks Uri baseUri, @PolyFlowSources @PolyFlowSinks String pathSegment);
}
	
package android.net.wifi;

class WifiManager {
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object addNetwork(android.net.wifi.WifiConfiguration p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object disableNetwork(int p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object disconnect();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object enableNetwork(int p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getConfiguredNetworks();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getConnectionInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getDhcpInfo();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getScanResults();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object getWifiState();
	@RequiredPermissions(android.Manifest.permission.ACCESS_WIFI_STATE) Object isWifiEnabled();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object pingSupplicant();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object reassociate();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object reconnect();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object removeNetwork(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE, "android.permission.BACKUP"}) Object saveConfiguration();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object setWifiEnabled(boolean p0);
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_STATE) Object startScan();
}

class WifiManager$MulticastLock {
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object acquire();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object finalize();
	@RequiredPermissions(android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE) Object release();
}

class WifiManager$WifiLock {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquire();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object finalize();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object release();
}

package android.opengl;

class GLSurfaceView {
	@PolyFlow
	void setRenderer(Renderer r);
}

package android.os;

class AsyncTask {
    abstract @FlowSources(FlowSource.ANY) Result doInBackground(@FlowSinks({}) Params... params);
}

class Bundle {
	@PolyFlowSources @PolyFlowSinks boolean getBoolean(@FlowSinks({}) String key, @FlowSinks({}) boolean defaultValue) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks double getDouble(@FlowSinks({}) String key) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getInt(@FlowSinks({}) String key) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getString(@FlowSinks({}) String key) @PolyFlowSources @PolyFlowSinks;
	void putDouble(@PolyFlowSources @PolyFlowSinks String key, @PolyFlowSources @PolyFlowSinks double value) @PolyFlowSources @PolyFlowSinks;
	void putInt(@PolyFlowSources @PolyFlowSinks String key, @PolyFlowSources @PolyFlowSinks int value) @PolyFlowSources @PolyFlowSinks;
}
	
class DropBoxManager {
	@RequiredPermissions(android.Manifest.permission.READ_LOGS) Object getNextEntry(java.lang.String p0,long p1);
}

class Environment {
	@RequiredPermissions({android.Manifest.permission.WRITE_EXTERNAL_STORAGE, /*OR*/ "android.permission.READ_EXTERNAL_STORAGE"})
	static @FlowSources(FlowSource.EXTERNAL_STORAGE) File getExternalStorageDirectory();
	@RequiredPermissions({android.Manifest.permission.WRITE_EXTERNAL_STORAGE, /*OR*/ "android.permission.READ_EXTERNAL_STORAGE"})
	static @FlowSources(FlowSource.EXTERNAL_STORAGE) File getExternalStoragePublicDirectory(@FlowSources @FlowSinks String type);
}

class Handler {
	@PolyFlow
	boolean sendMessageDelayed(Message m, long delay);
    @PolyFlow
    boolean postDelayed(Runnable r, long delay);
    @PolyFlow
    Message obtainMessage(int what, Object obj);
}

class Parcel {
	void writeString(@PolyFlowSources @PolyFlowSinks String val) @PolyFlowSources @PolyFlowSinks;
}
	
class PowerManager {
	@RequiredPermissions(android.Manifest.permission.DEVICE_POWER) Object goToSleep(long p0);
	@RequiredPermissions(android.Manifest.permission.REBOOT) Object reboot(java.lang.String p0);
}

class PowerManager$WakeLock {
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquire();
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object acquire(long p0);
	@RequiredPermissions(android.Manifest.permission.WAKE_LOCK) Object release();
}

class RecoverySystem {
	@RequiredPermissions(android.Manifest.permission.REBOOT) Object installPackage(android.content.Context p0,java.io.File p1);
	@RequiredPermissions(android.Manifest.permission.REBOOT) Object rebootWipeUserData(android.content.Context p0);
}

package android.os.storage;


class StorageManager {
}

package android.os;

class Vibrator {
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object cancel();
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object vibrate(long[] p0,int p1);
	@RequiredPermissions(android.Manifest.permission.VIBRATE) Object vibrate(long p0);
}

package android.preference;

class EditTextPreference {
	void setText(@PolyFlowSources @PolyFlowSinks String text) @PolyFlowSources @PolyFlowSinks;
}

class PreferenceActivity{
    @DefaultFlow
    void onCreate(Bundle savedInstanceState);
    @DefaultFlow
    void addPreferencesFromResource(int i);
}


package android.provider;

class Browser {
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object addSearchUrl(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object canClearHistory(android.content.ContentResolver p0);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object clearHistory(android.content.ContentResolver p0);
	@RequiredPermissions(android.Manifest.permission.WRITE_HISTORY_BOOKMARKS) Object clearSearches(android.content.ContentResolver p0);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object deleteFromHistory(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object deleteHistoryTimeFrame(android.content.ContentResolver p0,long p1,long p2);
	@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object getAllBookmarks(android.content.ContentResolver p0);
	@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object getAllVisitedUrls(android.content.ContentResolver p0);
	@RequiredPermissions(android.Manifest.permission.READ_HISTORY_BOOKMARKS) Object requestAllIcons(android.content.ContentResolver p0,java.lang.String p1,android.webkit.WebIconDatabase.IconListener p2);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object truncateHistory(android.content.ContentResolver p0);
	@RequiredPermissions({android.Manifest.permission.READ_HISTORY_BOOKMARKS, android.Manifest.permission.WRITE_HISTORY_BOOKMARKS}) Object updateVisitedHistory(android.content.ContentResolver p0,java.lang.String p1,boolean p2);
}
class CallLog$Calls {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getLastOutgoingCall(android.content.Context p0);
}

class Contacts$People {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) Object addToGroup(android.content.ContentResolver p0,long p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object addToGroup(android.content.ContentResolver p0,long p1,long p2);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object addToMyContactsGroup(android.content.ContentResolver p0,long p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) Object createPersonInMyContactsGroup(android.content.ContentResolver p0,android.content.ContentValues p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object loadContactPhoto(android.content.Context p0,android.net.Uri p1,int p2,android.graphics.BitmapFactory.Options p3);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) Object markAsContacted(android.content.ContentResolver p0,long p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openContactPhotoInputStream(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object queryGroups(android.content.ContentResolver p0,long p1);
}

class Contacts$Settings {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getSetting(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object setSetting(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3);
}

class ContactsContract$Contacts {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object lookupContact(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions(android.Manifest.permission.WRITE_CONTACTS) Object markAsContacted(android.content.ContentResolver p0,long p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object openContactPhotoInputStream(android.content.ContentResolver p0,android.net.Uri p1);
}

class ContactsContract$Data {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getContactLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
}

class ContactsContract$RawContacts {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object getContactLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
}


class Settings$Secure {
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object putFloat(android.content.ContentResolver p0,java.lang.String p1,float p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object putInt(android.content.ContentResolver p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object putLong(android.content.ContentResolver p0,java.lang.String p1,long p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object putString(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) Object setLocationProviderEnabled(android.content.ContentResolver p0,java.lang.String p1,boolean p2);
}

class Settings$System {
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putConfiguration(android.content.ContentResolver p0,android.content.res.Configuration p1);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putFloat(android.content.ContentResolver p0,java.lang.String p1,float p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putInt(android.content.ContentResolver p0,java.lang.String p1,int p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putLong(android.content.ContentResolver p0,java.lang.String p1,long p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object putString(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions(android.Manifest.permission.WRITE_SETTINGS) Object setShowGTalkServiceStatus(android.content.ContentResolver p0,boolean p1);
}

class UserDictionary$Words {
	@RequiredPermissions("android.permission.WRITE_USER_DICTIONARY") Object addWord(android.content.Context p0,java.lang.String p1,int p2,int p3);
}

package android.service.wallpaper;

class WallpaperService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

package android.speech;

class RecognitionService {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class SpeechRecognizer {
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object cancel();
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object startListening(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.RECORD_AUDIO) Object stopListening();
}

package android.telephony.gsm;

class SmsManager {
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendMultipartTextMessage(java.lang.String p0,java.lang.String p1,java.util.ArrayList p2,java.util.ArrayList p3,java.util.ArrayList p4);
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendTextMessage(java.lang.String p0,java.lang.String p1,java.lang.String p2,android.app.PendingIntent p3,android.app.PendingIntent p4);
}

package android.telephony;

class PhoneNumberUtils {
	@RequiredPermissions({android.Manifest.permission.CALL_PRIVILEGED, android.Manifest.permission.READ_CONTACTS}) Object getNumberFromIntent(android.content.Intent p0,android.content.Context p1);
}

class SmsManager {

	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendMultipartTextMessage(java.lang.String p0,java.lang.String p1,java.util.ArrayList p2,java.util.ArrayList p3,java.util.ArrayList p4);
	@RequiredPermissions(android.Manifest.permission.SEND_SMS) Object sendTextMessage(java.lang.String p0,java.lang.String p1,java.lang.String p2,android.app.PendingIntent p3,android.app.PendingIntent p4);
}

class SmsMessage {
	@FlowSources(FlowSource.SMS) SmsMessage createFromPdu(byte @FlowSinks []  pdu);
	@PolyFlowSources @PolyFlowSinks String getMessageBody() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getOriginatingAddress() @PolyFlowSources @PolyFlowSinks;
}

class TelephonyManager {
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION})
	@FlowSources(FlowSource.LOCATION) CellLocation getCellLocation();

	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE)
	@FlowSources(FlowSource.IMEI) String getDeviceId();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getDeviceSoftwareVersion();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE)
	@FlowSources(FlowSource.PHONE_NUMBER) String getLine1Number();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object getNeighboringCellInfo();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getSimSerialNumber();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getSubscriberId();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE) Object getVoiceMailAlphaTag();
	@RequiredPermissions(android.Manifest.permission.READ_PHONE_STATE)
	@FlowSources(FlowSource.PHONE_NUMBER) String getVoiceMailNumber();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object listen(android.telephony.PhoneStateListener p0,int p1);
}

package android.text;

class Editable {
    @PolyFlowSources @PolyFlowSinks Editable append(@PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
    @PolyFlow
    void clear();
    @PolyFlowSources @PolyFlowSinks Editable insert(@FlowSinks({}) int where, @PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class TextUtils {
	@PolyFlowSources @PolyFlowSinks boolean isEmpty(@PolyFlowSources @PolyFlowSinks CharSequence str);
}

package android.text.format;

class DateUtils {
	@PolyFlowSources @PolyFlowSinks String getDayOfWeekString(@PolyFlowSources @PolyFlowSinks int dayOfWeek, @FlowSinks({}) int abbrev);
}

class Time {
	//TODO: This should probably be double checked later:
	boolean parse3339(@PolyFlowSources @PolyFlowSinks String s) @PolyFlowSources @PolyFlowSinks;
	void set(@PolyFlowSources @PolyFlowSinks long l1) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks long toMillis(@FlowSinks({}) boolean b) @PolyFlowSources @PolyFlowSinks;
}

package android.util;

class Base64 {
    static @PolyFlowSources @PolyFlowSinks byte[] decode(@PolyFlowSources @PolyFlowSinks java.lang.String str, @PolyFlowSources @PolyFlowSinks int flags);
}

class FloatMath {
    static @PolyFlowSources @PolyFlowSinks float ceil(@PolyFlowSources @PolyFlowSinks float value);
    static @PolyFlowSources @PolyFlowSinks float cos(@PolyFlowSources @PolyFlowSinks float angle);
    static @PolyFlowSources @PolyFlowSinks float floor(@PolyFlowSources @PolyFlowSinks float value);
    static @PolyFlowSources @PolyFlowSinks float sin(@PolyFlowSources @PolyFlowSinks float angle);
    static @PolyFlowSources @PolyFlowSinks float sqrt(@PolyFlowSources @PolyFlowSinks float value);
}

class Log {
static @FlowSources(FlowSource.LOG) int	 d(@FlowSinks(FlowSink.LOG) @FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg);
static @FlowSources(FlowSource.LOG) int	 d(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg, @FlowSinks(FlowSink.LOG) Throwable tr);
static @FlowSources(FlowSource.LOG) int	 e(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg);
static @FlowSources(FlowSource.LOG) int	 e(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg, @FlowSinks(FlowSink.LOG) Throwable tr);
static @FlowSources(FlowSource.LOG) int	 i(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg);
static @FlowSources(FlowSource.LOG) int	 i(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg, @FlowSinks(FlowSink.LOG) Throwable tr);
static @FlowSources(FlowSource.LOG) int	 v(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg);
static @FlowSources(FlowSource.LOG) int	 v(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg, @FlowSinks(FlowSink.LOG) Throwable tr);
static @FlowSources(FlowSource.LOG) int	 w(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) Throwable tr);
static @FlowSources(FlowSource.LOG) int	 w(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg, @FlowSinks(FlowSink.LOG) Throwable tr);
static @FlowSources(FlowSource.LOG) int	 w(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg);
static @FlowSources(FlowSource.LOG) int	 wtf(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) Throwable tr);
static @FlowSources(FlowSource.LOG) int	 wtf(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg);
static @FlowSources(FlowSource.LOG) int	 wtf(@FlowSinks(FlowSink.LOG) String tag, @FlowSinks(FlowSink.LOG) String msg, @FlowSinks(FlowSink.LOG) Throwable tr);
}

package android.view;

class ContextThemeWrapper {
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object clearWallpaper();
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions(android.Manifest.permission.BROADCAST_STICKY) Object sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@PolyFlow
	void setTheme(int resid);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions(android.Manifest.permission.SET_WALLPAPER) Object setWallpaper(java.io.InputStream p0);
}

class Display {
    @PolyFlow
    void getMetrics(DisplayMetrics outMetrics);
}


class KeyEvent {
    @PolyFlow
    int getAction();
    @FlowSources(FlowSource.USER_INPUT) int getKeyCode();
}

class Menu {
    @PolyFlow
    MenuItem add(int groupId, int itemId, int order, CharSequence title);
    
     @FlowSinks({FlowSink.DISPLAY, FlowSink.CONDITIONAL})@PolyFlowSources MenuItem findItem ( @FlowSinks({FlowSink.DISPLAY, FlowSink.CONDITIONAL}) @PolyFlowSources int id);
}

class MenuInflater {                                                  
    @DefaultFlow                                                           
    void inflate(int menuRes, Menu menu);                             
}

@DefaultFlow
class MenuItem {
    @PolyFlow
    int getItemId();
   @FlowSinks({FlowSink.DISPLAY, FlowSink.CONDITIONAL}) MenuItem setVisible(@FlowSinks({FlowSink.DISPLAY, FlowSink.CONDITIONAL}) boolean visible);
}

class Surface {

}

class SurfaceHolder {
	@PolyFlow
	void addCallback(Callback callback);
	@PolyFlow
	void setType(int type);
}


class SurfaceView {
	@PolyFlow
	SurfaceHolder getHolder();
}

class View {
	@PolyFlow
	View findViewById(int id);
	@PolyFlowSources @PolyFlowSinks Context getContext() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getId() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks Object getTag() @PolyFlowSources @PolyFlowSinks;
	@PolyFlow
	void setOnClickListener(OnClickListener l);
	@PolyFlow
	void setOnKeyListener(OnKeyListener l);
	@PolyFlow
	void setVisibility(int visibility);
}

class Window {
	void setFlags(@FlowSinks({}) int flags, @FlowSinks({}) int mask) @FlowSources({FlowSource.ANY});
	@PolyFlow
	void addFlags(int flags);
        @PolyFlow
        void setAttributes(@FlowSources({FlowSource.ANY}) android.view.WindowManager.LayoutParams a);
}

class WindowManager {
    @PolyFlow
    Display getDefaultDisplay();
}

package android.webkit;



class WebChromeClient {
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) Object onGeolocationPermissionsShowPrompt(java.lang.String p0,android.webkit.GeolocationPermissions.Callback p1);
}

class WebIconDatabase {
}

class WebSettings {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object setBlockNetworkLoads(boolean p0);

}

class WebView {
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.INTERNET) WebView(android.content.Context p0,android.util.AttributeSet p1,int p2);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.INTERNET) WebView(android.content.Context p0,android.util.AttributeSet p1);
	@PolyFlow
	@RequiredPermissions(android.Manifest.permission.INTERNET) WebView(android.content.Context p0);
}


package android.widget;

class AdapterView {
	@PolyFlowSources @PolyFlowSinks Object getItemAtPosition(@FlowSinks({}) int position) @PolyFlowSources @PolyFlowSinks;
	@PolyFlow void setOnItemClickListener(AdapterView.OnItemClickListener listener) @PolyFlowSources @PolyFlowSinks;
    @PolyFlow void setOnItemSelectedListener(AdapterView.OnItemSelectedListener listener) @PolyFlowSources @PolyFlowSinks;
}

class ArrayAdapter<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
}

class EditText {
	@PolyFlowSources @PolyFlowSinks Editable getText() @PolyFlowSources @PolyFlowSinks;
	void setSelection(@PolyFlowSources @PolyFlowSinks int index) @PolyFlowSources @PolyFlowSinks;
	void setText(@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.DISPLAY) CharSequence text);
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class ImageView {
	void setImageBitmap(@PolyFlowSources @PolyFlowSinks Bitmap bm) @PolyFlowSources @PolyFlowSinks;
	void setImageDrawable(@PolyFlowSources @PolyFlowSinks Drawable drawable) @PolyFlowSources @PolyFlowSinks;
	void setImageResource(@PolyFlowSources @FlowSinks(FlowSink.DISPLAY) int i) @PolyFlowSources @PolyFlowSinks;
}
	
class QuickContactBadge {
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object assignContactFromEmail(java.lang.String p0,boolean p1);
	@RequiredPermissions(android.Manifest.permission.READ_CONTACTS) Object assignContactFromPhone(java.lang.String p0,boolean p1);

}

class RadioGroup {
    @PolyFlow
    void setOnCheckedChangeListener(OnCheckedChangeListener listener);
}

class TextView {
    void append(@PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
	@PolyFlow
	ColorStateList getTextColors();
	@PolyFlow
	void setCompoundDrawablePadding(int pad);
	@PolyFlow
	void setCompoundDrawablesWithIntrinsicBounds(int left, int top, int right, int bottom);
	@PolyFlow
	void setEllipsize(TruncateAt where);
	@PolyFlow
	void setEnabled(boolean enabled);
	@PolyFlow
	void setGravity(int gravity);
	@PolyFlow
	void setPadding(int left, int top, int right, int bottom);
	@PolyFlow
	void setSelected(boolean selected);
	@PolyFlow
	void setSingleLine();
	void setText(@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.DISPLAY) CharSequence text);
	void setText(@PolyFlowSources @FlowSinks(FlowSink.DISPLAY) int resid) @PolyFlowSources @PolyFlowSinks;
	@PolyFlow
	void setTextColor(int color);
	@PolyFlow
	void setTextSize(float size);
}

class Toast {
	@PolyFlow
	void show();
	@PolyFlow
	static Toast makeText(Context context, CharSequence text, int duration);
}

class RemoteViews {
	@PolyFlow
	void setOnClickPendingIntent(int i, @FlowSources(FlowSource.ANY) PendingIntent pi);
	void setImageViewResource(@FlowSinks({}) int viewId, @PolyFlowSources @PolyFlowSinks int srcId) @PolyFlowSources @PolyFlowSinks;
	void setTextViewText(@FlowSinks({}) int viewId, @PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
	@PolyFlow
	void setViewVisibility(int viewId, int visibility);
}
	



/* JAVA PACKAGES BELOW */

package java.io;

class BufferedInputStream {
	@PolyFlowSources @PolyFlowSinks BufferedInputStream(@PolyFlowSources @PolyFlowSinks InputStream in);
	//@FlowSources({}) int read(@PolyFlowSources @PolyFlowSinks byte @PolyFlowSources @PolyFlowSinks [] buffer) @PolyFlowSources @PolyFlowSinks;
}

class BufferedReader {
	@PolyFlowSources @PolyFlowSinks BufferedReader(@PolyFlowSources @PolyFlowSinks Reader in, @PolyFlowSources @PolyFlowSinks int size);
	@PolyFlow
	void close() @FlowSources(FlowSource.ANY);
	@PolyFlowSources @PolyFlowSinks String readLine() @PolyFlowSources @PolyFlowSinks;
}

class ByteArrayInputStream {
	@PolyFlowSources @PolyFlowSinks ByteArrayInputStream(@PolyFlowSources @PolyFlowSinks byte[] buf);
}

class ByteArrayOutputStream {
	void close() @FlowSources(FlowSource.ANY); //@FlowSinks(FlowSink.FILESYSTEM) @FlowSources(FlowSource.ANY);
	@PolyFlowSources @PolyFlowSinks byte @FlowSources [] toByteArray() @PolyFlowSources @PolyFlowSinks;
	void write(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) [] buffer, int offset, int len) @PolyFlowSources @PolyFlowSinks;
}

class DataInputStream{
    @PolyFlowSources @PolyFlowSinks int read(@PolyFlowSources @PolyFlowSinks byte @PolyFlowSources @PolyFlowSinks [] buffer, @PolyFlowSources @PolyFlowSinks int offset, @PolyFlowSources @PolyFlowSinks int length) @PolyFlowSources @PolyFlowSinks;
}

class DataOutputStream {
	@PolyFlowSources @PolyFlowSinks DataOutputStream(@PolyFlowSources @PolyFlowSinks OutputStream stream) @PolyFlowSources @PolyFlowSinks;
	void close() @PolyFlowSources @PolyFlowSinks;
	void flush() @PolyFlowSources @PolyFlowSinks;
	void writeBytes(@PolyFlowSources @PolyFlowSinks String str) @PolyFlowSources @PolyFlowSinks;
	void write(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer, @PolyFlowSources @PolyFlowSinks int offset, @PolyFlowSources @PolyFlowSinks int length) @PolyFlowSources @PolyFlowSinks;
}

class File {
	@PolyFlowSources @PolyFlowSinks boolean createNewFile() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean exists() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks File(@PolyFlowSources @PolyFlowSinks String path);
	@PolyFlowSources @PolyFlowSinks File(@PolyFlowSources @PolyFlowSinks File dir, @PolyFlowSources @PolyFlowSinks String name);
	@PolyFlowSources @PolyFlowSinks String getAbsolutePath() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getPath() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean isDirectory() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean mkdirs() @PolyFlowSources @PolyFlowSinks;
	@FlowSinks(FlowSink.ANY) String separator;
	@PolyFlowSources @PolyFlowSinks boolean delete() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks File[] listFiles() @PolyFlowSources @PolyFlowSinks ;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks ;
	
}

class FileInputStream {
	void close() @PolyFlowSources @PolyFlowSinks; 
	int read(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @PolyFlowSinks;
	int read(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer, @FlowSinks() int offset, @PolyFlowSources @PolyFlowSinks int length) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks int available() @PolyFlowSources @PolyFlowSinks;
}

class FileOutputStream {
	void close() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks FileOutputStream(@PolyFlowSources @PolyFlowSinks File file);
	@PolyFlowSources @PolyFlowSinks FileOutputStream(@PolyFlowSources @PolyFlowSinks String filename);
	//void write(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @PolyFlowSinks;
	// Workaround: Require FlowSink.FILESYSTEM for every write on a FileOutputStream
    void write(@PolyFlowSources @FlowSinks(FlowSink.FILESYSTEM) byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @FlowSinks(FlowSink.FILESYSTEM);
}

class FileReader {
	@PolyFlowSources @PolyFlowSinks FileReader(@PolyFlowSources @PolyFlowSinks File file) @PolyFlowSources @PolyFlowSinks ;
}

class FileWriter {
	@PolyFlowSources @PolyFlowSinks FileWriter(@PolyFlowSources @PolyFlowSinks File file);
	void write (@PolyFlowSources @PolyFlowSinks String str) @PolyFlowSources @PolyFlowSinks ;
}

class FilterInputStream {
	int read(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] b) @PolyFlowSources @PolyFlowSinks;
}

class IOException {
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class InputStream {
	void close() @PolyFlowSources @PolyFlowSinks; 
	int read(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks int available() @PolyFlowSources @PolyFlowSinks;
}

class InputStreamReader {
	void close() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks InputStreamReader(@PolyFlowSources @PolyFlowSinks InputStream in);
	@PolyFlowSources @PolyFlowSinks InputStreamReader(@PolyFlowSources @PolyFlowSinks InputStream in, String enc);
}

class OutputStream {
	void close() @PolyFlowSources @PolyFlowSinks;
	void flush() @PolyFlowSources @PolyFlowSinks;
	void write(@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] buffer) @PolyFlowSources @PolyFlowSinks;
}

class OutputStreamWriter {
	void close() @PolyFlowSources @PolyFlowSinks;
	void flush() @PolyFlowSources @PolyFlowSinks;
}

class PrintStream {
	void println(@FlowSources(FlowSource.ANY) @FlowSinks({}) Object x);
}

class Reader {
	void close() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int read(@PolyFlowSources @PolyFlowSinks char @FlowSources({}) @FlowSinks({}) [] buf) @PolyFlowSources @PolyFlowSinks;
}

class Writer {
	void close() @PolyFlowSources @PolyFlowSinks;
	void write(@PolyFlowSources @PolyFlowSinks char @FlowSources({}) @FlowSinks({}) [] buf,
		@PolyFlowSources @PolyFlowSinks int offset,	@PolyFlowSources @PolyFlowSinks int count) @PolyFlowSources @PolyFlowSinks;
}

package java.lang;

class Character {
	static @PolyFlowSources @PolyFlowSinks char toLowerCase(@PolyFlowSources @PolyFlowSinks char c);
	static @PolyFlowSources @PolyFlowSinks char toUpperCase(@PolyFlowSources @PolyFlowSinks char c);
}
	
class Double {
    static @PolyFlowSources @PolyFlowSinks long doubleToLongBits(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks boolean isNaN(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks double parseDouble(@PolyFlowSources @PolyFlowSinks String string);
	static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks double d);
}

class CharSequence {
    @PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class Class {
	@PolyFlow
	String getName();
    @PolyFlow
    Class forName(String s1);
    @DefaultFlow
    boolean isAnnotationPresent(Class<? extends Annotation> annotationClass);
    @PolyFlow
    Constructor getConstructor(Class[] parameterTypes);
    @PolyFlow
    Method  getMethod(String name, Class[] parameterTypes);
}

class Enum {
    @PolyFlowSources @PolyFlowSinks boolean equals(@PolyFlowSources @PolyFlowSinks Object other) @PolyFlowSources @PolyFlowSinks;
}

class Float {
	static @PolyFlowSources @PolyFlowSinks int floatToIntBits(@PolyFlowSources @PolyFlowSinks float value);
}

class Integer {
	static @PolyFlowSources @PolyFlowSinks int parseInt(@PolyFlowSources @PolyFlowSinks String s);
	static @PolyFlowSources @PolyFlowSinks int parseInt(@PolyFlowSources @PolyFlowSinks String s, @FlowSinks({}) int radix);
	static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks int i);
	static @PolyFlowSources @PolyFlowSinks String toHexString(@PolyFlowSources @PolyFlowSinks int i);
}

class Long {
	static @PolyFlowSources @PolyFlowSinks long parseLong(@PolyFlowSources @PolyFlowSinks String string);
	static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks long l1);
}

class Math {
	static @PolyFlowSources @PolyFlowSinks float abs(@PolyFlowSources @PolyFlowSinks float f);
	static @PolyFlowSources @PolyFlowSinks long abs(@PolyFlowSources @PolyFlowSinks long l);
	static @PolyFlowSources @PolyFlowSinks double acos(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks double asin(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks double atan(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks double atan2(@PolyFlowSources @PolyFlowSinks double y, @PolyFlowSources @PolyFlowSinks double x);
	static @PolyFlowSources @PolyFlowSinks double log10(@PolyFlowSources @PolyFlowSinks double d);
	static @PolyFlowSources @PolyFlowSinks int min(@PolyFlowSources @PolyFlowSinks int i1, @PolyFlowSources @PolyFlowSinks int i2);
	static @PolyFlowSources @PolyFlowSinks long min(@PolyFlowSources @PolyFlowSinks long l1, @PolyFlowSources @PolyFlowSinks long l2);
	static @PolyFlowSources @PolyFlowSinks double pow(@PolyFlowSources @PolyFlowSinks double x, @PolyFlowSources @PolyFlowSinks double y);
}

	
class Object {
	@FlowSources(FlowSource.ANY) boolean equals(Object object);
	@PolyFlow
	Class getClass();
	@PolyFlowSources @PolyFlowSinks int hashCode() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}
	
class Runtime {
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String[] p0);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String[] p0,java.lang.String[] p1);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String[] p0,java.lang.String[] p1,java.io.File p2);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String p0,java.lang.String[] p1);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) Object exec(java.lang.String p0,java.lang.String[] p1,java.io.File p2);
}

class String {
	@PolyFlowSources @PolyFlowSinks char charAt(@PolyFlowSources @PolyFlowSinks int index) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks boolean contains(@PolyFlowSources @PolyFlowSinks CharSequence cs) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean equals(@PolyFlowSources @PolyFlowSinks Object object) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks boolean equalsIgnoreCase(@PolyFlowSources @PolyFlowSinks String string) @PolyFlowSources @PolyFlowSinks;
	static @PolyFlowSources @PolyFlowSinks String format(Locale l, @PolyFlowSources @PolyFlowSinks String format, @PolyFlowSources @PolyFlowSinks Object... args);
	static @PolyFlowSources @PolyFlowSinks String format(@PolyFlowSources @PolyFlowSinks String format, @PolyFlowSources @PolyFlowSinks Object... args);
	@PolyFlowSources @PolyFlowSinks byte @FlowSources({}) @FlowSinks({}) [] getBytes() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int length() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String trim() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String replace(@FlowSinks({}) char target, @PolyFlowSources @PolyFlowSinks char replacement) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String replace(@FlowSinks({}) CharSequence target,
		@PolyFlowSources @PolyFlowSinks CharSequence replacement) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String substring(@PolyFlowSources @PolyFlowSinks int start, @PolyFlowSources @PolyFlowSinks int end) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String substring(@PolyFlowSources @PolyFlowSinks int start) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
	
}

class StringBuilder {
	@PolyFlowSources @PolyFlowSinks StringBuilder append(@PolyFlowSources @PolyFlowSinks char c) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}
	
class StringBuffer {
	@PolyFlowSources @PolyFlowSinks StringBuffer append(@PolyFlowSources @PolyFlowSinks String string) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks StringBuffer append(@PolyFlowSources @PolyFlowSinks char ch) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class System {
	@FlowSources(FlowSource.TIME) long currentTimeMillis();
}

class Throwable {
	@PolyFlow
	Throwable initCause(Throwable throwable);
}

package java.net;

class DatagramSocket {
	@RequiredPermissions(android.Manifest.permission.INTERNET) DatagramSocket();
	@RequiredPermissions(android.Manifest.permission.INTERNET) DatagramSocket(int p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) DatagramSocket(int p0,java.net.InetAddress p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) DatagramSocket(java.net.SocketAddress p0);
    @RequiredPermissions(android.Manifest.permission.INTERNET)
    @PolyFlowSources @PolyFlowSinks void send(@PolyFlowSources @PolyFlowSinks DatagramPacket packet) @PolyFlowSources @PolyFlowSinks;
}

class HttpURLConnection {
	@RequiredPermissions(android.Manifest.permission.INTERNET) HttpURLConnection(java.net.URL p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object connect();

    @PolyFlow void setRequestMethod(String method);
}

class InetAddress {
    @PolyFlowSources @PolyFlowSinks InetAddress getByName(@PolyFlowSources @PolyFlowSinks String host) @PolyFlowSources @PolyFlowSinks;
}

class MulticastSocket {
	@RequiredPermissions(android.Manifest.permission.INTERNET) MulticastSocket();
	@RequiredPermissions(android.Manifest.permission.INTERNET) MulticastSocket(int p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) MulticastSocket(java.net.SocketAddress p0);
}

class NetworkInterface {
	@RequiredPermissions(android.Manifest.permission.INTERNET) NetworkInterface();
	//TODO:This is a constructor in Java 7, but not Android 
//	@RequiredPermissions(android.Manifest.permission.INTERNET) NetworkInterface(java.lang.String p0,int p1,java.net.InetAddress p2);
}

class MalformedURLException {
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}

class ServerSocket {
	@RequiredPermissions(android.Manifest.permission.INTERNET) ServerSocket();
	@RequiredPermissions(android.Manifest.permission.INTERNET) ServerSocket(int p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) ServerSocket(int p0,int p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) ServerSocket(int p0,int p1,java.net.InetAddress p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object bind(java.net.SocketAddress p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object bind(java.net.SocketAddress p0,int p1);
}

class Socket {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket();
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.lang.String p0,int p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.lang.String p0,int p1,java.net.InetAddress p2,int p3);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.lang.String p0,int p1,boolean p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.net.InetAddress p0,int p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.net.InetAddress p0,int p1,java.net.InetAddress p2,int p3);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Socket(java.net.InetAddress p0,int p1,boolean p2);
}

class URI {
	static @PolyFlowSources @PolyFlowSinks URI create(@PolyFlowSources @PolyFlowSinks String uri);
	@PolyFlowSources @PolyFlowSinks String getScheme() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getPort() @PolyFlowSources @PolyFlowSinks;
}

class URL {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object getContent(java.lang.Class[] p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object getContent();
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object openConnection(java.net.Proxy p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET)
	@PolyFlowSources @PolyFlowSinks URLConnection openConnection() @PolyFlowSources @PolyFlowSinks;
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object openStream();
	@PolyFlowSources @PolyFlowSinks String toExternalForm() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks URI toURI() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getHost()@PolyFlowSources @PolyFlowSinks ;
	@PolyFlowSources @PolyFlowSinks String getFile()@PolyFlowSources @PolyFlowSinks ;
	@PolyFlowSources @PolyFlowSinks String getProtocol()@PolyFlowSources @PolyFlowSinks ;
	@PolyFlowSources @PolyFlowSinks int getPort()@PolyFlowSources @PolyFlowSinks ;
}

class URLConnection {
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object connect();
	@FlowSources({FlowSource.NETWORK}) @PolyFlowSinks InputStream getInputStream() @PolyFlowSinks;
	@FlowSinks({FlowSink.NETWORK}) @PolyFlowSources OutputStream getOutputStream() @PolyFlowSources;

	// I'm not sure if these actually leak information, but just to be safe...
	void setDoInput(@FlowSinks({FlowSink.NETWORK}) boolean doInput);
	void setDoOutput(@FlowSinks({FlowSink.NETWORK}) boolean doOutput);

	// These definitely leak information to the remote server.
	void setUseCaches(@FlowSinks({FlowSink.NETWORK}) boolean useCaches);
	void setRequestProperty(@FlowSinks({FlowSink.NETWORK}) String property, @FlowSinks({FlowSink.NETWORK}) String value);
}

package java.security;

class MessageDigest {
	@PolyFlow
	static MessageDigest getInstance(String algorithm);
	void update(@PolyFlowSources @PolyFlowSinks byte[] input) @PolyFlowSources @PolyFlowSinks;
}

package java.sql;

class Time {
	@PolyFlowSources @PolyFlowSinks Time(@PolyFlowSources @PolyFlowSinks long theTime); 
}

package java.text;

class DecimalFormat {
    @PolyFlow
    void setMaximumIntegerDigits(int value);
    @PolyFlowSources @PolyFlowSinks String format(@PolyFlowSources @PolyFlowSinks double value);
}

class NumberFormat {
    @PolyFlowSources @PolyFlowSinks String format(@PolyFlowSources @PolyFlowSinks double value);
}

package java.util;

class Arrays{
    @PolyFlowSources @PolyFlowSinks List<T> asList (T... array) @PolyFlowSources @PolyFlowSinks;
}

class ArrayList<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	@PolyFlowSources @PolyFlowSinks T get(int index) @PolyFlowSources @PolyFlowSinks;
}

class Calendar {
	@PolyFlowSources @PolyFlowSinks boolean after(@PolyFlowSources @PolyFlowSinks Object calendar) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks Calendar getInstance() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks Calendar getInstance(@FlowSinks({}) TimeZone timezone) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int get(@FlowSinks({}) int field) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks Date getTime() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks long getTimeInMillis() @PolyFlowSources @PolyFlowSinks;
	void set(int field, @PolyFlowSources @PolyFlowSinks int value) @PolyFlowSources @PolyFlowSinks;
	void setTime(@PolyFlowSources @PolyFlowSinks Date date) @PolyFlowSources @PolyFlowSinks;
	void setTimeInMillis(@PolyFlowSources @PolyFlowSinks long milliseconds) @PolyFlowSources @PolyFlowSinks;
}

class Collection {
	@PolyFlow boolean isEmpty();
}
	
class Collections {
	<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> void sort(@FlowSinks({}) List<T> list, @FlowSinks({}) Comparator<? super T> comparator);
	//Unsure:
	static @PolyFlowSources @PolyFlowSinks Map<K,V> synchronizedMap(@PolyFlowSources @PolyFlowSinks Map<K,V> map); 
}
	
interface Comparator<T extends @FlowSources(FlowSource.ANY) Object> {
	@PolyFlowSources @PolyFlowSinks int compare(@PolyFlowSources @PolyFlowSinks T lhs, @PolyFlowSources @PolyFlowSinks T rhs);
}
	
class Date {
	@FlowSources(FlowSource.TIME) Date();
	@PolyFlowSources @PolyFlowSinks long getTime() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String toString() @PolyFlowSources @PolyFlowSinks;
}
@FlowSources(FlowSource.TIME) 
class GregorianCalendar {
    @FlowSources(FlowSource.TIME) GregorianCalendar();
}

class HashMap<K extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object,
	V extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	@PolyFlowSources @PolyFlowSinks V get(@PolyFlowSources @PolyFlowSinks Object key) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String put(@PolyFlowSources @PolyFlowSinks K key, @PolyFlowSources @PolyFlowSinks V value) @PolyFlowSources @PolyFlowSinks;
	@PolyFlow
	int size();
}

class LinkedList<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	
}

class List<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
//	@PolyFlow boolean add(T object) @FlowSources(FlowSource.ANY);
    T get(@FlowSinks({}) int index);
	@PolyFlow int size() @FlowSources(FlowSource.ANY);
	//How to annotate this: Object[] toArray();
}

class Map<K extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object,
	V extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	@FlowSinks({}) @FlowSources(FlowSource.ANY) boolean containsKey(
		@FlowSinks({}) @FlowSources(FlowSource.ANY) Object key);
	V get(@FlowSinks({}) @FlowSources(FlowSource.ANY) Object key);
	V put(K key, V value);
}

class Queue<T extends @FlowSinks({}) @FlowSources(FlowSource.ANY) Object> {
	T peek();
	T poll();
}

class Random {
    @FlowSources(FlowSource.RANDOM) protected int next(@FlowSinks(FlowSink.RANDOM) int bits);
    @FlowSources(FlowSource.RANDOM) boolean nextBoolean();
    void nextBytes(byte @FlowSources(FlowSource.RANDOM) @FlowSinks({}) [] bytes);
    @FlowSources(FlowSource.RANDOM) double nextDouble();
    @FlowSources(FlowSource.RANDOM) float nextFloat();
    @FlowSources(FlowSource.RANDOM) double nextGaussian();
    @FlowSources(FlowSource.RANDOM) int nextInt();
    @FlowSources(FlowSource.RANDOM) int nextInt(@FlowSinks(FlowSink.RANDOM)  int n);
    @FlowSources(FlowSource.RANDOM) long nextLong();
    void setSeed(@FlowSinks(FlowSink.RANDOM) long seed);
}

class Scanner {
	@PolyFlowSources @PolyFlowSinks Scanner (@PolyFlowSources @PolyFlowSinks Readable src);
	boolean hasNext() @FlowSources(FlowSource.ANY);
}

package java.util.concurrent;

//class TimeUnit {
//	@PolyFlowSources @PolyFlowSinks long toHours(@PolyFlowSources @PolyFlowSinks long duration);
//	@PolyFlowSources @PolyFlowSinks long toMinutes(@PolyFlowSources @PolyFlowSinks long duration);
//	@PolyFlowSources @PolyFlowSinks long toSeconds(@PolyFlowSources @PolyFlowSinks long duration);
//}

package java.util.regex;

class Matcher {
	@PolyFlowSources @PolyFlowSinks boolean find() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String group(int group) @PolyFlowSources @PolyFlowSinks;
}

class Pattern {
	static @PolyFlowSources @PolyFlowSinks Pattern compile(@PolyFlowSources @PolyFlowSinks String str, @FlowSinks({}) int i);
	@PolyFlowSources @PolyFlowSinks Matcher matcher(@PolyFlowSources @PolyFlowSinks CharSequence input) @PolyFlowSources @PolyFlowSinks;
}

/* Android HTTP components */

package org.apache.http;

class HttpEntity {
	@PolyFlowSources @PolyFlowSinks InputStream getContent() @PolyFlowSources @PolyFlowSinks;
}
	
class HttpResponse {
	@PolyFlowSources @PolyFlowSinks HttpEntity getEntity() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks StatusLine getStatusLine() @PolyFlowSources @PolyFlowSinks;
}

class StatusLine {
	@PolyFlowSources @PolyFlowSinks String getReasonPhrase() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getStatusCode() @PolyFlowSources @PolyFlowSinks;
}

package org.apache.http.auth;

class UsernamePasswordCredentials {
	@PolyFlowSources @PolyFlowSinks UsernamePasswordCredentials(@PolyFlowSources @PolyFlowSinks String username, @PolyFlowSources @PolyFlowSinks String password);
}

package org.apache.http.client;

class HttpClient {
	@FlowSources(FlowSource.NETWORK) HttpResponse execute(@FlowSources(FlowSource.ANY) @FlowSinks(FlowSink.NETWORK) HttpUriRequest request);
}
	
package org.apache.http.client.methods;

class HttpEntityEnclosingRequestBase {
	void setEntity(@PolyFlowSources @PolyFlowSinks HttpEntity entity) @PolyFlowSources @PolyFlowSinks;
}

class HttpGet {
    @FlowSinks(FlowSink.NETWORK) HttpGet(@FlowSinks(FlowSink.NETWORK) String uri);
    @FlowSinks(FlowSink.NETWORK) HttpGet(@FlowSinks(FlowSink.NETWORK) URI uri);
}

class HttpPost {
	void addHeader(@PolyFlowSources @PolyFlowSinks String name, @PolyFlowSources @PolyFlowSinks String value) @PolyFlowSources @PolyFlowSinks;
    @PolyFlowSources @PolyFlowSinks HttpPost(@PolyFlowSources @PolyFlowSinks String uri);
    @PolyFlowSources @PolyFlowSinks HttpPost(@PolyFlowSources @PolyFlowSinks URI uri);
    void setEntity(@PolyFlowSources @FlowSinks(FlowSink.NETWORK) HttpEntity entity) @PolyFlowSources @FlowSinks(FlowSink.NETWORK);
}

package org.apache.http.entity;

class BufferedHttpEntity {
	@PolyFlowSources @PolyFlowSinks BufferedHttpEntity(@PolyFlowSources @PolyFlowSinks HttpEntity entity);
	@PolyFlowSources @PolyFlowSinks InputStream getContent() @PolyFlowSources @PolyFlowSinks;
}

class FileEntity {
	@PolyFlowSources @PolyFlowSinks FileEntity(@PolyFlowSources @PolyFlowSinks File file, @PolyFlowSources @PolyFlowSinks String contentType);
	void setContentType(@PolyFlowSources @PolyFlowSinks String ctString) @PolyFlowSources @PolyFlowSinks;
}


package org.apache.http.impl.client;

class AbstractHttpClient {
	@FlowSources(FlowSource.NETWORK) HttpResponse execute(@FlowSinks(FlowSink.NETWORK) HttpUriRequest request);
	@PolyFlowSources @PolyFlowSinks HttpParams getParams() @PolyFlowSources @PolyFlowSinks;
}

class DefaultHttpClient {
	@RequiredPermissions(android.Manifest.permission.INTERNET) DefaultHttpClient();
	@RequiredPermissions(android.Manifest.permission.INTERNET) DefaultHttpClient(org.apache.http.params.HttpParams p0);
	@RequiredPermissions(android.Manifest.permission.INTERNET) DefaultHttpClient(org.apache.http.conn.ClientConnectionManager p0,org.apache.http.params.HttpParams p1);
	@FlowSources(FlowSource.NETWORK) HttpResponse execute(@FlowSinks(FlowSink.NETWORK) HttpUriRequest request);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1,org.apache.http.protocol.HttpContext p2);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.protocol.HttpContext p1);
	@RequiredPermissions(android.Manifest.permission.INTERNET) Object execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1);

}



package org.apache.http.message;

class AbstractHttpMessage {
	void addHeader(@PolyFlowSources @PolyFlowSinks String name, @PolyFlowSources @PolyFlowSinks String value) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks HttpParams getParams() @PolyFlowSources @PolyFlowSinks;
}

package org.apache.http.params;

class HttpParams {
	@PolyFlowSources @PolyFlowSinks HttpParams setParameter(String name, @PolyFlowSources @PolyFlowSinks Object value) @PolyFlowSources @PolyFlowSinks; 
}

class HttpProtocolParams {
	void setUseExpectContinue(@PolyFlowSources @PolyFlowSinks HttpParams params, boolean b) @PolyFlowSources @PolyFlowSinks;
}

package org.apache.http.util;

class EntityUtils {
    static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks HttpEntity entity);
}

package org.xmlpull.v1;

class XmlPullParser {
	@PolyFlowSources @PolyFlowSinks int getAttributeCount() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getAttributeName(int index) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getAttributeValue(int index) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int getEventType() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks String getName() @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks int next() @PolyFlowSources @PolyFlowSinks;
	void setInput(@PolyFlowSources @PolyFlowSinks InputStream inputStream, String inputEncoding) @PolyFlowSources @PolyFlowSinks;
}

class XmlSerializer {
	@PolyFlowSources @PolyFlowSinks XmlSerializer endTag(@PolyFlowSources @PolyFlowSinks String nameSpace, @PolyFlowSources @PolyFlowSinks String name) @PolyFlowSources @PolyFlowSinks;
	void setOutput(@PolyFlowSources @PolyFlowSinks Writer writer) @PolyFlowSources @PolyFlowSinks;
	void startDocument(String encoding, Boolean standalone) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks XmlSerializer startTag(@PolyFlowSources @PolyFlowSinks String namespace, @PolyFlowSources @PolyFlowSinks String name) @PolyFlowSources @PolyFlowSinks;
	@PolyFlowSources @PolyFlowSinks XmlSerializer text(@PolyFlowSources @PolyFlowSinks String text) @PolyFlowSources @PolyFlowSinks;
}

/* FROM EXTERNAL JARS */

//package uk.me.jstott.coordconv;
//
//class LatitudeLongitude {
//	void setLatitude(@PolyFlowSources @PolyFlowSinks double latitude) @PolyFlowSources @PolyFlowSinks;
//	void setLongitude(@PolyFlowSources @PolyFlowSinks double longitude) @PolyFlowSources @PolyFlowSinks;
//}
//
//package com.commonsware.cwac.bus; //A library of Wordpress
//
//class SimpleBus {
//	@PolyFlowSources @PolyFlowSinks Bundle createMessage(@PolyFlowSources @PolyFlowSinks String key);
//}
//
//package com.commonsware.cwac.task; //A library of Wordpress
//
//class AsyncTaskEx {
//	Result doInBackground(@FlowSinks(FlowSink.FILESYSTEM) Params... params);
//}
