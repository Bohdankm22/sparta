import sparta.checkers.quals.*;
import checkers.quals.PolyAll;

/* Notes on adding to the file: Packages are arranged by source (android, java, etc) and then alphabetically.
   Classes within a package are also arranged alphabetically, as are the methods. */

// NOTE: The Checkers don't complain about typos in class and method names,
// such mistakes are simply ignored.

// NOTE: Annotation attributes have to be fully qualified. E.g. write
//   @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY)
// and not
//   @FlowSources(FlowSource.ANY)

// TODO: implement new receiver syntax in StubParser, e.g.
//   double getLatitude(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Location this);
//   double getLongitude(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Location this);

/* ANDROID PACKAGES BELOW */

package android.app;

	class AlertDialog$Builder {
		@PolyFlowSources @PolyFlowSinks Builder setMessage(@PolyFlowSources @PolyFlowSinks CharSequence message);
	}
	
package android.content;
	
	class ContentValues {
		void put(String key, @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) @FlowSinks Double value);
		void put(String key, @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) @FlowSinks Integer value);
		void put(String key, @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) @FlowSinks Long value);
		void put(String key, @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) @FlowSinks String value);
		//TODO: Add the rest of the put methods
	}
	
	class Context {
		//@PolyFlowSources @PolyFlowSinks ContentResolver getContentResolver() @PolyFlowSources @PolyFlowSinks;
		@FlowSinks(sparta.checkers.quals.FlowSinks.FlowSink.FILESYSTEM) File getDir(@FlowSinks(sparta.checkers.quals.FlowSinks.FlowSink.FILESYSTEM) String name, int mode);
	}
	
	
	class Intent {
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Intent setData(
			@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Uri data) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		//Should that be polymorphic?
	}

package android.database;

	class Cursor {
		 @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) @FlowSinks double getDouble(int columnIndex);
		 //TODO: Add the rest of the get methods
		 //Note: Must manually cast the results from the cursor if the cursor comes from Context.getContentResolver()
	}

package android.graphics;

	class Bitmap {
		boolean compress(CompressFormat format, int quality, @PolyFlowSinks @PolyFlowSources OutputStream stream) @PolyFlowSinks @PolyFlowSources;
	}
	
	class BitmapFactory {
		@PolyFlowSources @PolyFlowSinks Bitmap decodeByteArray(@PolyFlowSources @PolyFlowSinks byte[] data, int offset, int length);
	}
	
package android.hardware;

	class Camera {
		void takePicture(ShutterCallback shutter, @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.CAMERA) PictureCallback raw, 
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.CAMERA) PictureCallback jpeg);
	}

	interface Camera$PictureCallback {
		void onPictureTaken(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.CAMERA) byte[] data, Camera camera);
	}
	
package android.location;

	class Address {
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) String getAdminArea() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) String getCountryName() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) String getFeatureName() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) double getLatitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) String getLocality() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) double getLongitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) String getPostalCode() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) boolean hasLatitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) boolean hasLongitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
	}
	
	class Geocoder {
		List<@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Address> 
			getFromLocation(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) double latitude, 
			@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) double longitude, int maxResults);
			
		List<@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Address> 
		    getFromLocationName(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) String locationName, int maxResults);
	}
	
	class Location {
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) float bearingTo(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Location dest) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) int describeContents() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) float distanceTo(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Location dest) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		void dump(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Printer pw, String prefix) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) float getAccuracy() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) double getAltitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) float getBearing() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Bundle getExtras() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) double getLatitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) double getLongitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) String getProvider() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) float getSpeed() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.TIME) long getTime() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) boolean hasAccuracy() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) boolean hasAltitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) boolean hasBearing() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) boolean hasSpeed() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		
		void removeAccuracy() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		void removeAltitude() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		void removeBearing() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		void removeSpeed() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		void reset() @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		
		void set(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Location l) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION);
		void setAccuracy(@PolyFlowSources @PolyFlowsinks float accuracy) @PolyFlowSources @PolyFlowSinks;
		
	}
	
	interface LocationListener {
		void onLocationChanged(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Location location);
	}
	
	class LocationManager {
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.LOCATION) Location getLastKnownLocation(String provider);
	}
	
package android.net;

	class Uri {
		List<@PolyFlowSources @PolyFlowSinks String> getPathSegments() @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks Uri parse(@PolyFlowSources @PolyFlowSinks String uriString);
	}

package android.os;

	class Bundle {
		void putDouble(String key, @PolyFlowSources @PolyFlowSinks double value) @PolyFlowSources @PolyFlowSinks;
	}
	
	class Parcel {
		void writeString(@PolyFlowSources @PolyFlowSinks String val) @PolyFlowSources @PolyFlowSinks;
	}
	
package android.preference;

	class EditTextPreference {
		void setText(@PolyFlowSources @PolyFlowSinks String text) @PolyFlowSources @PolyFlowSinks;
	}
	
package android.telephony;

	class TelephonyManager {
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.IMEI) String getDeviceId();
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.PHONE_NUMBER) String getLine1Number();
	}

package android.text;
	
	class TextUtils {
		@PolyFlowSources @PolyFlowSinks boolean isEmpty(@PolyFlowSources @PolyFlowSinks CharSequence str);
	}

package android.text.format;

	class Time {
		//TODO: This should probably be double checked later:
		boolean parse3339(@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) String s);
	}
	
package android.util;

	class FloatMath {
		static @PolyFlowSources @PolyFlowSinks float ceil(@PolyFlowSources @PolyFlowSinks float value);
		static @PolyFlowSources @PolyFlowSinks float cos(@PolyFlowSources @PolyFlowSinks float angle);
		static @PolyFlowSources @PolyFlowSinks float floor(@PolyFlowSources @PolyFlowSinks float value);
		static @PolyFlowSources @PolyFlowSinks float sin(@PolyFlowSources @PolyFlowSinks float angle);
		static @PolyFlowSources @PolyFlowSinks float sqrt(@PolyFlowSources @PolyFlowSinks float value);
	}
	
	class Log {
		int d(String tag, @PolyFlowSources @PolyFlowSinks String msg);
	}
	
package android.widget;

	class ImageView {
		void setImageBitmap(@PolyFlowSources @PolyFlowSinks Bitmap bm) @PolyFlowSources @PolyFlowSinks;
	}
	
	class TextView {
		void setText(@PolyFlowSources @PolyFlowSinks CharSequence text) @PolyFlowSources @PolyFlowSinks;
	}






/* OTHER ANDROID PACKAGES */

package org.apache.http;

	class HttpEntity {
		@PolyFlowSources @PolyFlowSinks InputStream getContent() @PolyFlowSources @PolyFlowSinks;
	}
	
	class HttpResponse {
		@PolyFlowSources @PolyFlowSinks HttpEntity getEntity() @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks StatusLine getStatusLine() @PolyFlowSources @PolyFlowSinks;
	}
	
package org.apache.http.client;

	class HttpClient {
		@PolyFlowSources HttpResponse execute(@FlowSinks(sparta.checkers.quals.FlowSinks.FlowSink.NETWORK) @PolyFlowSources HttpUriRequest request);
	}
	
package org.apache.http.client.methods;

	class HttpGet {
	    HttpGet(@PolyFlowSinks @PolyFlowSources String uri) @PolyFlowSinks @PolyFlowSources;
	}

	class HttpPost {
	    HttpPost(@FlowSinks(sparta.checkers.quals.FlowSinks.FlowSink.NETWORK) String uri);
	}

package org.apache.http.entity.mime.content;

	class StringBody {
		StringBody(@FlowSinks(sparta.checkers.quals.FlowSinks.FlowSink.NETWORK) String str);
	}







/* JAVA PACKAGES BELOW */

package java.io;

	class ByteArrayOutputStream {
		void close() @FlowSinks(sparta.checkers.quals.FlowSinks.FlowSink.FILESYSTEM) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY);
		@PolyFlowSources @PolyFlowSinks byte[] toByteArray() @PolyFlowSources @PolyFlowSinks;
	}
	
	class File {
		@PolyFlowSources @PolyFlowSinks boolean createNewFile() @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks File(@PolyFlowSources @PolyFlowSinks String path);
		@FlowSinks(sparta.checkers.quals.FlowSinks.FlowSink.ANY) String separator;
	}
	
	class FileOutputStream {
		void close() @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks FileOutputStream(@PolyFlowSources @PolyFlowSinks File file);
		void write(@PolyFlowSources @PolyFlowSinks byte[] buffer) @PolyFlowSources @PolyFlowSinks;
	}
	
	class InputStreamReader {
		@PolyFlowSources @PolyFlowSinks InputStreamReader(@PolyFlowSources @PolyFlowSinks InputStream in);
	}
	
package java.lang;
	
	class Double {
		static @PolyFlowSources @PolyFlowSinks boolean isNaN(@PolyFlowSources @PolyFlowSinks double d);
		static @PolyFlowSources @PolyFlowSinks String toString(@PolyFlowSources @PolyFlowSinks double d);
	}
	
	class Float {
		static @PolyFlowSources @PolyFlowSinks int floatToIntBits(@PolyFlowSources @PolyFlowSinks float value);
	}
	
	class Long {
		static @PolyFlowSources @PolyFlowSinks long parseLong(@PolyFlowSources @PolyFlowSinks String string);
	}

	class Math {
		static @PolyFlowSources @PolyFlowSinks float abs(@PolyFlowSources @PolyFlowSinks float f);
		static @PolyFlowSources @PolyFlowSinks double acos(@PolyFlowSources @PolyFlowSinks double d);
		static @PolyFlowSources @PolyFlowSinks double asin(@PolyFlowSources @PolyFlowSinks double d);
		static @PolyFlowSources @PolyFlowSinks double atan(@PolyFlowSources @PolyFlowSinks double d);
		static @PolyFlowSources @PolyFlowSinks double atan2(@PolyFlowSources @PolyFlowSinks double y, @PolyFlowSources @PolyFlowSinks double x);
		static @PolyFlowSources @PolyFlowSinks double log10(@PolyFlowSources @PolyFlowSinks double d);
		static @PolyFlowSources @PolyFlowSinks double pow(@PolyFlowSources @PolyFlowSinks double x, @PolyFlowSources @PolyFlowSinks double y);
	}
	
	class Object {
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) boolean equals(Object object);
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) int hashCode();
		@FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) String toString();
	}
	
	class String {
		static @PolyFlowSources @PolyFlowSinks String format(Locale l, @PolyFlowSources @PolyFlowSinks String format, @PolyFlowSources @PolyFlowSinks Object... args);
		static @PolyFlowSources @PolyFlowSinks String format(@PolyFlowSources @PolyFlowSinks String format, @PolyFlowSources @PolyFlowSinks Object... args);
	}
	
	class StringBuffer {
		@PolyFlowSources @PolyFlowSinks StringBuffer append(@PolyFlowSources @PolyFlowSinks String string) @PolyFlowSources @PolyFlowSinks;
	}
	
package java.sql;

	class Time {
		@PolyFlowSources @PolyFlowSinks Time(@PolyFlowSources @PolyFlowSinks long theTime); 
	}
	
package java.util;

	class Calendar {
		@PolyFlowSources @PolyFlowSinks boolean after(@PolyFlowSources @PolyFlowSinks Object calendar) @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks Calendar getInstance() @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks Calendar getInstance(TimeZone timezone) @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks int get(int field) @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks Date getTime() @PolyFlowSources @PolyFlowSinks;
		@PolyFlowSources @PolyFlowSinks long getTimeInMillis() @PolyFlowSources @PolyFlowSinks;
		void set(int field, @PolyFlowSources @PolyFlowSinks int value) @PolyFlowSources @PolyFlowSinks;
		void setTime(@PolyFlowSources @PolyFlowSinks Date date) @PolyFlowSources @PolyFlowSinks;
		void setTimeInMillis(@PolyFlowSources @PolyFlowSinks long milliseconds) @PolyFlowSources @PolyFlowSinks;
	}
	
	class Collections {
		<T extends @FlowSinks({}) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) Object> void sort(List<T> list, Comparator<? super T> comparator);
	}
	
	interface Comparator<T extends @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) Object> {
		@PolyFlowSources @PolyFlowSinks int compare(@PolyFlowSources @PolyFlowSinks T lhs, @PolyFlowSources @PolyFlowSinks T rhs);
	}
	
	class Date {
		@PolyFlowSources @PolyFlowSinks long getTime() @PolyFlowSources @PolyFlowSinks;
	}
	
	class List<T extends @FlowSinks({}) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) Object> {
		@PolyFlowSources @PolyFlowSinks T get(int index) @PolyFlowSources @PolyFlowSinks;
		boolean add(@PolyFlowSources @PolyFlowSinks T object) @PolyFlowSources @PolyFlowSinks;
	}
	
	class ArrayList<T extends @FlowSinks({}) @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.ANY) Object> extends List<T> {
		@PolyFlowSources @PolyFlowSinks T get(int index) @PolyFlowSources @PolyFlowSinks;
	}
	// Maybe add Map here later?
	
package java.util.concurrent;

	class TimeUnit {
		@PolyFlowSources @PolyFlowSinks long toHours(@PolyFlowSources @PolyFlowSinks long duration);
		@PolyFlowSources @PolyFlowSinks long toMinutes(@PolyFlowSources @PolyFlowSinks long duration);
		@PolyFlowSources @PolyFlowSinks long toSeconds(@PolyFlowSources @PolyFlowSinks long duration);
	}

	
/* FROM EXTERNAL JARS */
	
	
package uk.me.jstott.coordconv;

	class LatitudeLongitude {
		void setLatitude(@PolyFlowSources @PolyFlowSinks double latitude) @PolyFlowSources @PolyFlowSinks;
		void setLongitude(@PolyFlowSources @PolyFlowSinks double longitude) @PolyFlowSources @PolyFlowSinks;
	}