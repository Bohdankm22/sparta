import sparta.checkers.quals.*;
package android.accessibilityservice;

class AccessibilityService {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

package android.accounts;

class AbstractAccountAuthenticator {
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public checkBinderPermission();
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public confirmCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public editProperties(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAuthToken(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public hasFeatures(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public updateCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public addAccount(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,android.os.Bundle p4);
}

class AbstractAccountAuthenticator$Transport {
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public addAccount(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,android.os.Bundle p4);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public confirmCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public editProperties(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAuthToken(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public hasFeatures(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public updateCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
}

class AccountAuthenticatorActivity {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class AccountManager {
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public addAccount(java.lang.String p0,java.lang.String p1,java.lang.String [] p2,android.os.Bundle p3,android.app.Activity p4,android.accounts.AccountManagerCallback p5,android.os.Handler p6);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public addAccountExplicitly(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener p0,android.os.Handler p1,boolean p2);
	@RequiredPermissions({android.Manifest.permission.USE_CREDENTIALS}) public blockingGetAuthToken(android.accounts.Account p0,java.lang.String p1,boolean p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public clearPassword(android.accounts.Account p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public confirmCredentials(android.accounts.Account p0,android.os.Bundle p1,android.app.Activity p2,android.accounts.AccountManagerCallback p3,android.os.Handler p4);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public editProperties(java.lang.String p0,android.app.Activity p1,android.accounts.AccountManagerCallback p2,android.os.Handler p3);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public getAccounts();
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public getAccountsByType(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public getAccountsByTypeAndFeatures(java.lang.String p0,java.lang.String [] p1,android.accounts.AccountManagerCallback p2,android.os.Handler p3);
	@RequiredPermissions({android.Manifest.permission.USE_CREDENTIALS}) public getAuthToken(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,android.app.Activity p3,android.accounts.AccountManagerCallback p4,android.os.Handler p5);
	@RequiredPermissions({android.Manifest.permission.USE_CREDENTIALS}) public getAuthToken(android.accounts.Account p0,java.lang.String p1,boolean p2,android.accounts.AccountManagerCallback p3,android.os.Handler p4);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public getAuthTokenByFeatures(java.lang.String p0,java.lang.String p1,java.lang.String [] p2,android.app.Activity p3,android.os.Bundle p4,android.os.Bundle p5,android.accounts.AccountManagerCallback p6,android.os.Handler p7);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public getPassword(android.accounts.Account p0);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public getUserData(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public hasFeatures(android.accounts.Account p0,java.lang.String [] p1,android.accounts.AccountManagerCallback p2,android.os.Handler p3);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS, android.Manifest.permission.USE_CREDENTIALS}) public invalidateAuthToken(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public peekAuthToken(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public removeAccount(android.accounts.Account p0,android.accounts.AccountManagerCallback p1,android.os.Handler p2);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setAuthToken(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setPassword(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setUserData(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public updateCredentials(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,android.app.Activity p3,android.accounts.AccountManagerCallback p4,android.os.Handler p5);
}

class AccountManager$AmsTask {
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS, android.Manifest.permission.MANAGE_ACCOUNTS}) public doWork();
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS, android.Manifest.permission.MANAGE_ACCOUNTS}) public start();
}

class AccountManager$GetAuthTokenByTypeAndFeaturesTask {
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS, android.Manifest.permission.MANAGE_ACCOUNTS}) public doWork();
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS, android.Manifest.permission.MANAGE_ACCOUNTS}) public start();
}

class AccountManagerService {
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public addAccount(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public addAcount(android.accounts.IAccountManagerResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,boolean p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public checkAuthenticateAccountsPermission(android.accounts.Account p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public checkManageAccountsOrUseCredentialsPermissions();
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public checkManageAccountsPermission();
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public checkReadAccountsPermission();
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public clearPassword(android.accounts.Account p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public confirmCredentials(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,android.os.Bundle p2,boolean p3);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public editProperties(android.accounts.IAccountManagerResponse p0,java.lang.String p1,boolean p2);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public getAccounts(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public getAccountsByFeatures(android.accounts.IAccountManagerResponse p0,java.lang.String p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.USE_CREDENTIALS}) public getAuthToken(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String p2,boolean p3,boolean p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public getPassword(android.accounts.Account p0);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public getUserData(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public hasFeatures(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS, android.Manifest.permission.USE_CREDENTIALS}) public invalidateAuthToken(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public peekAuthToken(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public removeAccount(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setAuthToken(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setPassword(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setUserData(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public updateCredentials(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String p2,boolean p3,android.os.Bundle p4);
}

class AccountManagerService$SimWatcher {
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public onReceive(android.content.Context p0,android.content.Intent p1);
}

class GrantCredentialsPermissionActivity {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class IAccountAuthenticator$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public addAccount(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,android.os.Bundle p4);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public confirmCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public editProperties(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAuthToken(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public hasFeatures(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.ACCOUNT_MANAGER}) public updateCredentials(android.accounts.IAccountAuthenticatorResponse p0,android.accounts.Account p1,java.lang.String p2,android.os.Bundle p3);
}

class IAccountManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public addAccount(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public addAcount(android.accounts.IAccountManagerResponse p0,java.lang.String p1,java.lang.String p2,java.lang.String [] p3,boolean p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public clearPassword(android.accounts.Account p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public confirmCredentials(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,android.os.Bundle p2,boolean p3);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public editProperties(android.accounts.IAccountManagerResponse p0,java.lang.String p1,boolean p2);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public getAccounts(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public getAccountsByFeatures(android.accounts.IAccountManagerResponse p0,java.lang.String p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.USE_CREDENTIALS}) public getAuthToken(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String p2,boolean p3,boolean p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public getPassword(android.accounts.Account p0);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public getUserData(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public hasFeatures(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS, android.Manifest.permission.USE_CREDENTIALS}) public invalidateAuthToken(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public peekAuthToken(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public removeAccount(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setAuthToken(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setPassword(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.AUTHENTICATE_ACCOUNTS}) public setUserData(android.accounts.Account p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_ACCOUNTS}) public updateCredentials(android.accounts.IAccountManagerResponse p0,android.accounts.Account p1,java.lang.String p2,boolean p3,android.os.Bundle p4);
}

package android.app;

class Activity {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) public sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) public sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public setContentView(int p0);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
	@RequiredPermissions({}) public startActivity(android.content.Intent p0);
	@RequiredPermissions({}) public startActivityForResult(android.content.Intent p0,int p1);
	@RequiredPermissions({}) public startActivityFromChild(android.app.Activity p0,android.content.Intent p1,int p2);
	@RequiredPermissions({}) public startActivityIfNeeded(android.content.Intent p0,int p1);
}

class ActivityGroup {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class ActivityManager {
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_USER_DATA}) public clearApplicationUserData(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.FORCE_STOP_PACKAGES}) public forceStopPackage(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.GET_TASKS}) public getRecentTasks(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.GET_TASKS}) public getRunningTasks(int p0);
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) public killBackgroundProcesses(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) public restartPackage(java.lang.String p0);
}

class ActivityManagerNative {
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_USER_DATA}) public clearApplicationUserData(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.FORCE_STOP_PACKAGES}) public forceStopPackage(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.GET_TASKS}) public getRecentTasks(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.GET_TASKS}) public getRunningTasks(int p0);
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) public killBackgroundProcesses(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.RESTART_PACKAGES, android.Manifest.permission.KILL_BACKGROUND_PROCESSES}) public restartPackage(java.lang.String p0);
}

package android.app.admin;

class DevicePolicyManager {
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public getRemoveWarning(android.content.ComponentName p0,android.os.RemoteCallback p1);
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public reportFailedPasswordAttempt();
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public reportSuccessfulPasswordAttempt();
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public setActiveAdmin(android.content.ComponentName p0);
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public setActivePasswordState(int p0,int p1);
}

class IDevicePolicyManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public getRemoveWarning(android.content.ComponentName p0,android.os.RemoteCallback p1);
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public reportFailedPasswordAttempt();
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public reportSuccessfulPasswordAttempt();
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public setActiveAdmin(android.content.ComponentName p0);
	@RequiredPermissions({android.Manifest.permission.BIND_DEVICE_ADMIN}) public setActivePasswordState(int p0,int p1);
}

package android.app;

class AlarmManager {
	@RequiredPermissions({android.Manifest.permission.SET_TIME}) public setTime(long p0);
	@RequiredPermissions({android.Manifest.permission.SET_TIME_ZONE}) public setTimeZone(java.lang.String p0);
}

class AliasActivity {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class Application {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

package android.app.backup;

class BackupAgent {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class BackupAgentHelper {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class BackupManager {
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public beginRestoreSession();
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public dataChanged(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public requestRestore(android.app.backup.RestoreObserver p0);
}

class IBackupManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public backupNow();
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public beginRestoreSession(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public clearBackupData(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public dataChanged(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public getCurrentTransport();
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public isBackupEnabled();
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public listAllTransports();
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public selectBackupTransport(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BACKUP, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public setAutoRestore(boolean p0);
	@RequiredPermissions({android.Manifest.permission.BACKUP, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public setBackupEnabled(boolean p0);
}

package android.app;

class ContextImpl {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class ContextImpl$ApplicationContentResolver {
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public getCurrentSync();
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getMasterSyncAutomatically();
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public getSyncStatus(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public openFileDescriptor(android.net.Uri p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public openInputStream(android.net.Uri p0);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public openOutputStream(android.net.Uri p0);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public query(android.net.Uri p0,java.lang.String [] p1,java.lang.String p2,java.lang.String [] p3,java.lang.String p4);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
}

class ContextImpl$ApplicationPackageManager {
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public addPreferredActivity(IntentFilter p0,int p1,ComponentName[] p2,ComponentName p3);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_USER_DATA}) public clearApplicationUserData(String p0,IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public clearPackagePreferredActivities(String p0);
	@RequiredPermissions({android.Manifest.permission.DELETE_CACHE_FILES}) public deleteApplicationCacheFiles(String p0,IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.DELETE_PACKAGES}) public deletePackage(String p0,IPackageDeleteObserver p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_CACHE}) public freeStorage(long p0,IntentSender p1);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_CACHE}) public freeStorageAndNotify(long p0,IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.GET_PACKAGE_SIZE}) public getPackageSizeInfo(String p0,IPackageStatsObserver p1);
	@RequiredPermissions({android.Manifest.permission.INSTALL_PACKAGES}) public installPackage(Uri p0,IPackageInstallObserver p1,int p2,String p3);
	@RequiredPermissions({android.Manifest.permission.MOVE_PACKAGE}) public movePackage(String p0,IPackageMoveObserver p1,int p2);
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public replacePreferredActivity(IntentFilter p0,int p1,ComponentName[] p2,ComponentName p3);
	@RequiredPermissions({android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE}) public setApplicationEnabledSetting(String p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE}) public setComponentEnabledSetting(ComponentName p0,int p1,int p2);
}

class ExpandableListActivity {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class FullBackupAgent {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class IActivityManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BACKUP}) public bindBackupAgent(android.content.pm.ApplicationInfo p0,int p1);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_USER_DATA}) public clearApplicationUserData(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.FORCE_STOP_PACKAGES}) public forceStopPackage(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.GET_TASKS}) public getRecentTasks(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.GET_TASKS}) public getTasks(int p0,int p1,android.app.IThumbnailReceiver p2);
	@RequiredPermissions({android.Manifest.permission.KILL_BACKGROUND_PROCESSES, android.Manifest.permission.RESTART_PACKAGES}) public killBackgroundProcesses(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.REORDER_TASKS}) public moveTaskBackwards(int p0);
	@RequiredPermissions({android.Manifest.permission.REORDER_TASKS}) public moveTaskToBack(int p0);
	@RequiredPermissions({android.Manifest.permission.REORDER_TASKS}) public moveTaskToFront(int p0);
	@RequiredPermissions({android.Manifest.permission.SET_ACTIVITY_WATCHER}) public profileControl(java.lang.String p0,boolean p1,java.lang.String p2,android.os.ParcelFileDescriptor p3);
	@RequiredPermissions({android.Manifest.permission.STOP_APP_SWITCHES}) public resumeAppSwitches();
	@RequiredPermissions({android.Manifest.permission.SET_ACTIVITY_WATCHER}) public setActivityController(android.app.IActivityController p0);
	@RequiredPermissions({android.Manifest.permission.SET_ALWAYS_FINISH}) public setAlwaysFinish(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_DEBUG_APP}) public setDebugApp(java.lang.String p0,boolean p1,boolean p2);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(android.os.IBinder p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.SET_PROCESS_LIMIT}) public setProcessForeground(android.os.IBinder p0,int p1,boolean p2);
	@RequiredPermissions({android.Manifest.permission.SET_PROCESS_LIMIT}) public setProcessLimit(int p0);
	@RequiredPermissions({android.Manifest.permission.SHUTDOWN}) public shutdown(int p0);
	@RequiredPermissions({android.Manifest.permission.SIGNAL_PERSISTENT_PROCESSES}) public signalPersistentProcesses(int p0);
	@RequiredPermissions({android.Manifest.permission.STOP_APP_SWITCHES}) public stopAppSwitches();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public unbroadcastIntent(android.app.IApplicationThread p0,android.content.Intent p1);
	@RequiredPermissions({android.Manifest.permission.FORCE_BACK}) public unhandledBack(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_CONFIGURATION}) public updateConfiguration(android.content.res.Configuration p0);
}

class IAlarmManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.SET_TIME}) public setTime(long p0);
	@RequiredPermissions({android.Manifest.permission.SET_TIME_ZONE}) public setTimeZone(java.lang.String p0);
}

class Instrumentation {
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public invokeContextMenuAction(android.app.Activity p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public sendCharacterSync(int p0);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public sendKeyDownUpSync(int p0);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public sendKeySync(android.view.KeyEvent p0);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public sendPointerSync(android.view.MotionEvent p0);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public sendStringSync(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public sendTrackballEventSync(android.view.MotionEvent p0);
}

class IntentService {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class IStatusBar$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.EXPAND_STATUS_BAR}) public activate();
	@RequiredPermissions({android.Manifest.permission.STATUS_BAR}) public addIcon(java.lang.String p0,java.lang.String p1,int p2,int p3);
	@RequiredPermissions({android.Manifest.permission.EXPAND_STATUS_BAR}) public deactivate();
	@RequiredPermissions({android.Manifest.permission.STATUS_BAR}) public disable(int p0,android.os.IBinder p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.STATUS_BAR}) public removeIcon(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.EXPAND_STATUS_BAR}) public toggle();
	@RequiredPermissions({android.Manifest.permission.STATUS_BAR}) public updateIcon(android.os.IBinder p0,java.lang.String p1,java.lang.String p2,int p3,int p4);
}

class IWallpaperManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER_HINTS}) public setDimensionHints(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER_COMPONENT}) public setWallpaperComponent(android.content.ComponentName p0);
}

class KeyguardManager {
	@RequiredPermissions({android.Manifest.permission.DISABLE_KEYGUARD}) public exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult p0);
}

class KeyguardManager$KeyguardLock {
	@RequiredPermissions({android.Manifest.permission.DISABLE_KEYGUARD}) public disableKeyguard();
	@RequiredPermissions({android.Manifest.permission.DISABLE_KEYGUARD}) public reenableKeyguard();
}

class ListActivity {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class NotificationManager {
	@RequiredPermissions({android.Manifest.permission.VIBRATE}) public notify(int p0,android.app.Notification p1);
	@RequiredPermissions({android.Manifest.permission.VIBRATE}) public notify(java.lang.String p0,int p1,android.app.Notification p2);
}

class Service {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) public sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) public sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
	@RequiredPermissions({}) public startActivity(android.content.Intent p0);
	@RequiredPermissions({}) public startService(android.content.Intent p0);
}

class StatusBarManager {
	@RequiredPermissions({android.Manifest.permission.STATUS_BAR}) public addIcon(java.lang.String p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.EXPAND_STATUS_BAR}) public collapse();
	@RequiredPermissions({android.Manifest.permission.STATUS_BAR}) public disable(int p0);
	@RequiredPermissions({android.Manifest.permission.EXPAND_STATUS_BAR}) public expand();
	@RequiredPermissions({android.Manifest.permission.STATUS_BAR}) public removeIcon(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.EXPAND_STATUS_BAR}) public toggle();
	@RequiredPermissions({android.Manifest.permission.STATUS_BAR}) public updateIcon(android.os.IBinder p0,java.lang.String p1,int p2,int p3);
}

class TabActivity {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.PERSISTENT_ACTIVITY}) public setPersistent(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class WallpaperManager {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clear();
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setBitmap(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setResource(int p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setStream(java.io.InputStream p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER_HINTS}) public suggestDesiredDimensions(int p0,int p1);
}

package android.appwidget;

class AppWidgetManager {
	@RequiredPermissions({android.Manifest.permission.BIND_APPWIDGET}) public bindAppWidgetId(int p0,android.content.ComponentName p1);
}

package android.bluetooth;

class BluetoothA2dp {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public connectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public disconnectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getConnectedSinks();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getNonDisconnectedSinks();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getSinkPriority(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getSinkState(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isSinkConnected(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public resumeSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public setSinkPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public suspendSink(android.bluetooth.BluetoothDevice p0);
}

class BluetoothAdapter {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelDiscovery();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public disable();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public enable();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getAddress();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getBondedDevices();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getDiscoverableTimeout();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getName();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getScanMode();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getState();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isDiscovering();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isEnabled();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public listenUsingRfcommWithServiceRecord(java.lang.String p0,java.util.UUID p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public setDiscoverableTimeout(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public setName(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BLUETOOTH}) public setScanMode(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BLUETOOTH}) public setScanMode(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public startDiscovery();
}

class BluetoothDevice {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelBondProcess();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelPairingUserInput();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public createBond();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public createRfcommSocketToServiceRecord(java.util.UUID p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public fetchUuidsWithSdp();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getBondState();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getName();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getServiceChannel(android.os.ParcelUuid p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getUuids();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public removeBond();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPairingConfirmation(boolean p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPasskey(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPin(boolean [] p0);
}

class BluetoothHeadset {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public connectHeadset(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public disconnectHeadset();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getBatteryUsageHint();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getCurrentHeadset();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getPriority(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getState();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isConnected(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public startVoiceRecognition();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public stopVoiceRecognition();
}

class BluetoothPbap {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public disconnect();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getClient();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getState();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isConnected(android.bluetooth.BluetoothDevice p0);
}

class BluetoothSocket {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public connect();
}

class HeadsetBase {
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public acquireWakeLock();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public finalize();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public handleInput(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public releaseWakeLock();
}

class IBluetooth$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public addRfcommServiceRecord(java.lang.String p0,android.os.ParcelUuid p1,int p2,android.os.IBinder p3);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelBondProcess(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelDiscovery();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelPairingUserInput(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public createBond(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public disable(boolean p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public enable();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public fetchRemoteUuids(java.lang.String p0,android.os.ParcelUuid p1,android.bluetooth.IBluetoothCallback p2);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getAddress();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getBluetoothState();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getBondState(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getDiscoverableTimeout();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getName();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getRemoteClass(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getRemoteName(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getRemoteServiceChannel(java.lang.String p0,android.os.ParcelUuid p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getRemoteUuids(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getScanMode();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getTrustState(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isDiscovering();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isEnabled();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public listBonds();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public removeBond(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public removeServiceRecord(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public setDiscoverableTimeout(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public setName(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPairingConfirmation(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPasskey(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPin(java.lang.String p0,boolean [] p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BLUETOOTH}) public setScanMode(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setTrust(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public startDiscovery();
}

class IBluetoothA2dp$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public connectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public disconnectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getConnectedSinks();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getNonDisconnectedSinks();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getSinkPriority(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getSinkState(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public resumeSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS}) public setSinkPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public suspendSink(android.bluetooth.BluetoothDevice p0);
}

class IBluetoothHeadset$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public connectHeadset(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public disconnectHeadset();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getBatteryUsageHint();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getCurrentHeadset();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getPriority(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getState();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isConnected(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public startVoiceRecognition();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public stopVoiceRecognition();
}

class IBluetoothPbap$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public connect(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public disconnect();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getClient();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getState();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isConnected(android.bluetooth.BluetoothDevice p0);
}

class ScoSocket {
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public acquireWakeLock();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public close();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public finalize();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public releaseWakeLock();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public releaseWakeLockNow();
}

package android.content;

class ContentResolver {
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public getCurrentSync();
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getMasterSyncAutomatically();
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public getSyncStatus(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public openFileDescriptor(android.net.Uri p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public openInputStream(android.net.Uri p0);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public openOutputStream(android.net.Uri p0);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public query(android.net.Uri p0,java.lang.String [] p1,java.lang.String p2,java.lang.String [] p3,java.lang.String p4);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
}

class ContentService {
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public ContentService(android.content.Context p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@RequiredPermissions({android.Manifest.permission.DUMP}) public dump(java.io.FileDescriptor p0,java.io.PrintWriter p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public getCurrentSync();
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getMasterSyncAutomatically();
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public getSyncStatus(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.GET_ACCOUNTS}) public main(android.content.Context p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
}

class Context {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) public sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) public sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
	@RequiredPermissions({}) public startActivity(android.content.Intent p0);
	@RequiredPermissions({}) public startService(android.content.Intent p0);
}

class ContextWrapper {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) public sendBroadcast(android.content.Intent p0);
	@RequiredPermissions({}) public sendOrderedBroadcast(android.content.Intent p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
	@RequiredPermissions({}) public startActivity(android.content.Intent p0);
	@RequiredPermissions({}) public startService(android.content.Intent p0);
}

class IContentService$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public addPeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2,long p3);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public getCurrentSync();
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getIsSyncable(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getMasterSyncAutomatically();
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getPeriodicSyncs(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_SETTINGS}) public getSyncAutomatically(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public getSyncStatus(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public isSyncActive(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SYNC_STATS}) public isSyncPending(android.accounts.Account p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public removePeriodicSync(android.accounts.Account p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setIsSyncable(android.accounts.Account p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setMasterSyncAutomatically(boolean p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_SYNC_SETTINGS}) public setSyncAutomatically(android.accounts.Account p0,java.lang.String p1,boolean p2);
}

class MutableContextWrapper {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

package android.content.pm;

class IPackageManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public addPreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName [] p2,android.content.ComponentName p3);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_USER_DATA}) public clearApplicationUserData(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public clearPackagePreferredActivities(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.DELETE_CACHE_FILES}) public deleteApplicationCacheFiles(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.DELETE_PACKAGES}) public deletePackage(java.lang.String p0,android.content.pm.IPackageDeleteObserver p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_CACHE}) public freeStorage(long p0,android.content.IntentSender p1);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_CACHE}) public freeStorageAndNotify(long p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.INSTALL_PACKAGES}) public installPackage(android.net.Uri p0,android.content.pm.IPackageInstallObserver p1,int p2,java.lang.String p3);
	@RequiredPermissions({android.Manifest.permission.MOVE_PACKAGE}) public movePackage(java.lang.String p0,android.content.pm.IPackageMoveObserver p1,int p2);
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public replacePreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName [] p2,android.content.ComponentName p3);
	@RequiredPermissions({android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE}) public setApplicationEnabledSetting(java.lang.String p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE}) public setComponentEnabledSetting(android.content.ComponentName p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS}) public setInstallLocation(int p0);
	@RequiredPermissions({}) public updateExternalMediaStatus(boolean p0,boolean p1);
}

class PackageManager {
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public addPreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_USER_DATA}) public clearApplicationUserData(java.lang.String p0,IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public clearPackagePreferredActivities(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.DELETE_CACHE_FILES}) public deleteApplicationCacheFiles(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.DELETE_PACKAGES}) public deletePackage(java.lang.String p0,IPackageDeleteObserver p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_CACHE}) public freeStorage(long p0,android.content.IntentSender p1);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_CACHE}) public freeStorageAndNotify(long p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.GET_PACKAGE_SIZE}) public getPackageSizeInfo(java.lang.String p0,android.content.pm.IPackageStatsObserver p1);
	@RequiredPermissions({android.Manifest.permission.INSTALL_PACKAGES}) public installPackage(Uri p0,IPackageInstallObserver p1,int p2,java.lang.String p3);
	@RequiredPermissions({android.Manifest.permission.MOVE_PACKAGE}) public movePackage(java.lang.String p0,IPackageMoveObserver p1,int p2);
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public replacePreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	@RequiredPermissions({android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE}) public setApplicationEnabledSetting(java.lang.String p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE}) public setComponentEnabledSetting(android.content.ComponentName p0,int p1,int p2);
}

package android.app;

class ContextImpl$ApplicationPackageManager {
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public addPreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_USER_DATA}) public clearApplicationUserData(java.lang.String p0,IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public clearPackagePreferredActivities(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.DELETE_CACHE_FILES}) public deleteApplicationCacheFiles(java.lang.String p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.DELETE_PACKAGES}) public deletePackage(java.lang.String p0,IPackageDeleteObserver p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_CACHE}) public freeStorage(long p0,android.content.IntentSender p1);
	@RequiredPermissions({android.Manifest.permission.CLEAR_APP_CACHE}) public freeStorageAndNotify(long p0,android.content.pm.IPackageDataObserver p1);
	@RequiredPermissions({android.Manifest.permission.GET_PACKAGE_SIZE}) public getPackageSizeInfo(java.lang.String p0,android.content.pm.IPackageStatsObserver p1);
	@RequiredPermissions({android.Manifest.permission.INSTALL_PACKAGES}) public installPackage(Uri p0,IPackageInstallObserver p1,int p2,java.lang.String p3);
	@RequiredPermissions({android.Manifest.permission.MOVE_PACKAGE}) public movePackage(java.lang.String p0,IPackageMoveObserver p1,int p2);
	@RequiredPermissions({android.Manifest.permission.SET_PREFERRED_APPLICATIONS}) public replacePreferredActivity(android.content.IntentFilter p0,int p1,android.content.ComponentName[] p2,android.content.ComponentName p3);
	@RequiredPermissions({android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE}) public setApplicationEnabledSetting(java.lang.String p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE}) public setComponentEnabledSetting(android.content.ComponentName p0,int p1,int p2);
}

package android.hardware;

class Camera {
	@RequiredPermissions({android.Manifest.permission.CAMERA}) public native_setup(java.lang.Object p0);
	@RequiredPermissions({android.Manifest.permission.CAMERA}) public open();
}

package android.inputmethodservice;

class AbstractInputMethodService {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

package android.location;

class ILocationManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION}) public addGpsStatusListener(android.location.IGpsStatusListener p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION}) public addProximityAlert(double p0,double p1,float p2,long p3,android.app.PendingIntent p4);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public addTestProvider(java.lang.String p0,boolean p1,boolean p2,boolean p3,boolean p4,boolean p5,boolean p6,boolean p7,int p8,int p9);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public clearTestProviderEnabled(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public clearTestProviderLocation(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public clearTestProviderStatus(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getLastKnownLocation(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getProviderInfo(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getProviders(boolean p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public isProviderEnabled(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public removeTestProvider(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.INSTALL_LOCATION_PROVIDER}) public reportLocation(android.location.Location p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.ILocationListener p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public requestLocationUpdatesPI(java.lang.String p0,long p1,float p2,android.app.PendingIntent p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_LOCATION_EXTRA_COMMANDS}) public sendExtraCommand(java.lang.String p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public setTestProviderEnabled(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public setTestProviderLocation(java.lang.String p0,android.location.Location p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public setTestProviderStatus(java.lang.String p0,int p1,android.os.Bundle p2,long p3);
}

class LocationManager {
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public _requestLocationUpdates(java.lang.String p0,long p1,float p2,android.app.PendingIntent p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public _requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.LocationListener p3,android.os.Looper p4);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION}) public addGpsStatusListener(android.location.GpsStatus$Listener p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION}) public addNmeaListener(android.location.GpsStatus$NmeaListener p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION}) public addProximityAlert(double p0,double p1,float p2,long p3,android.app.PendingIntent p4);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public addTestProvider(java.lang.String p0,boolean p1,boolean p2,boolean p3,boolean p4,boolean p5,boolean p6,boolean p7,int p8,int p9);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public best(java.util.List p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public clearTestProviderEnabled(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public clearTestProviderLocation(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public clearTestProviderStatus(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getBestProvider(android.location.Criteria p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getLastKnownLocation(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getProvider(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getProviders(android.location.Criteria p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getProviders(boolean p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public isProviderEnabled(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public removeTestProvider(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public requestLocationUpdates(java.lang.String p0,long p1,float p2,android.app.PendingIntent p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.LocationListener p3,android.os.Looper p4);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public requestLocationUpdates(java.lang.String p0,long p1,float p2,android.location.LocationListener p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_LOCATION_EXTRA_COMMANDS}) public sendExtraCommand(java.lang.String p0,java.lang.String p1,android.os.Bundle p2);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public setTestProviderEnabled(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public setTestProviderLocation(java.lang.String p0,android.location.Location p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_MOCK_LOCATION}) public setTestProviderStatus(java.lang.String p0,int p1,android.os.Bundle p2,long p3);
}

package android.media;

class AsyncPlayer {
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public acquireWakeLock();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public enqueueLocked(android.media.AsyncPlayer$Command p0);
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public play(android.content.Context p0,android.net.Uri p1,boolean p2,int p3);
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public releaseWakeLock();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public stop();
}

class AudioManager {
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public isBluetoothA2dpOn();
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public isWiredHeadsetOn();
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setBluetoothScoOn(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setMicrophoneMute(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setMode(int p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setParameter(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setParameters(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setSpeakerphoneOn(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public startBluetoothSco();
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public stopBluetoothSco();
}

class AudioRecord {
	@RequiredPermissions({android.Manifest.permission.RECORD_AUDIO}) public AudioRecord(int p0,int p1,int p2,int p3,int p4);
}

class AudioService {
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setBluetoothScoOn(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setMode(int p0,android.os.IBinder p1);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setSpeakerphoneOn(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public startBluetoothSco(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public stopBluetoothSco(android.os.IBinder p0);
}

class IAudioService$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setBluetoothScoOn(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setMode(int p0,android.os.IBinder p1);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public setSpeakerphoneOn(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public startBluetoothSco(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public stopBluetoothSco(android.os.IBinder p0);
}

class MediaPlayer {
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public start();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public stayAwake(boolean p0);
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public stop();
}

class MediaRecorder {
	@RequiredPermissions({android.Manifest.permission.RECORD_AUDIO}) public setAudioSource(int p0);
	@RequiredPermissions({android.Manifest.permission.CAMERA}) public setVideoSource(int p0);
}

class RingtoneManager {
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS}) public setActualDefaultRingtoneUri(android.content.Context p0,int p1,android.net.Uri p2);
}

package android.net;

class ConnectivityManager {
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getActiveNetworkInfo();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getAllNetworkInfo();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getLastTetherError(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getMobileDataEnabled();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getNetworkInfo(int p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getNetworkPreference();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetherableIfaces();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetherableUsbRegexs();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetherableWifiRegexs();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetheredIfaces();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetheringErroredIfaces();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public isTetheringSupported();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public requestRouteToHost(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_BACKGROUND_DATA_SETTING}) public setBackgroundDataSetting(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BACKUP}) public setMobileDataEnabled(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BACKUP}) public setNetworkPreference(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) public setRadio(int p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) public setRadios(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) public startUsingNetworkFeature(int p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public stopUsingNetworkFeature(int p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) public tether(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) public untether(java.lang.String p0);
}

class Downloads$ById {
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public deleteDownload(android.content.Context p0,long p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public getMimeTypeForId(android.content.Context p0,long p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public getStatus(android.content.Context p0,long p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public openDownload(android.content.Context p0,long p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public openDownloadStream(android.content.Context p0,long p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public startDownloadByUri(android.content.Context p0,java.lang.String p1,java.lang.String p2,boolean p3,int p4,boolean p5,boolean p6,java.lang.String p7,java.lang.String p8,java.lang.String p9,java.lang.String p10);
}

class Downloads$ByUri {
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public getCurrentOtaDownloads(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public getProgressCursor(android.content.Context p0,long p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public getStatus(android.content.Context p0,java.lang.String p1,long p2);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public removeAllDownloadsByPackage(android.content.Context p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public startDownloadByUri(android.content.Context p0,java.lang.String p1,java.lang.String p2,boolean p3,int p4,boolean p5,boolean p6,java.lang.String p7,java.lang.String p8,java.lang.String p9,java.lang.String p10);
}

class Downloads$DownloadBase {
	@RequiredPermissions({android.Manifest.permission.ACCESS_DOWNLOAD_MANAGER}) public startDownloadByUri(android.content.Context p0,java.lang.String p1,java.lang.String p2,boolean p3,int p4,boolean p5,boolean p6,java.lang.String p7,java.lang.String p8,java.lang.String p9,java.lang.String p10);
}

package android.net.http;

class RequestQueue {
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public enablePlatformNotifications();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public setProxyConfig();
}

package android.net;

class IConnectivityManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getActiveNetworkInfo();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getAllNetworkInfo();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getLastTetherError(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getMobileDataEnabled();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getNetworkInfo(int p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getNetworkPreference();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetherableIfaces();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetherableUsbRegexs();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetherableWifiRegexs();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetheredIfaces();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getTetheringErroredIfaces();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public isTetheringSupported();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public requestRouteToHost(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_BACKGROUND_DATA_SETTING}) public setBackgroundDataSetting(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BACKUP}) public setMobileDataEnabled(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BACKUP}) public setNetworkPreference(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) public setRadio(int p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) public setRadios(boolean p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE, android.Manifest.permission.CHANGE_NETWORK_STATE}) public startUsingNetworkFeature(int p0,java.lang.String p1,android.os.IBinder p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public stopUsingNetworkFeature(int p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) public tether(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.ACCESS_NETWORK_STATE}) public untether(java.lang.String p0);
}

class IThrottleManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getByteCount(java.lang.String p0,int p1,int p2,int p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getCliffLevel(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getCliffThreshold(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getHelpUri();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getPeriodStartTime(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getResetTime(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getThrottle(java.lang.String p0);
}

class MobileDataStateTracker {
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public reconnect();
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public setRadio(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public teardown();
}

class NetworkInfo {
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public isConnectedOrConnecting();
}

class ThrottleManager {
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getByteCount(java.lang.String p0,int p1,int p2,int p3);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getCliffLevel(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getCliffThreshold(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getHelpUri();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getPeriodStartTime(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getResetTime(java.lang.String p0);
}

package android.net.wifi;

class IWifiManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE}) public acquireMulticastLock(android.os.IBinder p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public acquireWifiLock(android.os.IBinder p0,int p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public addOrUpdateNetwork(android.net.wifi.WifiConfiguration p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public disableNetwork(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public disconnect();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public enableNetwork(int p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getConfiguredNetworks();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getConnectionInfo();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getDhcpInfo();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getNumAllowedChannels();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getScanResults();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getValidChannelCounts();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getWifiApEnabledState();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getWifiEnabledState();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE}) public initializeMulticastFiltering();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public isMulticastEnabled();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public pingSupplicant();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public reassociate();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public reconnect();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE}) public releaseMulticastLock();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public releaseWifiLock(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public removeNetwork(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public saveConfiguration();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public setNumAllowedChannels(int p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public setWifiApEnabled(android.net.wifi.WifiConfiguration p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public setWifiEnabled(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public startScan(boolean p0);
}

class WifiManager {
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public addNetwork(android.net.wifi.WifiConfiguration p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public addOrUpdateNetwork(android.net.wifi.WifiConfiguration p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public disableNetwork(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public disconnect();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public enableNetwork(int p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getConfiguredNetworks();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getConnectionInfo();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getDhcpInfo();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getNumAllowedChannels();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getScanResults();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getValidChannelCounts();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getWifiApState();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public getWifiState();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE}) public initializeMulticastFiltering();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public isMulticastEnabled();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public isWifiApEnabled();
	@RequiredPermissions({android.Manifest.permission.ACCESS_WIFI_STATE}) public isWifiEnabled();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public pingSupplicant();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public reassociate();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public reconnect();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public removeNetwork(int p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE, android.Manifest.permission.BACKUP}) public saveConfiguration();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public setNumAllowedChannels(int p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public setWifiApEnabled(android.net.wifi.WifiConfiguration p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public setWifiEnabled(boolean p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public startScan();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_STATE}) public startScanActive();
}

class WifiManager$MulticastLock {
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE}) public acquire();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE}) public finalize();
	@RequiredPermissions({android.Manifest.permission.CHANGE_WIFI_MULTICAST_STATE}) public release();
}

class WifiManager$WifiLock {
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public acquire();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public finalize();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public release();
}

package android.os;

class DropBoxManager {
	@RequiredPermissions({android.Manifest.permission.READ_LOGS}) public getNextEntry(java.lang.String p0,long p1);
}

class IHardwareService$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.FLASHLIGHT, android.Manifest.permission.HARDWARE_TEST}) public setFlashlightEnabled(boolean p0);
}

class INetworkManagementService$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public attachPppd(java.lang.String p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.String p4);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public detachPppd(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public disableNat(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public enableNat(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getDnsForwarders();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getInterfaceRxCounter(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getInterfaceRxThrottle(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getInterfaceTxCounter(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getInterfaceTxThrottle(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public getIpForwardingEnabled();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public isTetheringStarted();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public isUsbRNDISStarted();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public listInterfaces();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public listTetheredInterfaces();
	@RequiredPermissions({android.Manifest.permission.ACCESS_NETWORK_STATE}) public listTtys();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public setAccessPoint(android.net.wifi.WifiConfiguration p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public setInterfaceThrottle(java.lang.String p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public setIpForwardingEnabled(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SHUTDOWN}) public shutdown();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) public startAccessPoint(android.net.wifi.WifiConfiguration p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public startUsbRNDIS();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE, android.Manifest.permission.CHANGE_WIFI_STATE}) public stopAccessPoint();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public stopTethering();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public stopUsbRNDIS();
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public tetherInterface(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public unregisterObserver(android.net.INetworkManagementEventObserver p0);
	@RequiredPermissions({android.Manifest.permission.CHANGE_NETWORK_STATE}) public untetherInterface(java.lang.String p0);
}

class IPowerManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public acquireWakeLock(int p0,android.os.IBinder p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public clearUserActivityTimeout(long p0,long p1);
	@RequiredPermissions({android.Manifest.permission.REBOOT}) public crash(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public goToSleep(long p0);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public goToSleepWithReason(long p0,int p1);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public preventScreenOn(boolean p0);
	@RequiredPermissions({android.Manifest.permission.REBOOT}) public reboot(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public releaseWakeLock(android.os.IBinder p0,int p1);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public setAttentionLight(boolean p0,int p1);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public setBacklightBrightness(int p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS}) public setMaximumScreenOffTimeount(int p0);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public setPokeLock(int p0,android.os.IBinder p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS}) public setStayOnSetting(int p0);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public userActivityWithForce(long p0,boolean p1,boolean p2);
}

class IVibratorService$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.VIBRATE}) public cancelVibrate(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.VIBRATE}) public vibrate(long p0,android.os.IBinder p1);
	@RequiredPermissions({android.Manifest.permission.VIBRATE}) public vibratePattern(long [] p0,int p1,android.os.IBinder p2);
}

class PowerManager {
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public goToSleep(long p0);
	@RequiredPermissions({android.Manifest.permission.REBOOT}) public reboot(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.DEVICE_POWER}) public setBacklightBrightness(int p0);
}

class PowerManager$WakeLock {
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public acquire();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public acquire(long p0);
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public release();
	@RequiredPermissions({android.Manifest.permission.WAKE_LOCK}) public release(int p0);
}

class RecoverySystem {
	@RequiredPermissions({android.Manifest.permission.REBOOT}) public bootCommand(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.REBOOT}) public installPackage(android.content.Context p0,java.io.File p1);
	@RequiredPermissions({android.Manifest.permission.REBOOT}) public rebootWipeUserData(android.content.Context p0);
}

package android.os.storage;

class IMountService$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.ASEC_CREATE}) public createSecureContainer(java.lang.String p0,int p1,java.lang.String p2,java.lang.String p3,int p4);
	@RequiredPermissions({android.Manifest.permission.ASEC_DESTROY}) public destroySecureContainer(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.ASEC_CREATE}) public finalizeSecureContainer(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.MOUNT_FORMAT_FILESYSTEMS}) public formatVolume(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ASEC_ACCESS}) public getSecureContainerList();
	@RequiredPermissions({android.Manifest.permission.ASEC_ACCESS}) public getSecureContainerPath(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS}) public getStorageUsers(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ASEC_ACCESS}) public isSecureContainerMounted(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ASEC_MOUNT_UNMOUNT}) public mountSecureContainer(java.lang.String p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS}) public mountVolume(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.ASEC_RENAME}) public renameSecureContainer(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS}) public setUsbMassStorageEnabled(boolean p0);
	@RequiredPermissions({android.Manifest.permission.SHUTDOWN}) public shutdown(android.os.storage.IMountShutdownObserver p0);
	@RequiredPermissions({android.Manifest.permission.ASEC_MOUNT_UNMOUNT}) public unmountSecureContainer(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS}) public unmountVolume(java.lang.String p0,boolean p1);
}

class StorageManager {
	@RequiredPermissions({android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS}) public disableUsbMassStorage();
	@RequiredPermissions({android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS}) public enableUsbMassStorage();
}

package android.os;

class Vibrator {
	@RequiredPermissions({android.Manifest.permission.VIBRATE}) public cancel();
	@RequiredPermissions({android.Manifest.permission.VIBRATE}) public vibrate(long [] p0,int p1);
	@RequiredPermissions({android.Manifest.permission.VIBRATE}) public vibrate(long p0);
}

package android.pim.vcard;

class VCardComposer {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public createOneEntry();
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public createOneEntry(java.lang.reflect.Method p0);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public createOneEntryInternal(java.lang.String p0,java.lang.reflect.Method p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public init();
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public init(java.lang.String p0,java.lang.String [] p1);
}

class VCardComposer$HandlerForOutputStream {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public onInit(android.content.Context p0);
}

class VCardComposer$OneEntryHandler {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public onInit(android.content.Context p0);
}

class VCardEntry {
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public pushIntoContentResolver(android.content.ContentResolver p0);
}

class VCardEntryCommitter {
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public onEntryCreated(android.pim.vcard.VCardEntry p0);
}

class VCardEntryHandler {
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public onEntryCreated(android.pim.vcard.VCardEntry p0);
}

package android.provider;

class Browser {
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS, com.android.Manifest.browser.permission.WRITE_HISTORY_BOOKMARKS}) public addSearchUrl(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS}) public canClearHistory(android.content.ContentResolver p0);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS, com.android.Manifest.browser.permission.WRITE_HISTORY_BOOKMARKS}) public clearHistory(android.content.ContentResolver p0);
	@RequiredPermissions({com.android.Manifest.browser.permission.WRITE_HISTORY_BOOKMARKS}) public clearSearches(android.content.ContentResolver p0);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS, com.android.Manifest.browser.permission.WRITE_HISTORY_BOOKMARKS}) public deleteFromHistory(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS, com.android.Manifest.browser.permission.WRITE_HISTORY_BOOKMARKS}) public deleteHistoryTimeFrame(android.content.ContentResolver p0,long p1,long p2);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS, com.android.Manifest.browser.permission.WRITE_HISTORY_BOOKMARKS}) public deleteHistoryWhere(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS}) public getAllBookmarks(android.content.ContentResolver p0);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS}) public getAllVisitedUrls(android.content.ContentResolver p0);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS}) public getVisitedHistory(android.content.ContentResolver p0);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS}) public getVisitedLike(android.content.ContentResolver p0,java.lang.String p1);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS}) public requestAllIcons(android.content.ContentResolver p0,java.lang.String p1,android.webkit.WebIconDatabase$IconListener p2);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS, com.android.Manifest.browser.permission.WRITE_HISTORY_BOOKMARKS}) public truncateHistory(android.content.ContentResolver p0);
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS, com.android.Manifest.browser.permission.WRITE_HISTORY_BOOKMARKS}) public updateVisitedHistory(android.content.ContentResolver p0,java.lang.String p1,boolean p2);
}

class Calendar$CalendarAlerts {
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public alarmExists(android.content.ContentResolver p0,long p1,long p2,long p3);
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public findNextAlarmTime(android.content.ContentResolver p0,long p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_CALENDAR}) public insert(android.content.ContentResolver p0,long p1,long p2,long p3,long p4,int p5);
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String [] p3,java.lang.String p4);
}

class Calendar$Calendars {
	@RequiredPermissions({android.Manifest.permission.WRITE_CALENDAR}) public delete(android.content.ContentResolver p0,java.lang.String p1,java.lang.String [] p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_CALENDAR}) public deleteCalendarsForAccount(android.content.ContentResolver p0,android.accounts.Account p1);
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String p3);
}

class Calendar$EventDays {
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public query(android.content.ContentResolver p0,int p1,int p2);
}

class Calendar$Events {
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public query(android.content.ContentResolver p0,java.lang.String [] p1);
}

class Calendar$Instances {
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public query(android.content.ContentResolver p0,java.lang.String [] p1,long p2,long p3,java.lang.String p4,java.lang.String p5);
	@RequiredPermissions({android.Manifest.permission.READ_CALENDAR}) public query(android.content.ContentResolver p0,java.lang.String [] p1,long p2,long p3);
}

class CallLog$Calls {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) public addCall(com.android.internal.telephony.CallerInfo p0,android.content.Context p1,java.lang.String p2,int p3,int p4,long p5,int p6);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getLastOutgoingCall(android.content.Context p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public removeExpiredEntries(android.content.Context p0);
}

class Contacts$People {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) public addToGroup(android.content.ContentResolver p0,long p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public addToGroup(android.content.ContentResolver p0,long p1,long p2);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public addToMyContactsGroup(android.content.ContentResolver p0,long p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) public createPersonInMyContactsGroup(android.content.ContentResolver p0,android.content.ContentValues p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public loadContactPhoto(android.content.Context p0,android.net.Uri p1,int p2,android.graphics.BitmapFactory$Options p3);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) public markAsContacted(android.content.ContentResolver p0,long p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public openContactPhotoInputStream(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public queryGroups(android.content.ContentResolver p0,long p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS}) public setPhotoData(android.content.ContentResolver p0,android.net.Uri p1,boolean [] p2);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public tryGetMyContactsGroupId(android.content.ContentResolver p0);
}

class Contacts$Settings {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getSetting(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public setSetting(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3);
}

class ContactsContract$Contacts {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public lookupContact(android.content.ContentResolver p0,android.net.Uri p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public markAsContacted(android.content.ContentResolver p0,long p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public openContactPhotoInputStream(android.content.ContentResolver p0,android.net.Uri p1);
}

class ContactsContract$Data {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getContactLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
}

class ContactsContract$RawContacts {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getContactLookupUri(android.content.ContentResolver p0,android.net.Uri p1);
}

class DrmStore {
	@RequiredPermissions({android.Manifest.permission.ACCESS_DRM}) public enforceAccessDrmPermission(android.content.Context p0);
}

class Settings$Bookmarks {
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public add(android.content.ContentResolver p0,android.content.Intent p1,java.lang.String p2,java.lang.String p3,char p4,int p5);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public getIntentForShortcut(android.content.ContentResolver p0,char p1);
}

class Settings$Secure {
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public putFloat(android.content.ContentResolver p0,java.lang.String p1,float p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public putInt(android.content.ContentResolver p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public putLong(android.content.ContentResolver p0,java.lang.String p1,long p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public putString(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public setLocationProviderEnabled(android.content.ContentResolver p0,java.lang.String p1,boolean p2);
}

class Settings$System {
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS}) public putConfiguration(android.content.ContentResolver p0,android.content.res.Configuration p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS}) public putFloat(android.content.ContentResolver p0,java.lang.String p1,float p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS}) public putInt(android.content.ContentResolver p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS}) public putLong(android.content.ContentResolver p0,java.lang.String p1,long p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS}) public putString(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2);
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS}) public setShowGTalkServiceStatus(android.content.ContentResolver p0,boolean p1);
}

class Telephony$Mms {
	@RequiredPermissions({android.Manifest.permission.READ_SMS}) public query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions({android.Manifest.permission.READ_SMS}) public query(android.content.ContentResolver p0,java.lang.String [] p1);
}

class Telephony$Sms {
	@RequiredPermissions({android.Manifest.permission.WRITE_SMS, android.Manifest.permission.READ_SMS}) public addMessageToUri(android.content.ContentResolver p0,android.net.Uri p1,java.lang.String p2,java.lang.String p3,java.lang.String p4,java.lang.Long p5,boolean p6,boolean p7,long p8);
	@RequiredPermissions({android.Manifest.permission.WRITE_SMS, android.Manifest.permission.READ_SMS}) public addMessageToUri(android.content.ContentResolver p0,android.net.Uri p1,java.lang.String p2,java.lang.String p3,java.lang.String p4,java.lang.Long p5,boolean p6,boolean p7);
	@RequiredPermissions({android.Manifest.permission.WRITE_SMS}) public moveMessageToFolder(android.content.Context p0,android.net.Uri p1,int p2,int p3);
	@RequiredPermissions({android.Manifest.permission.READ_SMS}) public query(android.content.ContentResolver p0,java.lang.String [] p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions({android.Manifest.permission.READ_SMS}) public query(android.content.ContentResolver p0,java.lang.String [] p1);
}

class Telephony$Sms$Draft {
	@RequiredPermissions({android.Manifest.permission.READ_SMS, android.Manifest.permission.WRITE_SMS}) public addMessage(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.Long p4);
	@RequiredPermissions({android.Manifest.permission.WRITE_SMS}) public saveMessage(android.content.ContentResolver p0,android.net.Uri p1,java.lang.String p2);
}

class Telephony$Sms$Inbox {
	@RequiredPermissions({android.Manifest.permission.READ_SMS, android.Manifest.permission.WRITE_SMS}) public addMessage(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.Long p4,boolean p5);
}

class Telephony$Sms$Outbox {
	@RequiredPermissions({android.Manifest.permission.WRITE_SMS}) public addMessage(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.Long p4,boolean p5,long p6);
}

class Telephony$Sms$Sent {
	@RequiredPermissions({android.Manifest.permission.READ_SMS, android.Manifest.permission.WRITE_SMS}) public addMessage(android.content.ContentResolver p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.Long p4);
}

class Telephony$Threads {
	@RequiredPermissions({android.Manifest.permission.READ_SMS}) public getOrCreateThreadId(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_SMS}) public getOrCreateThreadId(android.content.Context p0,java.util.Set p1);
}

class UserDictionary$Words {
	@RequiredPermissions({android.Manifest.permission.WRITE_USER_DICTIONARY}) public addWord(android.content.Context p0,java.lang.String p1,int p2,int p3);
}

package android.server;

class BluetoothA2dpService {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public BluetoothA2dpService(android.content.Context p0,android.server.BluetoothService p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public addAudioSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public checkSinkSuspendState(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public connectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public disconnectSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getConnectedSinks();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getNonDisconnectedSinks();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getSinkPriority(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getSinkState(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS}) public handleSinkStateChange(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isSinkDevice(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public lookupSinksMatchingStates(int[] p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS, android.Manifest.permission.BLUETOOTH}) public onBluetoothDisable();
	@RequiredPermissions({android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public onBluetoothEnable();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public onConnectSinkResult(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public onSinkPropertyChanged(java.lang.String p0,java.lang.String [] p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public resumeSink(android.bluetooth.BluetoothDevice p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public setSinkPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.WRITE_SETTINGS}) public setSinkPriority(android.bluetooth.BluetoothDevice p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH, android.Manifest.permission.MODIFY_AUDIO_SETTINGS}) public suspendSink(android.bluetooth.BluetoothDevice p0);
}

class BluetoothService {
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public addRemoteDeviceProperties(java.lang.String p0,java.lang.String [] p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public addRfcommServiceRecord(java.lang.String p0,android.os.ParcelUuid p1,int p2,android.os.IBinder p3);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelBondProcess(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelDiscovery();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public cancelPairingUserInput(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public createBond(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public disable();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public disable(boolean p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public enable();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public enable(boolean p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public fetchRemoteUuids(java.lang.String p0,android.os.ParcelUuid p1,android.bluetooth.IBluetoothCallback p2);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getAddress();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getAddressFromObjectPath(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getAllProperties();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getBluetoothState();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getBondState(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getDiscoverableTimeout();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getName();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getObjectPathFromAddress(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getProperty(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getPropertyInternal(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getRemoteClass(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getRemoteName(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getRemoteServiceChannel(java.lang.String p0,android.os.ParcelUuid p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getRemoteUuids(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getScanMode();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public getTrustState(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isDiscovering();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public isEnabled();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public listBonds();
	@RequiredPermissions({android.Manifest.permission.WRITE_SETTINGS, android.Manifest.permission.WRITE_SECURE_SETTINGS}) public persistBluetoothOnSetting(boolean p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public removeBond(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public removeServiceRecord(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public sendUuidIntent(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public setDiscoverableTimeout(int p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public setLinkTimeout(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN, android.Manifest.permission.BLUETOOTH}) public setName(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPairingConfirmation(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPasskey(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setPin(java.lang.String p0,boolean [] p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public setPropertyBoolean(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public setPropertyInteger(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public setPropertyString(java.lang.String p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.WRITE_SECURE_SETTINGS, android.Manifest.permission.BLUETOOTH}) public setScanMode(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public setTrust(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH_ADMIN}) public startDiscovery();
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public updateDeviceServiceChannelCache(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.BLUETOOTH}) public updateRemoteDevicePropertiesCache(java.lang.String p0);
}

package android.server.search;

class Searchables {
	@RequiredPermissions({android.Manifest.permission.GLOBAL_SEARCH}) public buildSearchableList();
	@RequiredPermissions({android.Manifest.permission.GLOBAL_SEARCH}) public findGlobalSearchActivity();
}

package android.service.urlrenderer;

class UrlRendererService {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

package android.service.wallpaper;

class WallpaperService {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

package android.speech;

class RecognitionService {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class SpeechRecognizer {
	@RequiredPermissions({android.Manifest.permission.RECORD_AUDIO}) public cancel();
	@RequiredPermissions({android.Manifest.permission.RECORD_AUDIO}) public handleCancelMessage();
	@RequiredPermissions({android.Manifest.permission.RECORD_AUDIO}) public handleStartListening(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.RECORD_AUDIO}) public handleStopMessage();
	@RequiredPermissions({android.Manifest.permission.RECORD_AUDIO}) public startListening(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.RECORD_AUDIO}) public stopListening();
}

package android.telephony.gsm;

class SmsManager {
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) public copyMessageToSim(boolean [] p0,boolean [] p1,int p2);
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) public deleteMessageFromSim(int p0);
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS}) public getAllMessagesFromSim();
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendDataMessage(java.lang.String p0,java.lang.String p1,short p2,boolean [] p3,android.app.PendingIntent p4,android.app.PendingIntent p5);
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendMultipartTextMessage(java.lang.String p0,java.lang.String p1,java.util.ArrayList p2,java.util.ArrayList p3,java.util.ArrayList p4);
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendTextMessage(java.lang.String p0,java.lang.String p1,java.lang.String p2,android.app.PendingIntent p3,android.app.PendingIntent p4);
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) public updateMessageOnSim(int p0,int p1,boolean [] p2);
}

package android.telephony;

class PhoneNumberUtils {
	@RequiredPermissions({android.Manifest.permission.CALL_PRIVILEGED, android.Manifest.permission.READ_CONTACTS}) public getNumberFromIntent(android.content.Intent p0,android.content.Context p1);
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public isVoiceMailNumber(java.lang.String p0);
}

class SmsManager {
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) public copyMessageToIcc(boolean [] p0,boolean [] p1,int p2);
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) public deleteMessageFromIcc(int p0);
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS}) public getAllMessagesFromIcc();
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendDataMessage(java.lang.String p0,java.lang.String p1,short p2,boolean [] p3,android.app.PendingIntent p4,android.app.PendingIntent p5);
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendMultipartTextMessage(java.lang.String p0,java.lang.String p1,java.util.ArrayList p2,java.util.ArrayList p3,java.util.ArrayList p4);
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendTextMessage(java.lang.String p0,java.lang.String p1,java.lang.String p2,android.app.PendingIntent p3,android.app.PendingIntent p4);
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS, android.Manifest.permission.SEND_SMS}) public updateMessageOnIcc(int p0,int p1,boolean [] p2);
}

class TelephonyManager {
	@RequiredPermissions({android.Manifest.permission.CONTROL_LOCATION_UPDATES}) public disableLocationUpdates();
	@RequiredPermissions({android.Manifest.permission.CONTROL_LOCATION_UPDATES}) public enableLocationUpdates();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getCellLocation();
	@RequiredPermissions({android.Manifest.permission.CALL_PRIVILEGED}) public getCompleteVoiceMailNumber();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getDeviceId();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getDeviceSoftwareVersion();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getLine1AlphaTag();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getLine1Number();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getNeighboringCellInfo();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getSimSerialNumber();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getSubscriberId();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getVoiceMailAlphaTag();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getVoiceMailNumber();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public listen(android.telephony.PhoneStateListener p0,int p1);
}

package android.view;

class ContextThemeWrapper {
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public clearWallpaper();
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public removeStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyBroadcast(android.content.Intent p0);
	@RequiredPermissions({android.Manifest.permission.BROADCAST_STICKY}) public sendStickyOrderedBroadcast(android.content.Intent p0,android.content.BroadcastReceiver p1,android.os.Handler p2,int p3,java.lang.String p4,android.os.Bundle p5);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(android.graphics.Bitmap p0);
	@RequiredPermissions({android.Manifest.permission.SET_WALLPAPER}) public setWallpaper(java.io.InputStream p0);
}

class IWindowManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public addAppToken(int p0,android.view.IApplicationToken p1,int p2,int p3,boolean p4);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public addWindowToken(android.os.IBinder p0,int p1);
	@RequiredPermissions({android.Manifest.permission.DISABLE_KEYGUARD}) public disableKeyguard(android.os.IBinder p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public executeAppTransition();
	@RequiredPermissions({android.Manifest.permission.DISABLE_KEYGUARD}) public exitKeyguardSecurely(android.view.IOnKeyguardExitResult p0);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getDPadKeycodeState(int p0);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getDPadScancodeState(int p0);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getKeycodeState(int p0);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getKeycodeStateForDevice(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getScancodeState(int p0);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getScancodeStateForDevice(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getSwitchState(int p0);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getSwitchStateForDevice(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getTrackballKeycodeState(int p0);
	@RequiredPermissions({android.Manifest.permission.READ_INPUT_STATE}) public getTrackballScancodeState(int p0);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public injectKeyEvent(android.view.KeyEvent p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public injectPointerEvent(android.view.MotionEvent p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.INJECT_EVENTS}) public injectTrackballEvent(android.view.MotionEvent p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.DUMP}) public isViewServerRunning();
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public moveAppToken(int p0,android.os.IBinder p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public moveAppTokensToBottom(java.util.List p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public moveAppTokensToTop(java.util.List p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public pauseKeyDispatching(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public prepareAppTransition(int p0);
	@RequiredPermissions({android.Manifest.permission.DISABLE_KEYGUARD}) public reenableKeyguard(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public removeAppToken(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public removeWindowToken(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public resumeKeyDispatching(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.SET_ANIMATION_SCALE}) public setAnimationScale(int p0,float p1);
	@RequiredPermissions({android.Manifest.permission.SET_ANIMATION_SCALE}) public setAnimationScales(float [] p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public setAppGroupId(android.os.IBinder p0,int p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public setAppOrientation(android.view.IApplicationToken p0,int p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public setAppStartingWindow(android.os.IBinder p0,java.lang.String p1,int p2,java.lang.CharSequence p3,int p4,int p5,android.os.IBinder p6,boolean p7);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public setAppVisibility(android.os.IBinder p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public setAppWillBeHidden(android.os.IBinder p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public setEventDispatching(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public setFocusedApp(android.os.IBinder p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS, android.Manifest.permission.DEVICE_POWER}) public setNewConfiguration(android.content.res.Configuration p0);
	@RequiredPermissions({android.Manifest.permission.SET_ORIENTATION}) public setRotation(int p0,boolean p1,int p2);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public startAppFreezingScreen(android.os.IBinder p0,int p1);
	@RequiredPermissions({android.Manifest.permission.DUMP}) public startViewServer(int p0);
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public stopAppFreezingScreen(android.os.IBinder p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.DUMP}) public stopViewServer();
	@RequiredPermissions({android.Manifest.permission.MANAGE_APP_TOKENS}) public updateOrientationFromAppTokens(android.content.res.Configuration p0,android.os.IBinder p1);
}

class IWindowSession$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.SYSTEM_ALERT_WINDOW, android.Manifest.permission.INTERNAL_SYSTEM_WINDOW}) public add(android.view.IWindow p0,android.view.WindowManager$LayoutParams p1,int p2,android.graphics.Rect p3);
}

class Surface {
	@RequiredPermissions({android.Manifest.permission.ACCESS_SURFACE_FLINGER}) public closeTransaction();
	@RequiredPermissions({android.Manifest.permission.ACCESS_SURFACE_FLINGER}) public freezeDisplay(int p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_SURFACE_FLINGER}) public setOrientation(int p0,int p1,int p2);
	@RequiredPermissions({android.Manifest.permission.ACCESS_SURFACE_FLINGER}) public setOrientation(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.ACCESS_SURFACE_FLINGER}) public unfreezeDisplay(int p0);
}

class SurfaceSession {
	@RequiredPermissions({android.Manifest.permission.ACCESS_SURFACE_FLINGER}) public SurfaceSession();
}

package android.webkit;

class GeolocationService {
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION}) public registerForLocationUpdates();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public setEnableGps(boolean p0);
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION}) public start();
}

class WebChromeClient {
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public onGeolocationPermissionsShowPrompt(java.lang.String p0,android.webkit.GeolocationPermissions.Callback p1);
}

class WebIconDatabase {
	@RequiredPermissions({com.android.Manifest.browser.permission.READ_HISTORY_BOOKMARKS}) public bulkRequestIconForPageUrl(android.content.ContentResolver p0,java.lang.String p1,android.webkit.WebIconDatabase$IconListener p2);
}

class WebSettings {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public setBlockNetworkLoads(boolean p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public verifyNetworkAccess();
}

class WebView {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public WebView(android.content.Context p0,android.util.AttributeSet p1,int p2);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public WebView(android.content.Context p0,android.util.AttributeSet p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public WebView(android.content.Context p0);
}

class WebViewCore {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public WebViewCore(android.content.Context p0,android.webkit.WebView p1,android.webkit.CallbackProxy p2,java.util.Map p3);
}

package android.widget;

class QuickContactBadge {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public assignContactFromEmail(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public assignContactFromPhone(java.lang.String p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public trigger(android.net.Uri p0);
}

package com.android.http.multipart;

class FilePart {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public sendData(java.io.OutputStream p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public sendDispositionHeader(java.io.OutputStream p0);
}

class Part {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public send(java.io.OutputStream p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public sendParts(java.io.OutputStream p0,com.android.http.multipart.Part[] p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public sendParts(java.io.OutputStream p0,com.android.http.multipart.Part[] p1,byte[] p2);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public sendStart(java.io.OutputStream p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public sendTransferEncodingHeader(java.io.OutputStream p0);
}

class StringPart {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public sendData(java.io.OuputStream p0);
}

package com.android.internal.app;

class IBatteryStats$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BATTERY_STATS}) public getAwakeTimeBattery();
	@RequiredPermissions({android.Manifest.permission.BATTERY_STATS}) public getAwakeTimePlugged();
	@RequiredPermissions({android.Manifest.permission.BATTERY_STATS}) public getStatistics();
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteFullWifiLockAcquired(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteFullWifiLockReleased(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteInputEvent();
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public notePhoneDataConnectionState(int p0,boolean p1);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public notePhoneOff();
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public notePhoneOn();
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public notePhoneSignalStrength(SignalStrength p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public notePhoneState(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteScanWifiLockAcquired(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteScanWifiLockReleased(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteScreenBrightness(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteScreenOff();
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteScreenOn();
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteStartGps(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteStartSensor(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteStartWakelock(int p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteStopGps(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteStopSensor(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteStopWakelock(int p0,java.lang.String p1,int p2);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteUserActivity(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteWifiMulticastDisabled(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteWifiMulticastEnabled(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteWifiOff(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteWifiOn(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteWifiRunning();
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteWifiStopped();
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public recordCurrentLevel(int p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public setOnBattery(boolean p0,int p1);
}

class IUsageStats$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.PACKAGE_USAGE_STATS}) public getAllPkgUsageStats();
	@RequiredPermissions({android.Manifest.permission.PACKAGE_USAGE_STATS}) public getPkgUsageStats(ComponentName p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteLaunchTime(ComponentName p0, int p1);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public notePauseComponent(ComponentName p0);
	@RequiredPermissions({android.Manifest.permission.UPDATE_DEVICE_STATS}) public noteResumeComponent(ComponentName p0);
}

package com.android.internal.appwidget;

class IAppWidgetService$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.BIND_APPWIDGET}) public bindAppWidgetId(int p0,ComponentName p1);
}

package com.android.internal.os;

class IDropBoxManagerService$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.READ_LOGS}) public getNextEntry(java.lang.String p0,long p1);
}

package com.android.internal.telephony;

class CallerInfo {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getCallerId(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getCallerInfo(android.content.Context p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public markAsVoiceMail();
}

class IccPhoneBookInterfaceManager$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getAdnRecordsInEf(int p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public updateAdnRecordsInEfByIndex(int p0,java.lang.String p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public updateAdnRecordsInEfBySearch(int p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.String p4,java.lang.String p5);
}

class IIccPhoneBook$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.READ_CONTACTS}) public getAdnRecordsInEf(int p0);
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public updateAdnRecordsInEfByIndex(int p0,java.lang.String p1,java.lang.String p2,java.lang.String p3);
	@RequiredPermissions({android.Manifest.permission.WRITE_CONTACTS}) public updateAdnRecordsInEfBySearch(int p0,java.lang.String p1,java.lang.String p2,java.lang.String p3,java.lang.String p4,java.lang.String p5);
}

class IPhoneSubInfo$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getDeviceId();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getDeviceSvn();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getIccSerialNumber();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getLine1AlphaTag();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getLine1Number();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getSubscriberId();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getVoiceMailAlphaTag();
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public getVoiceMailNumber();
}

class ISms$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS}) public copyMessageToIccEf(int p0,byte[] p1,byte[] p2);
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS}) public getAllMessagesFromIccEf();
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendData(java.lang.String p0,java.lang.String p1,int p2,byte[] p3,android.app.PendingIntent p4,android.app.PendingIntent p5);
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendMultipartText(java.lang.String p0,java.lang.String p1,java.util.List p2,java.util.List p3,java.util.List p4);
	@RequiredPermissions({android.Manifest.permission.SEND_SMS}) public sendText(java.lang.String p0,java.lang.String p1,java.lang.String p2,android.app.PendingIntent p3,android.app.PendingIntent p4);
	@RequiredPermissions({android.Manifest.permission.RECEIVE_SMS}) public updateMessageOnIccEf(int p0,int p1,byte[] p2);
}

class ITelephony$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public answerRingingCall();
	@RequiredPermissions({android.Manifest.permission.CALL_PHONE}) public call(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public cancelMissedCallsNotification();
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public disableApnType(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public disableDataConnectivity();
	@RequiredPermissions({android.Manifest.permission.CONTROL_LOCATION_UPDATES}) public disableLocationUpdates();
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public enableApnType(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public enableDataConnectivity();
	@RequiredPermissions({android.Manifest.permission.CONTROL_LOCATION_UPDATES}) public enableLocationUpdates();
	@RequiredPermissions({android.Manifest.permission.CALL_PHONE}) public endCall();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getCellLocation();
	@RequiredPermissions({android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public getNeighboringCellInfo();
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public handlePinMmi(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE}) public isSimPinEnabled();
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public setRadio(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public silenceRinger();
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public supplyPin(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public toggleRadioOnOff();
}

class ITelephonyRegistry$Stub$Proxy {
	@RequiredPermissions({android.Manifest.permission.READ_PHONE_STATE, android.Manifest.permission.ACCESS_COARSE_LOCATION}) public listen(java.lang.String p0,com.android.internal.telephony.IPhoneStateListener p1,int p2,boolean p3);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public notifyCallForwardingChanged(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public notifyCallState(int p0,java.lang.String p1);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public notifyCellLocation(android.os.Bundle p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public notifyDataActivity(int p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE, android.Manifest.permission.BROADCAST_STICKY}) public notifyDataConnection(int p0,boolean p1,java.lang.String p2,java.lang.String p3,java.lang.String[] p4,java.lang.String p5,int p6);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE, android.Manifest.permission.BROADCAST_STICKY}) public notifyDataConnectionFailed(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public notifyMessageWaitingChanged(boolean p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public notifyServiceState(android.telephony.ServiceState p0);
	@RequiredPermissions({android.Manifest.permission.MODIFY_PHONE_STATE}) public notifySignalStrength(android.telephony.SignalStrength p0);
}

package com.android.server;

class WallpaperManagerService {
	@RequiredPermissions({android.Manifest.permission.BIND_WALLPAPER, android.Manifest.permission.MANAGE_APP_TOKENS}) public bindWallpaperComponentLocked(android.content.ComponentName p0);
	@RequiredPermissions({android.Manifest.permission.DUMP}) public dump(java.io.FileDescriptor p0,java.io.PrintWriter p1,String [] p2);
}

package java.lang;

class Runtime {
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) public exec(java.lang.String p0);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) public exec(java.lang.String[] p0);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) public exec(java.lang.String[] p0,java.lang.String[] p1);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) public exec(java.lang.String[] p0,java.lang.String[] p1,java.io.File p2);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) public exec(java.lang.String p0,java.lang.String[] p1);
	@RequiredPermissions({android.Manifest.permission.READ_LOGS, android.Manifest.permission.DUMP, android.Manifest.permission.INSTALL_PACKAGES}) public exec(java.lang.String p0,java.lang.String[] p1,java.io.File p2);
}

package java.net;

class DatagramSocket {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public DatagramSocket();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public DatagramSocket(int p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public DatagramSocket(int p0,java.net.InetAddress p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public DatagramSocket(java.net.SocketAddress p0);
}

class HttpURLConnection {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public HttpURLConnection(java.net.URL p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public connect();
}

class MulticastSocket {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public MulticastSocket();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public MulticastSocket(int p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public MulticastSocket(java.net.SocketAddress p0);
}

class NetworkInterface {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public NetworkInterface();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public NetworkInterface(java.lang.String p0,int p1,java.net.InetAddress p2);
}

class ServerSocket {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public ServerSocket();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public ServerSocket(int p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public ServerSocket(int p0,int p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public ServerSocket(int p0,int p1,java.net.InetAddress p2);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public bind(java.net.SocketAddress p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public bind(java.net.SocketAddress p0,int p1);
}

class Socket {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public Socket();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public Socket(java.lang.String p0,int p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public Socket(java.lang.String p0,int p1,java.net.InetAddress p2,int p3);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public Socket(java.lang.String p0,int p1,boolean p2);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public Socket(java.net.InetAddress p0,int p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public Socket(java.net.InetAddress p0,int p1,java.net.InetAddress p2,int p3);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public Socket(java.net.InetAddress p0,int p1,boolean p2);
}

class URL {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public getContent(java.lang.Class[] p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public getContent();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public openConnection(java.net.Proxy p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public openConnection();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public openStream();
}

class URLConnection {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public connect();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public getInputStream();
}

package org.apache.http.impl.client;

class DefaultHttpClient {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public DefaultHttpClient();
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public DefaultHttpClient(org.apache.http.params.HttpParams p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public DefaultHttpClient(org.apache.http.conn.ClientConnectionManager p0,org.apache.http.params.HttpParams p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.client.methods.HttpUriRequest p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1,org.apache.http.protocol.HttpContext p2);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.client.ResponseHandler p2,org.apache.http.protocol.HttpContext p3);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.protocol.HttpContext p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.client.ResponseHandler p2);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.protocol.HttpContext p2);
}

class HttpClient {
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.client.methods.HttpUriRequest p0);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1,org.apache.http.protocol.HttpContext p2);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.client.ResponseHandler p2,org.apache.http.protocol.HttpContext p3);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.protocol.HttpContext p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.client.methods.HttpUriRequest p0,org.apache.http.client.ResponseHandler p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.client.ResponseHandler p2);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1);
	@RequiredPermissions({android.Manifest.permission.INTERNET}) public execute(org.apache.http.HttpHost p0,org.apache.http.client.methods.HttpUriRequest p1,org.apache.http.protocol.HttpContext p2);
}
