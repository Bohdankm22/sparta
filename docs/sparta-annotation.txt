[Working on the flow checker]
- Seungyeop Han <syhan@cs.washington.edu> (06/06/12)
- Philip Lai <plai68@cs.washington.edu> (07/09/12)

This document describes how to work with the flow checker used in the SPARTA project. 

* required programs: Java 7 SE, mercurial (hg), ant, android-sdk

1. Required programs

- If working on the lab machines, Java 6 is the default Java version. You'll have to download Java 7 into your home directory and add <java folder>/jdk1.7.0/bin to the PATH variable, as well as <java folder>/jdk1.7.0 to the JAVA_HOME variable.
- Install the Android SDK to some directory. 
- If using Eclipse, go to Help -> Install New Software and install the Android ADT Plugin [https://dl-ssl.google.com/android/eclipse] and MercurialEclipse [http://cbes.javaforge.com/update]

2. Install checker framework
Werner mentioned that it would work best in Linux machines.

Follow the instruction described in:
http://types.cs.washington.edu/checker-framework/current/checkers-manual.html#build-source

Note: As of writing this (07/09/12), the ant command in 25.3.3 produces some error output. This is expected for now, so just run it and then move on.

3. Install and compile flow checker prototype.
It's in the mercurial repo.--- /projects/swlab1/darpa-apac/sparta-code
$ hg clone ssh://YOURID@SERVERNAME//projects/swlab1/darpa-apac/sparta-code
To push your changes to the repository, you need to be in sparta group. Contact
Werner or Mike to get the permission.

(Along with sparta-code, you may be interested in the sparta-meetings and apac-meetings repositories for general information on the flow checker.)

Usually I compile it through eclipse. To compile this, you need to import
projects from checker-framework. Import checkers, javaparser from
checker-framework and jsr308-langtools.

Note that flow checker (as well as checker-framework) is evolving, thus you may
need pull and update with updated source code and rebuild them.
$ hg pull
$ hg update

4. Test applications
Test applications are stored in /projects/swlab1/darpa-apac/sparta-subjects
Before running ant, it's required to set three environment variables 
CHECKERS -> pointing checkers directory in checker-framework
SPARTA_CODE -> pointing sparta-code directory
ANDROID_HOME -> pointing android-sdk home directory

At each directory, you might need to update the project with your android setting 
$ ant -buildfile $SPARTA_CODE/build.local.xml

Try to run ant in sparta-subjects/Sky 
$ ant flowtest

If it gives results like this, you're ready to work on annoation!
[jsr308.javac] /home/syhan/jsr308/sparta-subjects/Sky/src/org/jsharkey/sky/WebserviceHelper.java:308: error: incompatible types.
[jsr308.javac]             HttpGet request = new HttpGet(String.format(WEBSERVICE_URL, lat, lon, days));
[jsr308.javac]                                                        ^
[jsr308.javac]   found   : @FlowSinks @FlowSources String
[jsr308.javac]   required: @sparta.checkers.quals.FlowSinks({sparta.checkers.quals.FlowSinks.FlowSink.NETWORK}) @FlowSources String

If you want to add a new application, put it under the directory sparta-subjects.

In general, these tips seem to be useful when setting up a new application to test. This assumes you're using Eclipse to look at and build the code.
- Generate the local.properties, project.properties, and build.xml files by running <android-sdk directory>/android update project --path <app folder> --target android-15
- Edit the build.xml file to add the sparta code requirements (see example projects for an example)
- Using Eclipse, import the project (this requires the app to have a .project and .classpath file)
  - Make sure ProjectProperties->Android->Android 4.0.3 is checked
    - Check that ProjectProperties->Java Build Path->Libraries->Android 4.0.3 appears
  - Add the sparta-code project to ProjectProperties->Java Build Path->Projects
- Compile via command line (ant clean, ant flowtest)
- If it compiles, or the errors are exclusively about annotations, it's working correctly.

Further tips on errors I've experienced. Most (all?) Android apps will rely on an autogenerated R.java file in the <project>/gen directory. This will only be generated if there are no errors in the project. There may be errors in the resources (.../res directory) that could cause R to not be generated.

Additionally, if the app depends on an external .jar file (often located in the lib/ directory), it will compile in Eclipse but not with Ant. To fix this, in ant.properties, add "jar.libs.dir=lib" (or wherever the .jar is located).

5. Annotations
There are mainly two parts in adding annotations. 
First, we need to annotate flow stub file (flow.astub) in sparta-code. 
It's used for annotating android APIs. For instance, 

package android.telephony;

class TelephonyManager {
    public @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.PHONE_NUMBER) String getLine1Number();
    public @FlowSources(sparta.checkers.quals.FlowSources.FlowSource.IMEI) String getDeviceId();
}

Annotating TelephonyManager class in android.telephony package.  It means that
getLine1Number function returns String which is Phone Number.  For more
details, please look into the flow.astub file.

FlowSources specifies data sources such as phone number, location, and etc. And
FlowSinks specifies sinks, such as files, network, and so on.

You may need to get android source code to get sense of what api returns (or
gets) what type of data. See http://source.android.com/source/index.html
You can find the list of all apis from the android source code in 
frameworks/base/api/15.txt - api list for api version 15 (Android 4.0.3)
Accessing resource is closely related to android permissions (some of the
resources are not protected with permissions though). Android permission list
is at:
http://developer.android.com/reference/android/Manifest.permission.html
Hints to add annotations could be permissionmap (which permission is required
to call which functions):
http://www.android-permissions.org/permissionmap.html

Types of flowsinks and flowsources are listed in the FlowSinks.java and
FlowSources.java files in sparta.checkers.quals project of sparta-code. 

The second part is annotating Android applications to match with specified
annotations in the stub file. Run flowtest and see if any incompatible types are
shown and add more annotations to applications. Also there could be missing
annotations in the stub file, then you need to add them.
