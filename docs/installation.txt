This document describes how to install the SPARTA project tools.

1. Required programs

- Download and install Java 7. Add <javafolder>/jdk1.7.0/bin to the
  beginning of the PATH variable and set JAVA_HOME to
  <javafolder>/jdk1.7.0.

- Ensure you have recent versions of ant and Mercurial (hg) installed;
  ant version 1.8.2 and Mercurial version 2.0.2 are known to work.

- Install the Android SDK to some directory. Set ANDROID_HOME to that
  location.

- If using Eclipse, go to Help -> Install New Software and install the
  Android ADT Plugin [https://dl-ssl.google.com/android/eclipse] and
  MercurialEclipse [http://cbes.javaforge.com/update].


2. Install the Checker Framework tool set
Linux is our development platform, but we know of successful uses on
MacOS; Windows is possible, but takes more effort.

Follow the instruction at:

http://types.cs.washington.edu/checker-framework/current/checkers-manual.html#build-source

Note: As of writing this (08/12/12), the annotation-tools test cases
produce some error output. This is expected and can be ignored.


3. Install and compile the SPARTA type checkers

Google gson is a dependency for the "-json" targets for projects.
Get it from http://code.google.com/p/google-gson/;
create directory sparta-code/lib and unzip gson there.
Alternatively, set build property gson.jar, which defaults to:

gson.jar=${basedir}/lib/google-gson-2.2.2/gson-2.2.2.jar


In the sparta-code directory, run

$ ant jar

to build the sparta.jar file.
The Android SDK location is either taken from the ANDROID_HOME
environment variable or can be set with the android.home property:

$ ant -Dandroid.home=...

See file build.properties for other configuration properties.

All projects can also be built and tested in Eclipse.
Import the annotation-tools, jsr308-langtools, checkers, javaparser,
and sparta-code projects into a workspace.


4. Test cases

As a sanity check of the installation, run

$ ant all-tests

You should see "BUILD SUCCESSFUL" at the end.


5. Checking applications

It is required to set three environment variables:

CHECKERS -> pointing to the .../checker-framework/checkers directory
SPARTA_CODE -> pointing to the .../sparta-code directory
ANDROID_HOME -> pointing to the .../android-sdk directory

Update the project with your Android settings:

$ ant -buildfile $SPARTA_CODE/build.local.xml

Alternatively, you can run:

$ $ANDROID_HOME/tools/android update project --path . --target android-16

Edit the build.xml file to add the SPARTA build targets at the end
(right before the "</project>"):


<property environment="env"/>
<dirname property="checkers_dir" file="${env.CHECKERS}"/>
<basename property="checkers_base" file="${env.CHECKERS}"/>
<dirname property="sparta-code_dir" file="${env.SPARTA_CODE}"/>
<basename property="sparta-code_base" file="${env.SPARTA_CODE}"/>
<import file="${sparta-code_dir}/${sparta-code_base}/build.include.xml"/>


Some tips for setting up a new application to test.
This assumes you're using Eclipse to look at and build the code.
- Using Eclipse, import the project (this requires the app to have a
.project and .classpath file)
  - Make sure ProjectProperties->Android->Android <version #> is checked
    - Check that ProjectProperties->Java Build Path->Libraries->Android <version #> appears
  - Add the sparta-code project to ProjectProperties->Java Build Path->Projects
- Compile via command line (ant clean, ant flowtest)
- If it compiles, or the errors are exclusively about annotations,
  it's working correctly.


Further tips on errors I've experienced. Most (all?) Android apps will
rely on an autogenerated R.java file in the <project>/gen
directory. This will only be generated if there are no errors in the
project. There may be errors in the resources (.../res directory) that
could cause R to not be generated.

Additionally, if the app depends on an external .jar file (often
located in the lib/ directory), it will compile in Eclipse but not
with Ant. To fix this, in ant.properties, add "jar.libs.dir=lib" (or
wherever the .jar is located).


See file usage.txt for the workflow of analyzing an application.
